# TritonInstrumentOps<!-- Autogenerated by mlir-tblgen; don't manually edit -->

### `tti.experimental_assert_in_thread` (triton::instrument::ExperimentalAssertInThreadOp)

_Assert the condition within the current thread_

Syntax:

```
operation ::= `tti.experimental_assert_in_thread` $condition `,` $message attr-dict `:` type($condition)
```

Assert that the condition is true given all the values are available in the current thread.
If the condition is false, the message is printed, and the program is aborted.
If check_any is true, any of the values in the condition must be true. Otherwise, all the
values in the condition must be true.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>message</code></td><td>::mlir::StringAttr</td><td>string attribute</td></tr>
<tr><td><code>check_any</code></td><td>::mlir::BoolAttr</td><td>bool attribute</td></tr>
</table>

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `condition` | 1-bit signless integer or tensor of 1-bit signless integer values |


### `tti.experimental_buffer_pointers` (triton::instrument::ExperimentalBufferPointersOp)

_Definte an array of pointers to shared memory buffers_

Syntax:

```
operation ::= `tti.experimental_buffer_pointers` $offsets `,` $memType attr-dict `:` type($result)
```

Create a tensor of pointers to shared memory buffers.

Traits: `AlwaysSpeculatableImplTrait`

Interfaces: `ConditionallySpeculatable`, `NoMemoryEffect (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{}`

#### Attributes:

<table>
<tr><th>Attribute</th><th>MLIR Type</th><th>Description</th></tr>
<tr><td><code>offsets</code></td><td>::mlir::DenseI32ArrayAttr</td><td>i32 dense array attribute</td></tr>
<tr><td><code>memType</code></td><td>::mlir::triton::instrument::MemTypeAttr</td><td>allowed 32-bit signless integer cases: 0, 1</td></tr>
</table>

#### Results:

| Result | Description |
| :----: | ----------- |
| `result` | ranked tensor of floating-point or integer or ptr values |


### `tti.experimental_lock_acquire` (triton::instrument::ExperimentalLockAcquireOp)

_Acquire a lock._

Syntax:

```
operation ::= `tti.experimental_lock_acquire` $lock (`,` $pred^)? attr-dict `:` type($lock)
```

Enter a critical section by acquiring a lock with single thread.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `lock` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_lock_release` (triton::instrument::ExperimentalLockReleaseOp)

_Release a lock._

Syntax:

```
operation ::= `tti.experimental_lock_release` $lock (`,` $pred^)? attr-dict `:` type($lock)
```

Leave a critical section by releasing a lock with single thread.

Interfaces: `MemoryEffectOpInterface (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{MemoryEffects::Write on ::mlir::triton::GlobalMemory}`

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `lock` | ptr or ranked tensor of ptr values |
| `pred` | 1-bit signless integer |


### `tti.experimental_memdesc_to_i64` (triton::instrument::ExperimentalMemDescToI64Op)

_Convert a memdesc into its base pointer as i64_

Syntax:

```
operation ::= `tti.experimental_memdesc_to_i64` $memdesc attr-dict `:` type($memdesc)
```

Extract the base pointer from the given memdesc and return it as a 64-bit
integer. This can be used to compare the memdesc against tensors of barrier
pointers maintained by the concurrency sanitizer.

Traits: `AlwaysSpeculatableImplTrait`

Interfaces: `ConditionallySpeculatable`, `NoMemoryEffect (MemoryEffectOpInterface)`

Effects: `MemoryEffects::Effect{}`

#### Operands:

| Operand | Description |
| :-----: | ----------- |
| `memdesc` | memory descriptor type (`::mlir::triton::gpu::MemDescType`) in Triton IR type system |

#### Results:

| Result | Description |
| :----: | ----------- |
| `result` | 64-bit signless integer |



.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   472.953373   693.126495     207.944485
    1     384.0   666.939914   830.398411     262.637342
    2     512.0   817.622393   925.877150     299.410368
    3     640.0   900.861250   921.426137     328.943805
    4     768.0   985.301916   984.135385     348.076305
    5     896.0  1051.585843  1038.256730     355.061222
    6    1024.0  1090.683105  1073.534720     353.261900
    7    1152.0  1100.018949  1064.885339     347.266373
    8    1280.0  1133.171363  1102.352456     348.044290
    9    1408.0  1168.381804  1141.897204     340.019845
    10   1536.0  1197.382971  1157.548935     334.205499
    11   1664.0  1215.777293  1189.926123     329.176174
    12   1792.0  1240.508185  1193.494765     326.263940
    13   1920.0  1253.934808  1218.998283     324.014379
    14   2048.0  1271.788840  1245.186587     324.815831
    15   2176.0  1229.506907   963.004960     325.617266
    16   2304.0  1258.873067   998.883804     325.828298
    17   2432.0  1268.712869  1037.975906     326.326118
    18   2560.0  1281.703417  1071.110207     327.439781
    19   2688.0  1290.496876  1097.698557     329.423602
    20   2816.0  1310.010489  1126.500132     329.577565
    21   2944.0  1314.809500  1143.635423     331.592237
    22   3072.0  1325.358259  1175.015094     333.141153
    23   3200.0  1337.148362  1174.632649     334.992981
    24   3328.0  1350.287432  1200.841632     336.163706
    25   3456.0  1349.794060  1215.569988     337.139743
    26   3584.0  1356.484223  1241.233359     337.996161
    27   3712.0  1364.013469  1261.498367     340.604480
    28   3840.0  1376.850532  1283.297105     340.212716
    29   3968.0  1374.424955  1296.601362     341.114279
    30   4096.0  1384.667931  1313.751769     338.880282
    31   4224.0  1336.608473  1279.160911     343.348075
    32   4352.0  1349.486123  1299.810981     345.738816
    33   4480.0  1348.947073  1320.314211     346.142485
    34   4608.0  1364.038844  1333.941780     346.871710
    35   4736.0  1356.059538  1346.665729     347.895554
    36   4864.0  1370.604073  1355.612862     348.420168
    37   4992.0  1369.504122  1373.011438     350.636994
    38   5120.0  1372.949838  1388.733934     351.033947
    39   5248.0  1374.410213  1359.316466     351.599771
    40   5376.0  1377.302254  1368.799718     351.922830
    41   5504.0  1377.312231  1378.801933     353.418560
    42   5632.0  1394.600796  1388.056691     353.511530
    43   5760.0  1394.171562  1396.270605     355.326150
    44   5888.0  1392.247020  1414.324900     355.078509
    45   6016.0  1399.546547  1413.564736     356.331768
    46   6144.0  1410.098365  1434.560332     356.644639
    47   6272.0  1410.543637  1397.099993     357.608708
    48   6400.0  1412.225274  1403.804851     358.088330
    49   6528.0  1413.106709  1424.120535     358.854212
    50   6656.0  1411.025344  1423.708475     359.337738
    51   6784.0  1417.621120  1428.566321     360.073444
    52   6912.0  1421.466406  1438.133321     360.711853
    53   7040.0  1422.702439  1451.034276     361.176040
    54   7168.0  1423.158350  1454.173523     362.137280
    55   7296.0  1423.202052  1083.723926     362.383193
    56   7424.0  1429.209390  1095.028204     362.758740
    57   7552.0  1429.271748  1111.906057     363.368083
    58   7680.0  1426.168957  1123.166815     363.468967
    59   7808.0  1427.690724  1131.202554     364.171663
    60   7936.0  1430.106886  1143.888752     364.792233
    61   8064.0  1432.891775  1148.700509     364.944818
    62   8192.0  1431.223944  1150.569564     364.371034
    63   8320.0  1384.367332  1116.644710     361.743599
    64   8448.0  1388.349994  1126.193541     362.787429
    65   8576.0  1386.709960  1125.483571     363.691268
    66   8704.0  1381.002344  1135.586585     364.480732
    67   8832.0  1397.623455  1132.573939     365.129486
    68   8960.0  1385.503974  1139.655737     365.767604
    69   9088.0  1398.844973  1135.552698     366.631076
    70   9216.0  1403.314781  1143.808671     367.600548
    71   9344.0  1393.454438  1418.874390     367.622343
    72   9472.0  1394.887084  1431.488343     368.899623
    73   9600.0  1401.419267  1429.911569     368.915950
    74   9728.0  1401.695243  1441.286684     369.972077
    75   9856.0  1399.585155  1441.064303     370.398014
    76   9984.0  1394.945199  1446.402243     370.685007
    77  10112.0  1404.850935  1455.047559     371.140811
    78  10240.0  1405.887785  1463.340116     371.469990
    79  10368.0  1420.249149  1462.974888     370.156890
    80  10496.0  1406.436147  1465.771912     370.844222
    81  10624.0  1406.388132  1464.706560     371.028375
    82  10752.0  1395.773166  1473.608456     371.492532
    83  10880.0  1390.956207  1477.831179     372.133678
    84  11008.0  1420.133721  1478.417619     372.837466
    85  11136.0  1421.025981  1485.680752     373.130135
    86  11264.0  1413.228600  1486.258942     373.330029
    87  11392.0  1422.460537  1488.640627     374.107390
    88  11520.0  1412.627441  1495.056542     373.980084
    89  11648.0  1422.776636  1500.666266     374.564756
    90  11776.0  1435.562528  1502.440388     375.232798
    91  11904.0  1430.148509  1509.298192     375.933451
    92  12032.0  1414.840618  1510.330170     375.991153
    93  12160.0  1412.664208  1515.584903     376.054406
    94  12288.0  1426.616205  1420.384469     376.762499
    95  12416.0  1432.528109  1396.969615     374.897795
    96  12544.0  1442.112470  1393.951415     375.573257
    97  12672.0  1438.148092  1395.611223     376.141184




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.878 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

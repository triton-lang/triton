
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   466.448387   707.010396     207.974144
    1     384.0   669.081253   832.141404     264.115513
    2     512.0   822.650738   920.190957     300.773758
    3     640.0   900.359125   912.722824     329.271483
    4     768.0   983.383245   977.618200     348.307003
    5     896.0  1053.500677  1030.428690     356.465776
    6    1024.0  1078.661931  1077.010647     354.376955
    7    1152.0  1093.941629  1076.161429     349.154367
    8    1280.0  1141.452209  1109.450623     348.299316
    9    1408.0  1158.708047  1140.795783     340.844627
    10   1536.0  1197.053079  1164.718031     333.926927
    11   1664.0  1214.476687  1191.573521     330.540446
    12   1792.0  1238.365201  1194.616878     325.913149
    13   1920.0  1254.760571  1218.189981     324.638771
    14   2048.0  1266.796770  1245.093221     324.013210
    15   2176.0  1231.943783   958.799141     326.255224
    16   2304.0  1259.512943   999.754963     326.146946
    17   2432.0  1277.051724  1032.185613     326.843442
    18   2560.0  1282.830852  1068.362704     328.050106
    19   2688.0  1292.443692  1099.884219     329.223194
    20   2816.0  1308.352214  1119.170931     329.338204
    21   2944.0  1316.104270  1143.552714     331.146206
    22   3072.0  1318.210052  1176.503182     333.426737
    23   3200.0  1337.477377  1167.314074     335.174968
    24   3328.0  1345.659243  1195.257450     336.033075
    25   3456.0  1351.854947  1215.230076     337.035803
    26   3584.0  1364.042583  1241.390784     338.531131
    27   3712.0  1369.637734  1265.388863     340.258318
    28   3840.0  1367.917931  1284.644018     340.143340
    29   3968.0  1368.437121  1295.163888     340.850030
    30   4096.0  1383.938286  1317.795221     338.890537
    31   4224.0  1328.757945  1279.452832     342.720029
    32   4352.0  1343.394391  1300.552494     344.877782
    33   4480.0  1346.878636  1317.666587     345.372354
    34   4608.0  1356.991451  1330.126033     346.940540
    35   4736.0  1354.812505  1347.718035     348.200170
    36   4864.0  1362.252825  1358.014776     348.433369
    37   4992.0  1374.293917  1370.159166     349.936945
    38   5120.0  1376.673743  1382.744966     351.213543
    39   5248.0  1380.756122  1352.099702     351.136234
    40   5376.0  1382.174959  1365.761988     351.156432
    41   5504.0  1382.286048  1380.835892     353.339263
    42   5632.0  1393.888435  1393.321801     353.141783
    43   5760.0  1392.986716  1407.621635     355.209694
    44   5888.0  1391.207420  1412.609691     354.985594
    45   6016.0  1399.405609  1416.464923     356.531603
    46   6144.0  1410.299676  1430.719611     356.963779
    47   6272.0  1407.218606  1396.640691     357.895205
    48   6400.0  1411.822732  1404.284474     358.364426
    49   6528.0  1416.987795  1413.650189     359.374817
    50   6656.0  1416.139833  1435.486772     358.938618
    51   6784.0  1418.033262  1428.031591     359.953111
    52   6912.0  1426.718343  1449.069643     360.799194
    53   7040.0  1421.369323  1448.306666     361.356552
    54   7168.0  1423.419918  1457.526977     361.650333
    55   7296.0  1424.340808  1083.387425     362.488769
    56   7424.0  1426.646026  1095.193144     362.859480
    57   7552.0  1425.617130  1107.652704     363.527510
    58   7680.0  1427.667739  1122.810903     364.025441
    59   7808.0  1428.850412  1128.384777     364.430437
    60   7936.0  1432.412182  1139.223931     364.318256
    61   8064.0  1436.043980  1147.016203     364.720750
    62   8192.0  1430.102468  1150.643835     364.215352
    63   8320.0  1381.164017  1112.545419     361.511399
    64   8448.0  1384.295225  1122.465440     362.539745
    65   8576.0  1387.586398  1124.889293     363.138719
    66   8704.0  1378.929656  1130.984057     363.884395
    67   8832.0  1391.759979  1131.281350     364.809353
    68   8960.0  1387.827864  1136.598729     365.363658
    69   9088.0  1398.410449  1136.666019     366.715537
    70   9216.0  1407.281132  1142.469346     367.413803
    71   9344.0  1394.677885  1421.488716     367.631294
    72   9472.0  1396.894813  1431.258671     368.246874
    73   9600.0  1404.728659  1430.399669     368.993339
    74   9728.0  1395.167290  1440.830114     369.490801
    75   9856.0  1398.770069  1439.410200     370.147371
    76   9984.0  1393.338557  1448.217873     370.121377
    77  10112.0  1404.503912  1455.108284     371.295467
    78  10240.0  1410.140643  1465.297634     371.373013
    79  10368.0  1417.516647  1463.160734     370.068099
    80  10496.0  1406.781540  1465.542585     370.515169
    81  10624.0  1406.828552  1466.188229     371.210905
    82  10752.0  1400.621995  1473.202194     371.265378
    83  10880.0  1398.184732  1478.575513     372.014389
    84  11008.0  1420.021617  1476.739669     372.629185
    85  11136.0  1418.107824  1485.050528     373.494551
    86  11264.0  1413.206963  1486.098190     373.290034
    87  11392.0  1420.114433  1489.160345     373.530448
    88  11520.0  1415.950864  1493.849874     374.421763
    89  11648.0  1423.771814  1497.332616     374.741969
    90  11776.0  1434.551380  1503.126794     375.464242
    91  11904.0  1429.601891  1507.158363     375.792168
    92  12032.0  1415.086147  1511.570583     376.336524
    93  12160.0  1409.901722  1517.598741     376.076574
    94  12288.0  1425.814551  1420.672155     376.710493
    95  12416.0  1440.565749  1395.658308     375.172146
    96  12544.0  1443.342085  1394.863721     375.946995
    97  12672.0  1434.960100  1395.632965     376.172101




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.075 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

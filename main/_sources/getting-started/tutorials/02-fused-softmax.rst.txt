
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   477.542350   699.056650     205.784528
    1     384.0   664.033085   803.334905     261.124413
    2     512.0   811.616730   927.308744     301.797818
    3     640.0   916.991116   928.231354     330.155828
    4     768.0   987.651337   972.838705     347.539384
    5     896.0  1044.436344  1023.023078     353.194197
    6    1024.0  1074.554242  1065.626024     352.117629
    7    1152.0  1089.687957  1064.164380     348.074385
    8    1280.0  1126.531092  1115.454713     349.037736
    9    1408.0  1158.695105  1133.142333     340.154068
    10   1536.0  1198.216958  1166.418075     332.599936
    11   1664.0  1216.743602  1188.361306     329.276269
    12   1792.0  1234.761279  1199.746058     324.778465
    13   1920.0  1251.469166  1223.884423     324.550001
    14   2048.0  1267.801373  1249.594036     324.784635
    15   2176.0  1232.065920   958.886196     326.012283
    16   2304.0  1260.695972   996.385485     325.935763
    17   2432.0  1265.867815  1035.662561     326.714740
    18   2560.0  1286.948275  1070.609529     327.316634
    19   2688.0  1297.901211  1092.435678     329.249251
    20   2816.0  1308.591456  1120.816009     328.848756
    21   2944.0  1318.736127  1145.377565     331.269260
    22   3072.0  1316.302374  1174.560106     332.998272
    23   3200.0  1340.416600  1173.502538     334.828256
    24   3328.0  1342.044841  1196.882367     335.823928
    25   3456.0  1356.681758  1221.388395     336.805515
    26   3584.0  1358.618051  1247.211186     338.145565
    27   3712.0  1365.970925  1266.512355     340.464273
    28   3840.0  1375.681538  1279.244418     340.418393
    29   3968.0  1368.190704  1292.846580     340.739467
    30   4096.0  1391.256626  1315.318578     338.294465
    31   4224.0  1327.890327  1274.308841     343.145618
    32   4352.0  1341.238169  1296.244663     344.662980
    33   4480.0  1348.073471  1316.353507     345.694223
    34   4608.0  1358.848524  1333.586002     346.841534
    35   4736.0  1356.748982  1343.170731     347.798219
    36   4864.0  1369.291593  1358.755112     348.747075
    37   4992.0  1366.541581  1372.494879     350.296465
    38   5120.0  1375.966399  1386.781702     350.469502
    39   5248.0  1375.962321  1351.795097     351.684267
    40   5376.0  1376.061158  1366.224096     351.578398
    41   5504.0  1386.477236  1372.200011     353.186917
    42   5632.0  1394.083379  1391.659545     353.092307
    43   5760.0  1393.184216  1402.863537     354.656407
    44   5888.0  1395.706498  1412.818760     354.660776
    45   6016.0  1400.246394  1423.834921     356.415392
    46   6144.0  1407.977160  1422.966803     356.335295
    47   6272.0  1405.619783  1389.259989     357.627177
    48   6400.0  1410.550307  1413.240749     358.530495
    49   6528.0  1418.234449  1412.434465     359.098203
    50   6656.0  1417.720993  1433.834641     359.158573
    51   6784.0  1416.908655  1431.550500     360.124377
    52   6912.0  1424.206401  1436.143558     360.381262
    53   7040.0  1421.016284  1452.859334     360.635758
    54   7168.0  1424.813257  1449.482391     361.408728
    55   7296.0  1424.662715  1082.815558     362.282615
    56   7424.0  1430.743470  1097.703244     362.885425
    57   7552.0  1424.210688  1106.565872     362.967857
    58   7680.0  1428.808467  1118.042606     363.409065
    59   7808.0  1426.953067  1128.209323     364.416810
    60   7936.0  1428.932930  1138.143385     364.395533
    61   8064.0  1433.515285  1146.132629     364.677898
    62   8192.0  1433.323063  1149.001354     363.967024
    63   8320.0  1379.227647  1116.557684     361.872015
    64   8448.0  1386.047805  1123.329578     362.376280
    65   8576.0  1388.091515  1125.786054     363.303418
    66   8704.0  1380.611948  1132.639405     364.066651
    67   8832.0  1393.604207  1129.689743     364.458742
    68   8960.0  1387.380561  1139.802727     365.665424
    69   9088.0  1400.227154  1136.936954     367.053772
    70   9216.0  1405.758911  1140.687632     367.298640
    71   9344.0  1388.136874  1416.498325     367.393642
    72   9472.0  1396.408067  1431.060421     368.602027
    73   9600.0  1405.949662  1431.192666     369.127696
    74   9728.0  1400.837746  1440.348494     369.043828
    75   9856.0  1403.363891  1441.643410     369.934721
    76   9984.0  1392.166469  1446.775777     370.286709
    77  10112.0  1407.211599  1451.514263     370.396746
    78  10240.0  1406.376866  1465.341978     370.727811
    79  10368.0  1416.924159  1463.020321     370.001533
    80  10496.0  1407.762054  1465.853886     370.208874
    81  10624.0  1404.125354  1463.763494     370.224717
    82  10752.0  1395.164307  1471.355813     371.590606
    83  10880.0  1397.076336  1477.526258     371.306140
    84  11008.0  1420.387093  1471.515972     372.231001
    85  11136.0  1420.464044  1482.674043     372.717695
    86  11264.0  1413.206958  1486.857073     372.691117
    87  11392.0  1422.513341  1491.648341     373.556591
    88  11520.0  1413.654536  1493.426956     373.416257
    89  11648.0  1424.270716  1498.417272     374.365588
    90  11776.0  1431.794562  1502.750574     375.032742
    91  11904.0  1429.504482  1508.088443     375.173825
    92  12032.0  1414.171073  1511.857771     375.796608
    93  12160.0  1413.714229  1515.584902     376.014523
    94  12288.0  1428.184938  1419.687210     375.936827
    95  12416.0  1437.863405  1396.076147     374.548792
    96  12544.0  1441.619549  1393.235447     375.213415
    97  12672.0  1435.072950  1393.310423     375.167667




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 38.941 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   477.499453   685.862230     205.805823
    1     384.0   667.421004   828.757332     261.941722
    2     512.0   805.127204   925.964652     304.150887
    3     640.0   919.097737   925.587137     332.812872
    4     768.0   990.995640   989.255216     350.358280
    5     896.0  1043.225684  1039.334654     354.779806
    6    1024.0  1073.090511  1071.343510     354.331117
    7    1152.0  1101.901772  1066.772015     347.640741
    8    1280.0  1127.223881  1111.140050     348.302483
    9    1408.0  1157.185530  1139.451734     340.262918
    10   1536.0  1190.706532  1166.525164     333.097487
    11   1664.0  1206.716930  1181.975565     328.897220
    12   1792.0  1234.938781  1193.487522     325.168865
    13   1920.0  1255.378077  1226.751274     324.837565
    14   2048.0  1270.055945  1242.594207     325.259467
    15   2176.0  1243.428556   964.468447     326.196529
    16   2304.0  1249.183963   999.617513     326.254048
    17   2432.0  1278.575295  1032.428609     326.606895
    18   2560.0  1281.568744  1072.398430     327.878714
    19   2688.0  1291.531518  1100.163327     329.446963
    20   2816.0  1313.687010  1121.238149     329.911072
    21   2944.0  1314.167223  1144.171328     331.893062
    22   3072.0  1324.679652  1174.616321     333.416017
    23   3200.0  1334.701575  1170.220785     335.201469
    24   3328.0  1342.830198  1202.586037     336.311920
    25   3456.0  1351.477807  1220.238654     337.108758
    26   3584.0  1358.228611  1240.200477     338.384716
    27   3712.0  1367.172700  1265.346400     339.991265
    28   3840.0  1376.988454  1283.375863     340.700690
    29   3968.0  1374.083230  1302.179572     341.241603
    30   4096.0  1389.585365  1312.783947     338.825061
    31   4224.0  1330.922516  1275.641137     343.065991
    32   4352.0  1345.915944  1297.730318     345.504911
    33   4480.0  1345.677376  1315.744383     345.699097
    34   4608.0  1362.047967  1332.500615     346.696170
    35   4736.0  1359.037613  1344.222441     348.317757
    36   4864.0  1367.468077  1361.623161     349.321513
    37   4992.0  1374.530419  1368.490029     350.233152
    38   5120.0  1377.244090  1381.971712     350.685892
    39   5248.0  1372.784840  1355.424830     351.344772
    40   5376.0  1376.615468  1366.723951     351.626307
    41   5504.0  1377.916616  1380.527960     353.675387
    42   5632.0  1394.229118  1392.623562     352.902055
    43   5760.0  1391.817130  1406.960670     354.545600
    44   5888.0  1388.921391  1415.222045     354.438384
    45   6016.0  1400.903663  1427.687964     356.727010
    46   6144.0  1407.566534  1427.258389     356.769451
    47   6272.0  1412.461116  1399.201705     357.650269
    48   6400.0  1413.336221  1410.932406     358.724434
    49   6528.0  1413.113195  1413.416913     359.342526
    50   6656.0  1416.543280  1431.313393     359.553725
    51   6784.0  1417.805417  1432.581059     359.728751
    52   6912.0  1420.405132  1443.236776     360.413376
    53   7040.0  1418.464085  1453.389419     360.520672
    54   7168.0  1418.615869  1457.233195     361.832890
    55   7296.0  1421.146597  1080.981241     362.218642
    56   7424.0  1433.028213  1097.067814     362.987778
    57   7552.0  1427.497229  1108.070955     363.942673
    58   7680.0  1429.467689  1118.405326     363.445502
    59   7808.0  1429.567108  1128.163313     364.698678
    60   7936.0  1437.874927  1141.007664     364.534928
    61   8064.0  1436.837640  1145.288094     364.623656
    62   8192.0  1433.604013  1148.323776     363.732553
    63   8320.0  1380.106138  1116.570375     361.747986
    64   8448.0  1385.830832  1124.370529     362.666140
    65   8576.0  1387.347258  1126.377973     363.192119
    66   8704.0  1379.621770  1131.981471     364.155620
    67   8832.0  1394.822898  1129.767716     365.263039
    68   8960.0  1383.475611  1136.943679     365.869843
    69   9088.0  1400.003523  1137.068252     366.511118
    70   9216.0  1401.875222  1141.781336     367.639804
    71   9344.0  1390.532772  1416.172897     367.555229
    72   9472.0  1397.665102  1431.219020     368.726202
    73   9600.0  1404.633585  1432.659704     369.172504
    74   9728.0  1396.948491  1438.677998     369.723519
    75   9856.0  1399.340464  1438.310299     369.932211
    76   9984.0  1395.217803  1451.861470     370.387667
    77  10112.0  1405.137822  1454.806225     371.237784
    78  10240.0  1412.093438  1466.943836     371.647903
    79  10368.0  1415.122259  1462.620764     369.983788
    80  10496.0  1409.253144  1467.699265     370.484073
    81  10624.0  1407.966727  1463.276888     371.099584
    82  10752.0  1398.058641  1470.895557     371.479164
    83  10880.0  1389.661322  1477.307029     371.846629
    84  11008.0  1421.802068  1476.475633     372.540628
    85  11136.0  1419.729084  1485.423929     373.405603
    86  11264.0  1413.008951  1486.333682     373.574031
    87  11392.0  1422.156436  1488.407757     374.436080
    88  11520.0  1416.732145  1498.986097     374.116895
    89  11648.0  1418.264187  1499.636802     375.141319
    90  11776.0  1435.177162  1503.285551     375.330683
    91  11904.0  1430.960338  1511.029669     375.770102
    92  12032.0  1415.788488  1511.048165     376.602625
    93  12160.0  1413.291892  1517.583954     376.280578
    94  12288.0  1423.400453  1422.028315     376.379880
    95  12416.0  1439.299188  1395.979620     375.039347
    96  12544.0  1444.224891  1397.143027     376.039446
    97  12672.0  1432.783852  1394.964614     375.969019




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.016 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

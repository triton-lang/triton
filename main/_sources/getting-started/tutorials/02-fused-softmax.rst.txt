
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   477.227393   686.045739     206.514502
    1     384.0   667.924690   814.023100     261.607673
    2     512.0   813.487711   912.495885     300.751541
    3     640.0   908.058902   916.991480     329.117149
    4     768.0   983.588346   985.370615     347.837918
    5     896.0  1051.417923  1033.506363     355.785704
    6    1024.0  1075.442662  1072.040711     354.289973
    7    1152.0  1101.497464  1063.972988     349.298390
    8    1280.0  1128.131113  1113.248169     348.516854
    9    1408.0  1160.118010  1138.270565     341.333340
    10   1536.0  1197.714305  1164.867484     331.857271
    11   1664.0  1216.046051  1191.642985     329.871372
    12   1792.0  1236.748619  1193.504283     325.975378
    13   1920.0  1259.608613  1217.990050     324.118752
    14   2048.0  1276.320450  1248.786586     324.151346
    15   2176.0  1228.891023   962.586098     325.769888
    16   2304.0  1258.619295  1003.703103     326.532082
    17   2432.0  1272.871195  1033.394480     327.413084
    18   2560.0  1287.550106  1067.472745     328.608173
    19   2688.0  1294.176819  1096.999382     329.085537
    20   2816.0  1309.803590  1119.902981     329.847805
    21   2944.0  1320.304739  1141.948441     331.457104
    22   3072.0  1324.971058  1168.765442     333.601830
    23   3200.0  1337.879627  1165.881354     334.956387
    24   3328.0  1345.629696  1197.894182     335.917576
    25   3456.0  1354.468411  1221.131040     336.678452
    26   3584.0  1356.506369  1247.584500     337.943466
    27   3712.0  1370.638404  1265.758062     340.835856
    28   3840.0  1370.651539  1278.185940     340.268692
    29   3968.0  1376.423631  1300.706710     341.419536
    30   4096.0  1389.481855  1316.849617     339.090591
    31   4224.0  1327.267776  1275.556956     343.184767
    32   4352.0  1343.559708  1299.310237     345.120132
    33   4480.0  1345.036259  1320.322712     345.618261
    34   4608.0  1361.610779  1334.198016     347.043837
    35   4736.0  1356.495762  1342.316633     347.973351
    36   4864.0  1370.802122  1354.716101     348.473797
    37   4992.0  1368.954092  1369.103865     350.421455
    38   5120.0  1380.110674  1386.288093     350.476820
    39   5248.0  1378.185851  1350.946732     351.810135
    40   5376.0  1377.896351  1370.169782     351.722701
    41   5504.0  1381.379908  1380.613674     353.909127
    42   5632.0  1396.820378  1387.111691     352.841775
    43   5760.0  1396.396106  1407.402116     354.526916
    44   5888.0  1392.108289  1416.162076     354.850953
    45   6016.0  1404.149948  1424.310035     356.433981
    46   6144.0  1406.408344  1433.451143     356.630776
    47   6272.0  1408.322410  1391.868478     357.761142
    48   6400.0  1409.049998  1407.048844     358.835351
    49   6528.0  1411.307116  1424.051146     358.900016
    50   6656.0  1417.798480  1423.919010     359.604312
    51   6784.0  1418.845616  1437.910715     360.095952
    52   6912.0  1423.503681  1443.266761     361.006223
    53   7040.0  1416.825849  1446.116503     360.782438
    54   7168.0  1418.148095  1460.177302     361.477073
    55   7296.0  1422.209114  1081.281161     362.184931
    56   7424.0  1430.201907  1094.124949     362.731014
    57   7552.0  1424.077488  1108.779922     363.195150
    58   7680.0  1429.776652  1117.648975     363.694970
    59   7808.0  1428.265859  1127.910760     364.487235
    60   7936.0  1430.497293  1138.971673     364.450102
    61   8064.0  1435.394252  1146.860397     365.148664
    62   8192.0  1433.379242  1148.524322     364.285897
    63   8320.0  1384.614365  1116.741058     361.587279
    64   8448.0  1386.285999  1126.605731     362.617047
    65   8576.0  1385.036107  1124.946213     363.254440
    66   8704.0  1382.520796  1132.866721     364.022180
    67   8832.0  1394.517468  1129.184080     364.827124
    68   8960.0  1385.403928  1138.387722     365.354789
    69   9088.0  1398.741937  1136.406918     366.635520
    70   9216.0  1404.652760  1141.525907     367.413800
    71   9344.0  1388.046968  1421.540488     367.653672
    72   9472.0  1399.645012  1430.485569     368.397983
    73   9600.0  1404.128058  1431.429189     369.212839
    74   9728.0  1397.678705  1439.150776     369.599366
    75   9856.0  1405.329233  1438.857875     369.753277
    76   9984.0  1396.273225  1447.940190     370.429818
    77  10112.0  1400.993769  1454.667657     371.333591
    78  10240.0  1409.525419  1466.474422     371.299832
    79  10368.0  1414.305710  1459.770719     370.130249
    80  10496.0  1410.784156  1466.560835     370.501841
    81  10624.0  1404.125348  1468.493109     370.823800
    82  10752.0  1394.973367  1472.243903     371.682899
    83  10880.0  1393.161690  1478.805877     372.076234
    84  11008.0  1421.455712  1473.475126     372.700063
    85  11136.0  1418.840442  1483.210856     373.263376
    86  11264.0  1415.761854  1490.856961     373.556838
    87  11392.0  1423.020501  1491.910436     374.186840
    88  11520.0  1407.968319  1493.520112     373.922743
    89  11648.0  1421.528145  1502.147794     374.985915
    90  11776.0  1435.210340  1503.335943     375.467072
    91  11904.0  1433.750666  1507.854386     375.981349
    92  12032.0  1413.624573  1510.047321     376.336524
    93  12160.0  1414.199774  1516.621899     375.691334
    94  12288.0  1426.887495  1421.938897     376.283249
    95  12416.0  1437.582985  1397.097239     374.570863
    96  12544.0  1446.515315  1394.475719     376.396462
    97  12672.0  1437.414695  1394.268570     375.013948




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.932 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   470.110884   687.533006     206.010121
    1     384.0   667.175742   813.342868     261.360754
    2     512.0   802.713310   928.307251     299.264832
    3     640.0   903.366542   906.496882     328.848028
    4     768.0   986.759727   982.766536     348.504589
    5     896.0  1037.347739  1040.241436     353.757442
    6    1024.0  1085.563258  1080.349157     352.171950
    7    1152.0  1099.495964  1062.351832     347.532878
    8    1280.0  1124.055583  1113.111433     348.485311
    9    1408.0  1160.324776  1137.854575     340.337173
    10   1536.0  1186.544949  1158.270031     332.905061
    11   1664.0  1205.851590  1190.332260     328.961161
    12   1792.0  1227.650559  1191.751611     325.258372
    13   1920.0  1252.896221  1226.759572     324.311035
    14   2048.0  1272.195402  1243.402986     324.176402
    15   2176.0  1233.397387   963.288502     324.994400
    16   2304.0  1258.271757  1002.979614     325.474886
    17   2432.0  1277.250654  1034.051212     326.406291
    18   2560.0  1279.816122  1071.184625     327.898597
    19   2688.0  1297.991884  1097.388007     329.159435
    20   2816.0  1308.390755  1121.357950     329.539844
    21   2944.0  1318.831280  1142.383192     331.383384
    22   3072.0  1318.252856  1169.628924     333.081600
    23   3200.0  1341.840288  1172.966775     334.966819
    24   3328.0  1346.245824  1200.125985     335.901843
    25   3456.0  1350.699923  1224.767823     336.647288
    26   3584.0  1361.905188  1247.186258     338.110089
    27   3712.0  1365.373776  1263.556930     340.422042
    28   3840.0  1367.364246  1281.256516     340.265531
    29   3968.0  1378.966998  1297.960563     340.959737
    30   4096.0  1389.622913  1314.630217     338.485877
    31   4224.0  1332.203366  1276.540547     343.017354
    32   4352.0  1337.717468  1301.111168     345.277807
    33   4480.0  1344.560237  1316.324188     345.813410
    34   4608.0  1361.202109  1334.250746     347.126472
    35   4736.0  1356.657322  1343.662925     348.063635
    36   4864.0  1366.511807  1361.829184     349.083175
    37   4992.0  1369.815747  1376.117565     350.098501
    38   5120.0  1375.537217  1389.332052     350.624701
    39   5248.0  1378.666091  1353.988914     351.448373
    40   5376.0  1379.209128  1374.366703     352.054712
    41   5504.0  1378.539755  1379.303754     353.111885
    42   5632.0  1391.287842  1400.070713     353.417600
    43   5760.0  1387.855358  1410.601787     354.939809
    44   5888.0  1393.480651  1419.252343     354.864876
    45   6016.0  1399.943656  1417.286850     356.317833
    46   6144.0  1408.254675  1432.700978     357.130513
    47   6272.0  1406.834162  1396.836400     357.927581
    48   6400.0  1411.162051  1404.130162     358.378260
    49   6528.0  1414.706997  1424.688179     359.194971
    50   6656.0  1414.093121  1426.732316     359.463959
    51   6784.0  1416.642922  1433.750294     359.958163
    52   6912.0  1424.558939  1454.138268     360.468441
    53   7040.0  1419.557259  1447.578655     360.984318
    54   7168.0  1420.871359  1470.240443     362.072740
    55   7296.0  1424.138868  1088.647151     362.387766
    56   7424.0  1432.620489  1100.153842     363.129925
    57   7552.0  1425.256050  1112.191833     363.381745
    58   7680.0  1431.878397  1125.187133     363.934842
    59   7808.0  1427.806244  1135.037013     364.289656
    60   7936.0  1430.315453  1146.087179     364.458257
    61   8064.0  1434.368421  1147.720393     364.786429
    62   8192.0  1434.440490  1153.592714     363.775905
    63   8320.0  1386.984514  1116.666118     361.873224
    64   8448.0  1386.911623  1126.755397     362.527824
    65   8576.0  1386.839576  1128.424829     363.526220
    66   8704.0  1381.935241  1135.090321     364.565446
    67   8832.0  1391.717083  1134.586112     365.187348
    68   8960.0  1383.305110  1141.003824     366.061136
    69   9088.0  1396.096526  1138.317483     366.631076
    70   9216.0  1402.074866  1144.377706     367.431579
    71   9344.0  1391.040553  1418.173910     367.711866
    72   9472.0  1399.724605  1427.956614     368.704133
    73   9600.0  1402.534798  1433.417636     368.973552
    74   9728.0  1397.809034  1442.153564     369.965777
    75   9856.0  1399.791898  1441.824323     370.493448
    76   9984.0  1395.531025  1445.647067     370.756701
    77  10112.0  1404.883865  1454.487480     371.304343
    78  10240.0  1411.502409  1463.639222     371.770387
    79  10368.0  1415.771045  1464.077885     370.121369
    80  10496.0  1408.084612  1466.970690     370.875379
    81  10624.0  1406.918407  1464.101809     370.260163
    82  10752.0  1396.853666  1472.058506     371.234221
    83  10880.0  1394.443878  1480.671561     371.084795
    84  11008.0  1422.233901  1477.997211     372.935037
    85  11136.0  1415.585069  1485.250999     372.872808
    86  11264.0  1414.097722  1487.249055     373.570188
    87  11392.0  1421.405665  1488.257015     373.816362
    88  11520.0  1415.848656  1491.346899     373.651323
    89  11648.0  1427.629567  1500.597843     374.511623
    90  11776.0  1435.707093  1499.672761     374.810705
    91  11904.0  1431.540862  1509.273277     375.413002
    92  12032.0  1413.695034  1510.772968     376.146049
    93  12160.0  1416.581280  1515.373910     375.527734
    94  12288.0  1427.446166  1423.074519     375.830364
    95  12416.0  1434.912278  1397.309115     374.403201
    96  12544.0  1438.548266  1396.331834     375.560081
    97  12672.0  1437.026702  1396.328822     375.396276




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.089 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   469.564667   704.432840     205.821404
    1     384.0   655.860555   833.084744     261.813140
    2     512.0   802.014000   929.093627     301.000921
    3     640.0   913.517039   917.765491     330.799561
    4     768.0   988.966914   982.835596     351.085705
    5     896.0  1048.004644  1040.003080     354.925706
    6    1024.0  1084.478677  1074.201443     352.861469
    7    1152.0  1098.111648  1075.913934     347.181865
    8    1280.0  1128.015186  1113.577130     349.289364
    9    1408.0  1160.944126  1131.592805     339.864145
    10   1536.0  1186.654495  1166.104982     332.032310
    11   1664.0  1218.830977  1190.139745     330.085481
    12   1792.0  1230.031125  1194.164058     325.012873
    13   1920.0  1263.155657  1218.265026     324.982033
    14   2048.0  1269.475909  1244.694489     324.999075
    15   2176.0  1233.311198   959.533637     325.518115
    16   2304.0  1250.865825  1003.179024     326.015494
    17   2432.0  1275.021907  1038.477113     326.283088
    18   2560.0  1282.563266  1071.648857     327.702697
    19   2688.0  1296.785965  1100.646108     329.707276
    20   2816.0  1307.085296  1121.357950     328.820608
    21   2944.0  1322.994886  1147.057875     331.195730
    22   3072.0  1323.745288  1167.387671     333.660089
    23   3200.0  1341.038688  1169.823043     335.212542
    24   3328.0  1349.615266  1201.795490     336.070837
    25   3456.0  1346.009807  1220.702957     337.409722
    26   3584.0  1363.166861  1247.618177     338.338947
    27   3712.0  1364.529008  1259.273977     340.009936
    28   3840.0  1371.985365  1283.756676     339.950051
    29   3968.0  1373.564231  1299.949203     341.353840
    30   4096.0  1385.393411  1316.511338     338.491886
    31   4224.0  1323.451716  1278.532847     343.474474
    32   4352.0  1344.663308  1296.987195     345.140023
    33   4480.0  1348.155119  1316.391843     345.951909
    34   4608.0  1358.450235  1333.308171     347.042782
    35   4736.0  1360.966879  1340.878700     348.191655
    36   4864.0  1368.102752  1360.868895     349.342145
    37   4992.0  1367.079271  1370.482104     349.688797
    38   5120.0  1376.806721  1386.412718     350.387825
    39   5248.0  1379.092171  1349.744172     351.448373
    40   5376.0  1383.295251  1370.928047     351.310639
    41   5504.0  1382.629846  1383.027822     353.224442
    42   5632.0  1393.125497  1397.396579     353.057646
    43   5760.0  1390.914496  1394.993158     354.732543
    44   5888.0  1392.647659  1402.600515     354.985593
    45   6016.0  1402.896303  1421.384707     356.796851
    46   6144.0  1407.012410  1430.565803     357.079548
    47   6272.0  1409.387273  1401.422315     357.582303
    48   6400.0  1409.889438  1403.089166     358.450449
    49   6528.0  1418.256199  1428.273804     358.983071
    50   6656.0  1414.156654  1423.421252     359.019930
    51   6784.0  1418.996664  1440.091452     360.128119
    52   6912.0  1420.152397  1447.574928     360.574031
    53   7040.0  1419.652994  1451.799392     361.347351
    54   7168.0  1422.757969  1463.243304     361.340408
    55   7296.0  1427.126306  1089.268752     362.298244
    56   7424.0  1432.237133  1098.208076     363.099096
    57   7552.0  1430.051129  1112.156140     363.728130
    58   7680.0  1430.160685  1121.633421     363.869608
    59   7808.0  1429.891276  1130.394442     364.398638
    60   7936.0  1437.608441  1140.351984     364.322801
    61   8064.0  1434.848195  1145.689927     364.668856
    62   8192.0  1432.143067  1154.073462     363.762503
    63   8320.0  1382.005699  1116.181928     362.213372
    64   8448.0  1384.495727  1124.581937     362.592791
    65   8576.0  1389.985781  1129.959639     363.441523
    66   8704.0  1384.456688  1133.148901     364.583285
    67   8832.0  1396.074901  1134.810153     365.245227
    68   8960.0  1384.664689  1141.321423     366.234808
    69   9088.0  1390.692243  1134.479006     367.002966
    70   9216.0  1401.504558  1140.549018     367.191733
    71   9344.0  1390.809525  1419.951474     367.318289
    72   9472.0  1400.994283  1434.657476     369.157632
    73   9600.0  1402.435997  1431.592485     369.203875
    74   9728.0  1398.145649  1441.541817     369.364591
    75   9856.0  1402.864514  1442.635852     369.918792
    76   9984.0  1397.276003  1449.784985     370.901885
    77  10112.0  1405.654581  1455.340178     371.348731
    78  10240.0  1411.665663  1468.095283     371.758862
    79  10368.0  1418.273689  1460.659860     369.872908
    80  10496.0  1411.664451  1465.155453     370.204438
    81  10624.0  1406.747900  1466.612780     370.886037
    82  10752.0  1400.628114  1474.338283     371.381146
    83  10880.0  1396.865813  1481.099872     371.612903
    84  11008.0  1422.014950  1476.390269     372.775401
    85  11136.0  1421.877820  1485.052572     373.512347
    86  11264.0  1416.177662  1485.032302     372.695546
    87  11392.0  1424.416694  1492.667727     374.319327
    88  11520.0  1411.341634  1494.955912     374.479260
    89  11648.0  1423.885203  1500.497163     375.367994
    90  11776.0  1434.447987  1501.698196     375.023856
    91  11904.0  1429.503326  1510.264947     375.245707
    92  12032.0  1415.783883  1510.517655     376.354252
    93  12160.0  1416.699029  1513.240910     375.426110
    94  12288.0  1429.517035  1420.116957     375.763852
    95  12416.0  1437.871035  1393.034462     374.650332
    96  12544.0  1441.297621  1390.558897     375.121370
    97  12672.0  1437.793734  1394.153531     375.744121




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.989 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

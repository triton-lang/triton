
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   472.768950   694.350436     208.168588
    1     384.0   659.556848   817.056900     262.325255
    2     512.0   803.390059   912.249443     300.152898
    3     640.0   921.100794   916.828104     329.242883
    4     768.0   982.833816   983.998330     348.547475
    5     896.0  1048.251580  1029.637170     355.408052
    6    1024.0  1073.404317  1069.275643     355.714705
    7    1152.0  1090.578635  1078.267006     347.665368
    8    1280.0  1137.422752  1111.147808     349.043307
    9    1408.0  1165.775359  1138.661708     340.121644
    10   1536.0  1184.632110  1168.837947     333.417173
    11   1664.0  1209.295228  1190.744150     329.432750
    12   1792.0  1240.443331  1192.968589     325.578634
    13   1920.0  1253.653129  1222.686591     324.772737
    14   2048.0  1274.528997  1239.676046     324.522822
    15   2176.0  1239.949892   963.064327     325.663837
    16   2304.0  1250.949317  1000.269335     326.318852
    17   2432.0  1277.285281  1039.691912     326.848544
    18   2560.0  1292.067254  1071.506777     327.366865
    19   2688.0  1297.384571  1099.734033     328.513412
    20   2816.0  1311.208405  1125.514571     329.625059
    21   2944.0  1315.167075  1144.549768     331.925848
    22   3072.0  1325.568024  1169.990768     333.967060
    23   3200.0  1341.981352  1175.794821     334.894305
    24   3328.0  1343.871781  1203.227127     336.538733
    25   3456.0  1349.794060  1223.692804     336.361677
    26   3584.0  1357.695858  1244.757552     338.116305
    27   3712.0  1367.222368  1269.383351     341.074346
    28   3840.0  1368.013340  1285.942223     340.661776
    29   3968.0  1370.347809  1297.105337     340.842669
    30   4096.0  1392.428724  1319.220166     338.531827
    31   4224.0  1330.155684  1274.570183     343.182777
    32   4352.0  1344.289549  1299.097998     345.367455
    33   4480.0  1346.085785  1320.895481     345.649165
    34   4608.0  1361.446484  1332.488402     346.984279
    35   4736.0  1355.278259  1347.952416     348.053888
    36   4864.0  1366.388891  1357.074589     348.793447
    37   4992.0  1367.771593  1377.070258     350.430348
    38   5120.0  1379.151413  1388.733932     351.127249
    39   5248.0  1373.561771  1356.547108     351.520326
    40   5376.0  1377.727753  1370.317926     351.057053
    41   5504.0  1379.970259  1371.984388     353.708065
    42   5632.0  1395.947907  1400.062167     353.371091
    43   5760.0  1394.091375  1406.960307     355.238275
    44   5888.0  1392.735630  1418.480322     354.948441
    45   6016.0  1403.161601  1414.784145     356.787535
    46   6144.0  1405.836399  1435.003023     356.908234
    47   6272.0  1409.889378  1402.193919     358.071028
    48   6400.0  1413.732157  1400.550356     358.538767
    49   6528.0  1418.432420  1425.100604     359.347137
    50   6656.0  1412.942331  1424.754819     359.052272
    51   6784.0  1417.217276  1434.966718     360.123522
    52   6912.0  1425.536609  1451.179901     360.969399
    53   7040.0  1420.803047  1452.538069     361.312872
    54   7168.0  1422.791340  1463.519548     361.782668
    55   7296.0  1423.401682  1087.435642     362.694420
    56   7424.0  1427.877023  1099.965452     362.894513
    57   7552.0  1424.458842  1112.194622     363.322559
    58   7680.0  1431.272727  1124.779237     363.880506
    59   7808.0  1429.405442  1134.010429     364.685029
    60   7936.0  1433.608211  1145.178471     364.900682
    61   8064.0  1432.382284  1148.883181     364.885970
    62   8192.0  1430.618200  1153.771199     364.281416
    63   8320.0  1381.744200  1116.338033     361.947360
    64   8448.0  1387.459172  1125.033573     362.706317
    65   8576.0  1389.582424  1127.418217     363.593111
    66   8704.0  1383.715298  1135.579636     364.422794
    67   8832.0  1399.128719  1131.115530     365.093887
    68   8960.0  1388.705585  1140.535165     365.976586
    69   9088.0  1397.179592  1138.717259     367.035956
    70   9216.0  1406.010162  1146.416322     367.716206
    71   9344.0  1391.035812  1420.252351     367.720822
    72   9472.0  1400.846694  1431.359339     368.739661
    73   9600.0  1406.038685  1432.918721     369.195270
    74   9728.0  1397.669152  1435.304058     369.874389
    75   9856.0  1400.167737  1440.683675     370.568505
    76   9984.0  1395.217805  1451.533028     370.706669
    77  10112.0  1402.676626  1449.703440     371.400887
    78  10240.0  1408.943481  1465.581182     371.652341
    79  10368.0  1420.080656  1460.023629     370.041471
    80  10496.0  1409.121210  1464.819008     371.057977
    81  10624.0  1408.974772  1467.859473     371.166368
    82  10752.0  1397.292025  1468.732625     371.621823
    83  10880.0  1396.967627  1481.378776     372.226512
    84  11008.0  1426.211683  1477.325079     372.505215
    85  11136.0  1421.089834  1484.474469     372.970373
    86  11264.0  1412.822988  1484.746637     373.094620
    87  11392.0  1423.114491  1490.814403     373.882468
    88  11520.0  1419.301855  1496.466252     373.953617
    89  11648.0  1421.442927  1502.280537     375.305742
    90  11776.0  1429.118544  1501.096552     375.397451
    91  11904.0  1433.849008  1506.603109     376.061845
    92  12032.0  1413.048902  1508.413011     375.893855
    93  12160.0  1412.959153  1513.739148     376.227338
    94  12288.0  1429.876358  1417.599540     376.247689
    95  12416.0  1438.263476  1391.940454     374.694497
    96  12544.0  1442.646221  1393.453781     375.423970
    97  12672.0  1435.435705  1391.554199     375.216001




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.021 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

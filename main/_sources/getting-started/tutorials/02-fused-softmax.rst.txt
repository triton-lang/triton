
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   479.678687   691.675721     207.309337
    1     384.0   667.972267   834.226148     262.456250
    2     512.0   804.880473   929.621236     300.950304
    3     640.0   917.278199   913.908449     331.322486
    4     768.0   979.950840   987.590155     350.555707
    5     896.0  1048.637291  1040.642378     355.846666
    6    1024.0  1085.962763  1074.011702     352.899165
    7    1152.0  1098.059113  1073.248169     347.123636
    8    1280.0  1137.127084  1104.043121     348.913331
    9    1408.0  1169.003967  1137.701339     340.587784
    10   1536.0  1188.775626  1165.047870     334.047067
    11   1664.0  1212.740333  1190.933199     330.382389
    12   1792.0  1238.112046  1200.946903     326.035326
    13   1920.0  1255.781988  1219.524765     325.253386
    14   2048.0  1270.550643  1252.427993     324.391733
    15   2176.0  1240.789513   959.496027     325.040980
    16   2304.0  1258.478388   998.750643     325.839609
    17   2432.0  1269.447111  1034.587867     326.463581
    18   2560.0  1286.875143  1067.438872     328.033264
    19   2688.0  1297.000950  1097.175439     329.062288
    20   2816.0  1307.414646  1126.170332     329.294639
    21   2944.0  1317.877595  1143.019535     331.799071
    22   3072.0  1323.098369  1170.946380     333.711048
    23   3200.0  1343.668997  1175.246710     334.737522
    24   3328.0  1347.504508  1200.461337     336.402019
    25   3456.0  1356.708622  1225.799536     336.776625
    26   3584.0  1367.305097  1243.582428     338.115282
    27   3712.0  1363.830685  1260.686700     340.552537
    28   3840.0  1369.935164  1283.680568     340.280811
    29   3968.0  1374.711870  1297.510449     340.845003
    30   4096.0  1389.339838  1314.114550     338.200734
    31   4224.0  1330.573016  1278.505944     342.899753
    32   4352.0  1344.218045  1301.212689     345.228532
    33   4480.0  1348.118733  1318.630780     345.794582
    34   4608.0  1359.591690  1336.534980     347.052507
    35   4736.0  1356.135532  1344.371183     347.896159
    36   4864.0  1374.340781  1357.724226     349.245965
    37   4992.0  1370.386516  1375.763301     350.238984
    38   5120.0  1373.703924  1387.697033     350.733364
    39   5248.0  1374.755696  1350.923702     351.589871
    40   5376.0  1374.652237  1368.339705     351.837254
    41   5504.0  1381.800467  1374.076397     353.351155
    42   5632.0  1387.973648  1392.716878     353.004115
    43   5760.0  1392.910157  1407.528560     355.410046
    44   5888.0  1390.824035  1415.110666     355.157523
    45   6016.0  1400.305954  1414.908306     356.852740
    46   6144.0  1409.205387  1434.537267     357.056388
    47   6272.0  1406.916025  1392.715892     357.687218
    48   6400.0  1414.978507  1419.008214     358.567419
    49   6528.0  1412.244561  1419.793530     358.510992
    50   6656.0  1410.756075  1423.556479     359.084616
    51   6784.0  1416.456827  1437.965537     360.109736
    52   6912.0  1422.420054  1446.326526     360.546483
    53   7040.0  1424.270650  1457.114637     360.684290
    54   7168.0  1420.938762  1457.024659     361.690583
    55   7296.0  1425.622515  1085.842022     362.483826
    56   7424.0  1428.390661  1094.933486     363.276588
    57   7552.0  1428.297197  1111.225136     363.454612
    58   7680.0  1429.069616  1120.256782     363.842216
    59   7808.0  1429.705918  1129.986907     364.471330
    60   7936.0  1435.468479  1141.386568     364.077543
    61   8064.0  1433.684440  1150.207837     365.126004
    62   8192.0  1430.235695  1150.357420     364.048257
    63   8320.0  1381.794091  1118.358304     361.841927
    64   8448.0  1383.779574  1121.954172     362.625973
    65   8576.0  1389.646828  1127.866852     363.521762
    66   8704.0  1379.774543  1133.332578     364.538689
    67   8832.0  1392.756221  1133.022079     365.361043
    68   8960.0  1389.815387  1137.143783     366.029981
    69   9088.0  1395.315738  1136.000003     366.960251
    70   9216.0  1407.446167  1141.818643     367.364923
    71   9344.0  1390.335400  1420.882683     367.586546
    72   9472.0  1397.777786  1431.918798     368.815937
    73   9600.0  1402.535615  1429.225207     368.805404
    74   9728.0  1401.445142  1439.930360     369.767881
    75   9856.0  1401.438389  1440.902395     369.860654
    76   9984.0  1391.597210  1452.825437     370.774629
    77  10112.0  1403.261278  1457.636694     371.259967
    78  10240.0  1413.109901  1466.336400     371.412890
    79  10368.0  1416.709421  1460.301930     370.170214
    80  10496.0  1407.203363  1463.645198     370.786372
    81  10624.0  1408.617257  1465.834210     370.757139
    82  10752.0  1398.391215  1471.611736     371.211382
    83  10880.0  1394.696586  1480.261731     371.723115
    84  11008.0  1420.289202  1478.014085     373.090371
    85  11136.0  1420.928461  1481.814118     373.463415
    86  11264.0  1412.730128  1485.785763     373.267818
    87  11392.0  1422.807334  1490.442558     373.958180
    88  11520.0  1413.875946  1498.436732     374.284731
    89  11648.0  1419.766387  1500.623022     375.127994
    90  11776.0  1434.440112  1501.987588     375.406353
    91  11904.0  1428.875156  1506.203980     375.512474
    92  12032.0  1417.344954  1510.578647     375.809867
    93  12160.0  1410.765335  1513.934571     375.563094
    94  12288.0  1425.742760  1418.788537     376.158818
    95  12416.0  1434.129460  1394.999076     374.774624
    96  12544.0  1444.652631  1394.504084     374.985577
    97  12672.0  1438.753168  1390.459794     375.409472




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.043 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

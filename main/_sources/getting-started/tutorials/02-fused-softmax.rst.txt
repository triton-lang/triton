
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   469.263491   686.886307     206.122043
    1     384.0   665.220113   809.930793     261.768741
    2     512.0   802.713310   921.016713     302.375027
    3     640.0   926.004554   929.747263     331.064834
    4     768.0   989.324721   979.306077     350.739402
    5     896.0  1048.703496  1039.013502     354.663518
    6    1024.0  1072.266518  1063.285429     352.625278
    7    1152.0  1098.568662  1073.785796     349.417611
    8    1280.0  1140.268974  1114.088570     350.638370
    9    1408.0  1158.651722  1131.426212     341.114339
    10   1536.0  1197.277763  1167.376976     332.796457
    11   1664.0  1209.601831  1182.874917     329.509154
    12   1792.0  1236.000724  1194.069621     325.385916
    13   1920.0  1259.302511  1217.568574     324.719013
    14   2048.0  1276.404482  1251.167520     324.246441
    15   2176.0  1231.398803   964.181705     325.413349
    16   2304.0  1250.141628   999.579549     326.129958
    17   2432.0  1274.019804  1038.524572     326.183050
    18   2560.0  1290.240006  1068.392746     328.342249
    19   2688.0  1298.658880  1097.736133     329.083427
    20   2816.0  1307.630305  1125.974515     329.633182
    21   2944.0  1320.919757  1146.285700     331.610696
    22   3072.0  1321.553769  1168.674076     333.339500
    23   3200.0  1340.633986  1169.367314     335.225146
    24   3328.0  1344.638198  1199.514189     336.197516
    25   3456.0  1349.619959  1225.530551     337.358689
    26   3584.0  1361.968955  1247.392206     337.806776
    27   3712.0  1365.175225  1263.185653     340.298852
    28   3840.0  1374.645683  1284.133891     340.186239
    29   3968.0  1376.268026  1302.183069     341.482194
    30   4096.0  1386.300354  1319.925671     339.070356
    31   4224.0  1330.635510  1278.638605     343.114914
    32   4352.0  1344.828037  1303.094871     345.171797
    33   4480.0  1350.162190  1316.640789     345.968671
    34   4608.0  1359.250265  1337.050339     346.868365
    35   4736.0  1359.895937  1345.299196     347.993016
    36   4864.0  1370.988703  1359.922818     349.556110
    37   4992.0  1370.319339  1372.560033     350.458115
    38   5120.0  1373.513719  1388.892632     350.619922
    39   5248.0  1375.478844  1357.932474     352.043280
    40   5376.0  1378.823771  1362.784773     352.117807
    41   5504.0  1381.477424  1380.257358     353.703391
    42   5632.0  1395.835507  1396.557957     352.966996
    43   5760.0  1396.235831  1411.721987     354.739984
    44   5888.0  1390.853596  1412.597974     354.726425
    45   6016.0  1398.850811  1424.856028     356.778222
    46   6144.0  1407.155906  1438.533030     356.936004
    47   6272.0  1409.638680  1397.568012     357.835096
    48   6400.0  1413.881003  1417.914311     358.567420
    49   6528.0  1413.000307  1413.238735     359.102809
    50   6656.0  1414.024677  1437.465756     359.677920
    51   6784.0  1421.401314  1438.465178     360.445488
    52   6912.0  1422.598855  1451.385638     360.863577
    53   7040.0  1420.216926  1460.117442     360.956777
    54   7168.0  1425.864194  1459.404401     361.668580
    55   7296.0  1424.596139  1088.655874     362.323754
    56   7424.0  1425.309348  1099.772310     363.108191
    57   7552.0  1428.128693  1113.754757     363.682514
    58   7680.0  1431.545012  1125.440586     363.708540
    59   7808.0  1429.914019  1133.075403     364.898978
    60   7936.0  1435.891673  1144.142675     364.691310
    61   8064.0  1435.211652  1152.532270     365.293762
    62   8192.0  1432.010811  1153.579409     364.514515
    63   8320.0  1381.802365  1118.920871     361.609600
    64   8448.0  1387.201542  1127.179606     362.438113
    65   8576.0  1388.601253  1127.691074     363.450436
    66   8704.0  1377.880684  1135.955871     364.427250
    67   8832.0  1394.191376  1132.854560     365.236321
    68   8960.0  1388.839532  1141.992457     366.127915
    69   9088.0  1400.806096  1137.722140     366.853427
    70   9216.0  1401.161921  1144.691627     367.347980
    71   9344.0  1388.982068  1423.029333     367.774646
    72   9472.0  1396.355064  1430.699921     368.775195
    73   9600.0  1403.824918  1432.964354     369.248521
    74   9728.0  1401.804859  1441.235748     370.096480
    75   9856.0  1402.546552  1439.562402     370.415951
    76   9984.0  1397.392262  1449.970766     370.728843
    77  10112.0  1406.536071  1455.857153     370.936342
    78  10240.0  1410.205688  1468.552550     371.834352
    79  10368.0  1421.546139  1463.793622     370.099172
    80  10496.0  1409.220160  1465.178572     370.724097
    81  10624.0  1407.025074  1465.981096     371.139653
    82  10752.0  1394.090954  1472.927140     372.059403
    83  10880.0  1393.351498  1481.867866     372.226511
    84  11008.0  1419.565929  1477.241332     373.028221
    85  11136.0  1416.319450  1483.794733     373.481207
    86  11264.0  1416.251071  1486.222227     373.741297
    87  11392.0  1417.999356  1488.852434     374.376768
    88  11520.0  1415.365173  1496.978163     374.271474
    89  11648.0  1417.437928  1497.476199     374.440804
    90  11776.0  1434.288630  1502.307626     374.704222
    91  11904.0  1429.645134  1510.089058     376.083679
    92  12032.0  1415.293964  1509.419451     376.371983
    93  12160.0  1411.412460  1514.956149     376.836068
    94  12288.0  1427.455567  1419.731395     376.292140
    95  12416.0  1437.815455  1396.969614     374.690082
    96  12544.0  1442.978427  1395.435940     375.270417
    97  12672.0  1428.915739  1391.463200     375.154483




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.119 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   471.819725   693.279966     206.647131
    1     384.0   665.952129   819.379690     264.263534
    2     512.0   803.309631   913.011979     302.042621
    3     640.0   913.558440   919.458787     328.165771
    4     768.0   987.451654   986.281625     348.189508
    5     896.0  1042.988687  1039.307107     355.398063
    6    1024.0  1071.570282  1072.013236     354.413633
    7    1152.0  1099.648072  1075.468510     347.548900
    8    1280.0  1134.224416  1103.481921     348.749261
    9    1408.0  1159.207794  1131.049657     340.034446
    10   1536.0  1197.157590  1166.799696     333.424814
    11   1664.0  1208.805173  1183.288871     330.426165
    12   1792.0  1231.296367  1201.139181     326.145203
    13   1920.0  1263.160149  1217.783162     324.205493
    14   2048.0  1271.702508  1248.175841     324.230342
    15   2176.0  1232.561448   958.258251     325.649935
    16   2304.0  1255.562547  1000.592597     326.588323
    17   2432.0  1270.836075  1034.862321     327.372059
    18   2560.0  1289.070762  1066.513122     327.798174
    19   2688.0  1293.608137  1096.374237     329.517930
    20   2816.0  1309.140709  1121.442829     329.549000
    21   2944.0  1321.033327  1142.986038     331.942244
    22   3072.0  1327.006444  1170.483842     333.791445
    23   3200.0  1335.839085  1171.260094     334.502556
    24   3328.0  1347.750615  1203.195766     335.832404
    25   3456.0  1349.719473  1224.321994     336.705087
    26   3584.0  1365.005887  1246.508305     338.618037
    27   3712.0  1370.057666  1261.086176     340.486433
    28   3840.0  1369.760824  1280.977162     340.346594
    29   3968.0  1375.085687  1301.349788     340.641580
    30   4096.0  1382.014376  1315.159961     338.326781
    31   4224.0  1327.655776  1279.085123     343.041115
    32   4352.0  1346.051674  1297.544127     345.487551
    33   4480.0  1347.592964  1321.308280     346.141701
    34   4608.0  1355.820658  1332.032507     346.699754
    35   4736.0  1360.077082  1347.161766     347.810357
    36   4864.0  1366.416607  1359.529889     349.025675
    37   4992.0  1367.836066  1371.539364     350.476319
    38   5120.0  1377.118548  1386.072646     350.723676
    39   5248.0  1378.745054  1353.330383     351.073006
    40   5376.0  1380.319135  1361.709896     351.789290
    41   5504.0  1380.696908  1379.603152     353.492052
    42   5632.0  1395.666918  1396.744032     352.948439
    43   5760.0  1396.395909  1403.713774     354.888669
    44   5888.0  1394.936028  1413.232999     355.337788
    45   6016.0  1399.095353  1419.692375     356.257466
    46   6144.0  1403.647044  1427.034656     357.051759
    47   6272.0  1409.818024  1400.551264     357.724177
    48   6400.0  1413.950170  1415.126385     358.701338
    49   6528.0  1412.324155  1413.170946     358.927836
    50   6656.0  1415.981915  1425.961501     359.085317
    51   6784.0  1420.448354  1442.656178     360.486925
    52   6912.0  1423.235843  1439.560707     360.399612
    53   7040.0  1416.766544  1457.595524     361.145066
    54   7168.0  1422.411812  1457.445962     361.654893
    55   7296.0  1427.031322  1083.563142     362.104458
    56   7424.0  1426.066932  1101.526385     362.345554
    57   7552.0  1427.439277  1109.330345     363.208799
    58   7680.0  1429.970906  1118.766977     363.947240
    59   7808.0  1432.786948  1128.776637     364.321436
    60   7936.0  1432.979917  1140.522401     365.156419
    61   8064.0  1433.057830  1146.050816     365.239336
    62   8192.0  1433.177009  1148.785433     363.948975
    63   8320.0  1379.397779  1118.374651     361.841927
    64   8448.0  1385.800079  1121.800628     362.420810
    65   8576.0  1386.099461  1128.330531     363.428153
    66   8704.0  1378.070331  1131.758186     364.351508
    67   8832.0  1392.236457  1133.921681     364.996029
    68   8960.0  1389.312341  1137.740306     365.981036
    69   9088.0  1399.055826  1134.905845     366.675008
    70   9216.0  1404.527176  1140.895900     367.347153
    71   9344.0  1390.039417  1422.401613     367.304888
    72   9472.0  1394.433101  1433.742554     368.504412
    73   9600.0  1400.815608  1432.448214     368.479209
    74   9728.0  1402.769299  1441.133676     369.513178
    75   9856.0  1402.505492  1440.806575     369.912586
    76   9984.0  1394.922151  1451.542814     370.416397
    77  10112.0  1404.220553  1453.544557     370.923054
    78  10240.0  1406.575513  1465.613416     371.306568
    79  10368.0  1415.088132  1463.243226     369.957170
    80  10496.0  1405.518200  1468.624092     370.604045
    81  10624.0  1407.053183  1465.990804     370.983883
    82  10752.0  1399.146763  1472.210892     371.456881
    83  10880.0  1397.674048  1478.892834     371.983475
    84  11008.0  1419.145225  1477.349857     372.642474
    85  11136.0  1419.680324  1480.560409     372.527305
    86  11264.0  1414.341483  1488.234772     373.378927
    87  11392.0  1425.840424  1492.164897     374.016177
    88  11520.0  1414.219956  1493.315548     374.059509
    89  11648.0  1423.341693  1496.956667     374.352317
    90  11776.0  1430.398333  1501.373823     375.286706
    91  11904.0  1431.938911  1508.840056     375.637763
    92  12032.0  1409.452563  1508.689570     375.770095
    93  12160.0  1417.856731  1513.501785     375.501219
    94  12288.0  1430.187927  1417.395418     375.941265
    95  12416.0  1435.337661  1395.167521     374.460542
    96  12544.0  1439.454929  1392.651681     375.757835
    97  12672.0  1434.777534  1390.328582     375.550302




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.898 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

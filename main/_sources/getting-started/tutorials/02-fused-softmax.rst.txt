
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   470.384470   688.070830     204.098536
    1     384.0   664.856878   814.466806     261.446802
    2     512.0   801.721408   934.401218     304.070531
    3     640.0   912.998584   919.286089     331.142574
    4     768.0   981.527316   988.264912     349.010974
    5     896.0  1039.821055  1023.674146     353.568573
    6    1024.0  1079.919143  1068.521747     353.803021
    7    1152.0  1089.977036  1078.303430     349.480359
    8    1280.0  1138.069923  1103.924998     348.797597
    9    1408.0  1158.933413  1129.985558     341.035790
    10   1536.0  1186.411926  1167.981694     332.911460
    11   1664.0  1219.360554  1190.349824     328.890117
    12   1792.0  1235.385185  1191.941181     325.751126
    13   1920.0  1257.091347  1216.535759     324.753930
    14   2048.0  1275.215186  1243.518212     324.764644
    15   2176.0  1234.249868   959.751561     325.468689
    16   2304.0  1259.056380   998.883805     325.906359
    17   2432.0  1275.994759  1038.561845     326.811986
    18   2560.0  1280.559689  1066.869689     328.243507
    19   2688.0  1294.002690  1096.340970     329.286548
    20   2816.0  1315.298382  1124.486289     329.548999
    21   2944.0  1320.039821  1145.486470     331.138059
    22   3072.0  1325.990916  1174.413482     333.429520
    23   3200.0  1334.021358  1169.776417     334.849958
    24   3328.0  1348.913034  1204.758542     336.522362
    25   3456.0  1355.602249  1221.507398     337.139586
    26   3584.0  1365.005887  1243.790714     338.420745
    27   3712.0  1364.221783  1263.589711     340.524770
    28   3840.0  1372.256628  1281.145787     340.011066
    29   3968.0  1375.411705  1300.900759     340.633994
    30   4096.0  1388.822998  1313.979780     339.031853
    31   4224.0  1325.994099  1275.201728     343.151575
    32   4352.0  1346.056963  1297.597011     345.152384
    33   4480.0  1345.893829  1316.743406     345.465487
    34   4608.0  1358.182405  1337.770286     346.960242
    35   4736.0  1364.709927  1344.591131     348.107509
    36   4864.0  1371.261947  1363.065095     349.371009
    37   4992.0  1369.051807  1375.339660     349.946290
    38   5120.0  1376.355193  1387.414711     350.859043
    39   5248.0  1378.407659  1348.342006     351.458624
    40   5376.0  1375.789066  1370.582397     351.732226
    41   5504.0  1384.601621  1386.738001     353.844785
    42   5632.0  1393.636006  1401.418029     353.015591
    43   5760.0  1392.545092  1406.959569     355.116583
    44   5888.0  1387.713850  1419.188927     355.055275
    45   6016.0  1399.867321  1428.620701     356.606018
    46   6144.0  1407.165875  1421.860715     357.142082
    47   6272.0  1410.437926  1405.239804     357.858212
    48   6400.0  1415.945196  1409.500539     358.622822
    49   6528.0  1412.509592  1424.800601     359.176535
    50   6656.0  1412.672004  1435.356913     359.593672
    51   6784.0  1416.613878  1431.182357     360.495243
    52   6912.0  1423.041514  1454.853090     360.914180
    53   7040.0  1421.830096  1451.130851     360.635758
    54   7168.0  1421.311575  1460.255470     361.960789
    55   7296.0  1425.131197  1088.708801     362.410633
    56   7424.0  1430.927280  1100.656441     363.208300
    57   7552.0  1428.575337  1112.549437     363.933536
    58   7680.0  1429.065619  1125.077941     363.600016
    59   7808.0  1427.691126  1135.086070     364.494052
    60   7936.0  1432.127460  1144.614083     364.738033
    61   8064.0  1433.542295  1150.515768     364.849767
    62   8192.0  1434.138123  1153.880951     364.178410
    63   8320.0  1380.475297  1118.447869     362.337883
    64   8448.0  1383.005602  1125.138560     362.590275
    65   8576.0  1387.548232  1127.733100     363.437066
    66   8704.0  1381.727499  1136.886706     364.462903
    67   8832.0  1390.015689  1134.140435     365.401150
    68   8960.0  1385.689387  1139.973380     366.243721
    69   9088.0  1393.182675  1137.971512     367.034443
    70   9216.0  1405.449504  1147.574038     367.738682
    71   9344.0  1393.213315  1422.249573     367.761123
    72   9472.0  1398.670451  1432.817331     368.806293
    73   9600.0  1396.005433  1430.608241     368.207076
    74   9728.0  1402.638607  1442.698444     369.581636
    75   9856.0  1401.916684  1439.994397     370.205279
    76   9984.0  1392.031202  1449.273147     369.813447
    77  10112.0  1404.404797  1455.766907     370.949630
    78  10240.0  1412.061677  1469.035523     372.107230
    79  10368.0  1418.195324  1459.605714     370.272383
    80  10496.0  1404.884954  1463.544760     370.004960
    81  10624.0  1406.066275  1466.915943     370.065287
    82  10752.0  1398.413624  1469.755983     371.541758
    83  10880.0  1392.083170  1476.530549     372.073007
    84  11008.0  1418.109721  1474.770217     372.408370
    85  11136.0  1423.812350  1486.221263     372.815179
    86  11264.0  1410.934678  1487.203746     373.512344
    87  11392.0  1422.148251  1489.246250     374.010331
    88  11520.0  1415.516284  1495.099231     373.530644
    89  11648.0  1421.222705  1500.243018     374.502768
    90  11776.0  1436.121892  1501.372342     374.588931
    91  11904.0  1428.593646  1508.163395     375.197304
    92  12032.0  1412.470577  1511.023142     375.748004
    93  12160.0  1413.632732  1516.043579     375.638258
    94  12288.0  1428.571728  1417.755260     375.812623
    95  12416.0  1440.793843  1392.463325     374.946439
    96  12544.0  1445.456895  1393.601819     375.213414
    97  12672.0  1436.109902  1392.142416     375.413872




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 36.046 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

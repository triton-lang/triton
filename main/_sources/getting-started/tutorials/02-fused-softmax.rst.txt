
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   472.569476   687.701744     207.672485
    1     384.0   660.537189   813.519125     263.968206
    2     512.0   818.721636   926.809415     301.950656
    3     640.0   923.437198   921.361298     331.066380
    4     768.0   986.540077   981.948944     351.346444
    5     896.0  1047.141611  1035.677127     354.443801
    6    1024.0  1079.209095  1063.036372     352.171950
    7    1152.0  1085.439982  1073.881524     348.466114
    8    1280.0  1127.589397  1101.142156     348.686745
    9    1408.0  1158.134211  1139.696489     340.427403
    10   1536.0  1193.306507  1165.260742     334.503420
    11   1664.0  1219.984847  1190.216057     330.200396
    12   1792.0  1230.457222  1193.870742     326.238253
    13   1920.0  1251.964102  1220.300172     325.325261
    14   2048.0  1274.601715  1244.758036     324.799120
    15   2176.0  1233.535346   960.292852     325.413590
    16   2304.0  1251.056614   999.443379     325.965172
    17   2432.0  1272.699961  1029.399165     326.340289
    18   2560.0  1289.986406  1071.344179     328.242701
    19   2688.0  1290.538031  1101.204224     328.825062
    20   2816.0  1311.876107  1125.222470     329.224749
    21   2944.0  1323.358950  1143.598387     331.943295
    22   3072.0  1324.493845  1170.352070     333.136171
    23   3200.0  1339.520687  1173.927279     334.976943
    24   3328.0  1344.140261  1196.519309     336.332951
    25   3456.0  1354.488838  1222.045301     337.628224
    26   3584.0  1359.136670  1242.191101     337.996162
    27   3712.0  1364.008404  1263.064002     339.948155
    28   3840.0  1370.868609  1277.661459     340.826697
    29   3968.0  1375.918554  1299.923629     341.293008
    30   4096.0  1386.505087  1310.278747     338.756186
    31   4224.0  1331.259523  1278.288060     343.204572
    32   4352.0  1339.356145  1299.402751     345.612594
    33   4480.0  1344.756662  1321.012867     345.835651
    34   4608.0  1357.256905  1333.897642     346.686638
    35   4736.0  1360.313584  1347.640370     347.683856
    36   4864.0  1366.388888  1359.644686     348.923765
    37   4992.0  1366.401081  1367.547273     350.095062
    38   5120.0  1374.070190  1384.841250     350.576915
    39   5248.0  1373.021819  1355.492678     351.985629
    40   5376.0  1377.571884  1369.037411     351.714360
    41   5504.0  1380.739756  1383.968558     353.341766
    42   5632.0  1392.899107  1393.772766     353.081012
    43   5760.0  1389.903795  1407.369487     354.837547
    44   5888.0  1396.715005  1413.651707     354.883445
    45   6016.0  1399.962353  1420.549366     356.647892
    46   6144.0  1404.064273  1435.126358     356.815700
    47   6272.0  1409.388859  1393.022456     357.359550
    48   6400.0  1414.238603  1409.116061     358.405930
    49   6528.0  1419.222243  1420.104114     359.564085
    50   6656.0  1416.788122  1428.462750     359.503151
    51   6784.0  1413.539873  1437.849098     360.210857
    52   6912.0  1420.992345  1444.152104     360.744025
    53   7040.0  1418.381251  1458.554820     361.112218
    54   7168.0  1416.017389  1461.549857     361.577362
    55   7296.0  1426.233455  1087.208578     362.474674
    56   7424.0  1432.369404  1101.520498     363.067255
    57   7552.0  1428.666152  1113.466096     363.855911
    58   7680.0  1433.377577  1122.899679     363.418173
    59   7808.0  1434.722923  1130.181252     364.453155
    60   7936.0  1430.758532  1143.674254     364.679336
    61   8064.0  1433.037371  1145.509305     364.587503
    62   8192.0  1432.593919  1150.312822     364.120495
    63   8320.0  1380.149659  1116.497535     361.823280
    64   8448.0  1387.520005  1124.887462     362.889456
    65   8576.0  1388.804459  1129.989903     363.651107
    66   8704.0  1380.592140  1134.954728     364.534230
    67   8832.0  1394.869132  1131.131672     365.160641
    68   8960.0  1386.172707  1139.537371     366.359598
    69   9088.0  1398.598624  1133.675087     366.911281
    70   9216.0  1404.751358  1140.849426     367.572421
    71   9344.0  1385.755519  1418.737060     367.544176
    72   9472.0  1400.655242  1432.428179     368.615341
    73   9600.0  1401.267066  1433.618034     369.128728
    74   9728.0  1398.297587  1443.336637     369.940988
    75   9856.0  1404.702111  1439.564643     370.271530
    76   9984.0  1393.266284  1450.431578     370.613570
    77  10112.0  1407.059628  1451.228682     371.917633
    78  10240.0  1412.339848  1466.395746     371.812144
    79  10368.0  1416.233863  1463.443270     369.669065
    80  10496.0  1410.324619  1467.590770     370.599601
    81  10624.0  1405.718251  1465.174751     370.699385
    82  10752.0  1399.614273  1468.983370     371.568214
    83  10880.0  1395.861218  1478.348885     371.970227
    84  11008.0  1421.770912  1477.177511     372.708925
    85  11136.0  1416.845589  1486.898458     373.356701
    86  11264.0  1416.335403  1487.091089     373.645857
    87  11392.0  1422.562880  1486.847370     374.575740
    88  11520.0  1418.894721  1496.888593     373.552650
    89  11648.0  1420.006248  1501.403781     374.790734
    90  11776.0  1438.072464  1501.198621     375.566701
    91  11904.0  1433.395412  1507.414255     376.039482
    92  12032.0  1416.731390  1511.083188     376.371981
    93  12160.0  1415.454030  1514.927714     376.707048
    94  12288.0  1429.073244  1420.902234     376.687672
    95  12416.0  1437.603592  1396.991743     375.260737
    96  12544.0  1442.622326  1394.450864     375.608401
    97  12672.0  1437.229369  1395.017711     375.726492




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.048 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

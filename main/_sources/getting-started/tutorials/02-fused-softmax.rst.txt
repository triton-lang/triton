
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   473.020357   692.718075     208.631415
    1     384.0   666.624561   834.344872     262.898986
    2     512.0   808.582270   922.116108     303.542045
    3     640.0   903.202597   921.426137     330.854007
    4     768.0   977.561550   985.508056     350.264350
    5     896.0  1051.499312  1036.159002     355.228326
    6    1024.0  1077.997159  1073.183545     352.407535
    7    1152.0  1086.763473  1074.056307     347.317354
    8    1280.0  1136.060755  1109.948223     349.782519
    9    1408.0  1169.277218  1133.808435     339.558015
    10   1536.0  1197.268891  1166.043416     333.659474
    11   1664.0  1211.573089  1185.803498     330.309455
    12   1792.0  1229.191439  1194.315502     326.382887
    13   1920.0  1252.775540  1226.788895     324.537111
    14   2048.0  1276.025470  1249.386492     324.804784
    15   2176.0  1238.868922   960.396691     325.729672
    16   2304.0  1257.052652   999.233124     325.968923
    17   2432.0  1270.425518  1033.393897     326.881953
    18   2560.0  1284.972954  1071.074502     328.125208
    19   2688.0  1291.621721  1096.015593     329.407545
    20   2816.0  1310.336074  1125.721882     329.355618
    21   2944.0  1318.141737  1143.668482     331.575126
    22   3072.0  1326.920119  1169.955675     333.623683
    23   3200.0  1343.656163  1175.156236     335.077455
    24   3328.0  1350.687569  1204.364433     336.530011
    25   3456.0  1353.823280  1224.765298     337.124014
    26   3584.0  1361.621180  1244.320818     337.884777
    27   3712.0  1364.253254  1268.295427     340.812406
    28   3840.0  1367.453397  1284.054234     340.201403
    29   3968.0  1373.860988  1298.170816     341.154017
    30   4096.0  1385.818861  1314.157061     338.854588
    31   4224.0  1327.826845  1278.874516     342.991374
    32   4352.0  1342.982595  1299.169114     345.384940
    33   4480.0  1343.465036  1320.938162     346.133515
    34   4608.0  1355.960650  1330.999595     346.984802
    35   4736.0  1361.511095  1348.360705     348.005154
    36   4864.0  1370.485515  1364.088874     349.272213
    37   4992.0  1371.362244  1374.918275     350.181401
    38   5120.0  1373.433566  1388.539575     350.912185
    39   5248.0  1377.944672  1356.425029     351.708122
    40   5376.0  1379.315720  1370.231612     351.927597
    41   5504.0  1383.703063  1382.543277     353.633059
    42   5632.0  1393.833956  1397.545654     353.250230
    43   5760.0  1393.407942  1408.185890     354.777144
    44   5888.0  1391.759156  1414.795439     354.781350
    45   6016.0  1398.748764  1420.832462     356.702337
    46   6144.0  1410.169491  1430.377710     356.871217
    47   6272.0  1404.232472  1394.072023     357.770382
    48   6400.0  1412.699396  1413.984707     358.479738
    49   6528.0  1415.462240  1424.321423     359.480967
    50   6656.0  1415.410090  1427.884212     359.608911
    51   6784.0  1415.619218  1442.031906     359.981120
    52   6912.0  1420.760547  1448.005731     361.084496
    53   7040.0  1417.684772  1447.820799     361.039306
    54   7168.0  1419.733534  1469.911718     361.700516
    55   7296.0  1422.616709  1085.973045     362.314611
    56   7424.0  1430.118964  1097.049051     363.437530
    57   7552.0  1429.008880  1110.355960     363.254295
    58   7680.0  1430.417021  1120.820582     363.454612
    59   7808.0  1430.664219  1133.997480     364.126302
    60   7936.0  1431.349099  1142.173981     364.609353
    61   8064.0  1436.127003  1146.781606     364.953873
    62   8192.0  1437.474444  1148.533773     363.691044
    63   8320.0  1385.166064  1117.866390     362.083504
    64   8448.0  1386.259476  1122.695118     362.532282
    65   8576.0  1389.132490  1128.170408     363.753757
    66   8704.0  1378.386238  1132.882852     364.387146
    67   8832.0  1396.293575  1133.437312     365.191799
    68   8960.0  1384.838816  1138.742039     365.678748
    69   9088.0  1394.584783  1137.255873     367.022595
    70   9216.0  1404.316731  1142.297317     367.383872
    71   9344.0  1389.132136  1424.589982     367.591019
    72   9472.0  1403.080951  1426.727804     368.434873
    73   9600.0  1402.005922  1434.794747     369.194911
    74   9728.0  1400.720975  1440.601939     369.835708
    75   9856.0  1402.395670  1439.020446     369.979004
    76   9984.0  1393.224167  1449.354955     370.507230
    77  10112.0  1404.523099  1457.663144     371.215602
    78  10240.0  1411.053963  1465.088039     371.914315
    79  10368.0  1419.255486  1461.264153     370.050346
    80  10496.0  1411.275893  1466.742024     370.741888
    81  10624.0  1405.798786  1468.322400     370.792688
    82  10752.0  1396.805614  1471.688396     371.607905
    83  10880.0  1393.330708  1478.212784     372.116001
    84  11008.0  1422.176088  1474.907211     372.540627
    85  11136.0  1416.894039  1483.666659     373.356701
    86  11264.0  1415.196977  1485.656647     373.690384
    87  11392.0  1418.508210  1492.428455     374.341418
    88  11520.0  1414.388761  1495.191130     373.940385
    89  11648.0  1418.335195  1502.659647     375.025863
    90  11776.0  1434.304300  1502.206546     375.215008
    91  11904.0  1429.540991  1509.278721     375.240615
    92  12032.0  1416.021869  1509.226601     376.744700
    93  12160.0  1417.870072  1516.475763     375.532153
    94  12288.0  1420.592224  1420.694572     376.083312
    95  12416.0  1436.561984  1394.885639     375.089119
    96  12544.0  1447.650441  1396.070504     375.639157
    97  12672.0  1433.697214  1394.091503     375.352289




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.913 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

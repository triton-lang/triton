
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   470.156459   686.511116     205.850460
    1     384.0   664.732995   818.753327     259.978836
    2     512.0   812.384710   932.028634     302.876994
    3     640.0   924.225635   922.650613     330.989904
    4     768.0   989.938531   990.967742     350.847033
    5     896.0  1038.920948  1030.483076     355.018876
    6    1024.0  1068.228324  1067.197837     354.731456
    7    1152.0  1092.236573  1075.797644     347.698659
    8    1280.0  1126.300353  1100.250904     348.607672
    9    1408.0  1159.489221  1129.748229     339.473529
    10   1536.0  1185.044525  1164.333753     332.525580
    11   1664.0  1208.562681  1181.398633     328.969239
    12   1792.0  1233.119462  1190.316961     325.183714
    13   1920.0  1263.540604  1226.784771     325.156974
    14   2048.0  1268.019666  1242.950823     325.169044
    15   2176.0  1238.872261   960.163607     325.687559
    16   2304.0  1250.153247   999.962399     326.076346
    17   2432.0  1273.749411  1039.837432     326.858879
    18   2560.0  1288.602469  1070.289447     327.835289
    19   2688.0  1291.226339  1100.023278     329.283495
    20   2816.0  1308.635220  1121.282003     329.203585
    21   2944.0  1315.167079  1147.316053     331.398095
    22   3072.0  1324.186275  1173.912609     333.342028
    23   3200.0  1335.906568  1169.935522     334.838022
    24   3328.0  1348.383706  1200.690184     336.563654
    25   3456.0  1348.934100  1216.877640     337.139741
    26   3584.0  1362.711484  1247.685536     337.842789
    27   3712.0  1365.293396  1265.038974     340.481185
    28   3840.0  1377.057180  1281.720506     340.515970
    29   3968.0  1372.071103  1300.268942     340.895505
    30   4096.0  1385.470080  1316.997953     338.902599
    31   4224.0  1329.302126  1278.904265     343.002410
    32   4352.0  1338.897634  1298.425413     345.144939
    33   4480.0  1347.256495  1319.889214     345.628122
    34   4608.0  1360.027355  1331.180053     346.895931
    35   4736.0  1355.973469  1346.934716     348.230446
    36   4864.0  1366.832031  1359.795292     349.589117
    37   4992.0  1367.102706  1374.183294     350.646737
    38   5120.0  1381.167719  1389.729526     351.191592
    39   5248.0  1371.901967  1352.651346     351.272908
    40   5376.0  1378.526511  1366.291002     351.903759
    41   5504.0  1378.217752  1383.739652     353.665980
    42   5632.0  1398.859733  1392.729425     353.249352
    43   5760.0  1396.792204  1403.119568     355.265582
    44   5888.0  1391.008233  1405.725743     354.602114
    45   6016.0  1400.769616  1423.450054     356.894669
    46   6144.0  1409.009925  1437.614627     357.394828
    47   6272.0  1409.993191  1399.515405     357.405667
    48   6400.0  1413.981556  1405.026766     358.320374
    49   6528.0  1418.902523  1420.675807     359.116630
    50   6656.0  1414.893478  1422.420418     359.218367
    51   6784.0  1413.369311  1430.533608     359.733337
    52   6912.0  1421.327140  1448.364574     360.569441
    53   7040.0  1419.662367  1448.258143     360.406810
    54   7168.0  1417.009181  1463.353321     361.426950
    55   7296.0  1422.736400  1083.959823     362.378620
    56   7424.0  1432.535970  1094.951000     362.867252
    57   7552.0  1425.890349  1110.964445     363.545737
    58   7680.0  1432.625845  1120.157252     363.792009
    59   7808.0  1428.848813  1128.630302     364.735080
    60   7936.0  1437.298330  1138.991680     364.632115
    61   8064.0  1434.413738  1144.766584     364.406852
    62   8192.0  1433.604014  1150.297707     363.780373
    63   8320.0  1387.268775  1116.301035     361.810634
    64   8448.0  1385.071025  1120.740269     362.282679
    65   8576.0  1384.828041  1125.423610     363.160971
    66   8704.0  1383.199538  1130.083850     364.462903
    67   8832.0  1393.773988  1130.458780     364.876000
    68   8960.0  1388.733233  1137.206541     365.692073
    69   9088.0  1398.614049  1134.933759     366.515559
    70   9216.0  1406.722307  1141.436819     367.262766
    71   9344.0  1391.684585  1422.731141     367.340542
    72   9472.0  1396.509470  1427.134931     368.726336
    73   9600.0  1404.058167  1431.742611     368.899347
    74   9728.0  1399.605227  1438.046247     369.550617
    75   9856.0  1398.659778  1439.188844     369.894878
    76   9984.0  1392.055257  1451.604409     370.295650
    77  10112.0  1406.340128  1454.064729     371.320135
    78  10240.0  1415.213817  1463.035740     371.783848
    79  10368.0  1417.288618  1462.841844     369.841875
    80  10496.0  1408.588253  1468.012759     370.626272
    81  10624.0  1410.207405  1467.315410     371.237632
    82  10752.0  1396.377868  1474.046379     371.269829
    83  10880.0  1393.477288  1478.487662     371.630533
    84  11008.0  1423.559934  1477.252749     372.629187
    85  11136.0  1416.833714  1486.285292     373.063552
    86  11264.0  1410.092625  1486.270938     373.485654
    87  11392.0  1425.996439  1487.364771     374.593437
    88  11520.0  1418.014340  1496.678273     374.130137
    89  11648.0  1418.259743  1500.248062     375.123550
    90  11776.0  1433.632629  1502.851413     375.410805
    91  11904.0  1433.696353  1506.895538     375.160473
    92  12032.0  1414.305967  1511.566753     376.030970
    93  12160.0  1412.969211  1515.459851     376.507021
    94  12288.0  1425.368222  1423.332560     376.463376
    95  12416.0  1437.520081  1395.069427     375.088026
    96  12544.0  1442.923876  1393.756079     375.555689
    97  12672.0  1434.307630  1389.733738     375.255559




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.964 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

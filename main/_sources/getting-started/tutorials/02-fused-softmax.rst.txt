
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   472.600047   695.045183     208.556369
    1     384.0   657.705488   813.607283     264.065836
    2     512.0   805.326740   926.211922     301.620475
    3     640.0   911.633958   924.759455     330.720991
    4     768.0   985.659239   992.359550     350.900849
    5     896.0  1039.964947  1042.380846     354.302630
    6    1024.0  1076.590686  1080.953612     352.525445
    7    1152.0  1100.325806  1073.014208     347.249768
    8    1280.0  1125.528535  1111.705859     348.170182
    9    1408.0  1166.583566  1140.300840     340.846002
    10   1536.0  1195.779676  1158.714644     333.157586
    11   1664.0  1208.636676  1183.341464     330.246915
    12   1792.0  1236.145461  1196.176976     325.778236
    13   1920.0  1254.041615  1227.156970     324.498544
    14   2048.0  1276.404482  1250.735254     325.539296
    15   2176.0  1236.613006   964.145108     325.577916
    16   2304.0  1251.801971  1003.321161     325.973150
    17   2432.0  1276.573037  1038.745872     327.054580
    18   2560.0  1287.864119  1067.175384     327.838951
    19   2688.0  1292.732901  1096.677710     328.888951
    20   2816.0  1316.044816  1121.398484     329.258261
    21   2944.0  1323.348148  1144.226738     331.482731
    22   3072.0  1321.924555  1171.439624     333.292518
    23   3200.0  1338.901951  1166.431822     335.444065
    24   3328.0  1346.245825  1204.001846     336.459407
    25   3456.0  1355.261090  1217.763568     337.227566
    26   3584.0  1359.611073  1241.975425     338.030768
    27   3712.0  1366.307262  1264.545030     340.170623
    28   3840.0  1374.217144  1278.587409     340.459567
    29   3968.0  1372.281768  1296.677979     341.562880
    30   4096.0  1391.676650  1318.767901     338.990739
    31   4224.0  1331.550119  1275.512731     343.126052
    32   4352.0  1336.221762  1302.587128     345.657997
    33   4480.0  1347.632875  1312.073607     345.927066
    34   4608.0  1360.678744  1328.849660     347.467505
    35   4736.0  1355.875344  1345.441435     348.082076
    36   4864.0  1365.367147  1362.086532     349.112174
    37   4992.0  1366.236715  1372.160950     350.050250
    38   5120.0  1380.898363  1383.958626     350.440670
    39   5248.0  1377.088968  1358.827633     351.637062
    40   5376.0  1381.566522  1366.662078     351.897747
    41   5504.0  1382.460704  1378.914984     353.465223
    42   5632.0  1391.344021  1392.741169     353.496690
    43   5760.0  1389.389587  1403.377379     354.800375
    44   5888.0  1393.236481  1413.286294     354.911294
    45   6016.0  1397.522727  1428.652441     356.694427
    46   6144.0  1411.481674  1420.959646     357.422672
    47   6272.0  1409.039906  1397.971914     357.387222
    48   6400.0  1416.064312  1410.816792     358.366817
    49   6528.0  1414.860553  1409.688031     358.872202
    50   6656.0  1416.375459  1433.013634     359.255088
    51   6784.0  1418.118573  1428.478202     360.233845
    52   6912.0  1419.794259  1443.237429     360.780802
    53   7040.0  1422.910928  1448.156573     361.130450
    54   7168.0  1421.223511  1457.407744     361.705082
    55   7296.0  1424.571668  1085.709025     362.214072
    56   7424.0  1431.665991  1095.550069     363.263005
    57   7552.0  1429.820113  1109.652072     363.764629
    58   7680.0  1432.097796  1125.509334     364.079824
    59   7808.0  1429.251563  1132.481923     364.475873
    60   7936.0  1437.578040  1139.500330     364.368255
    61   8064.0  1433.193178  1149.572164     365.122634
    62   8192.0  1432.706979  1147.903694     363.867788
    63   8320.0  1379.510229  1116.444578     361.958201
    64   8448.0  1386.758339  1125.593334     362.795631
    65   8576.0  1387.681481  1125.746583     363.490551
    66   8704.0  1375.675056  1136.584963     364.779633
    67   8832.0  1394.822898  1131.460523     365.004923
    68   8960.0  1388.461792  1136.547735     365.940998
    69   9088.0  1397.395752  1135.944074     366.608855
    70   9216.0  1406.489179  1141.203422     367.267204
    71   9344.0  1391.562752  1417.575816     367.336163
    72   9472.0  1400.208701  1431.281947     369.076408
    73   9600.0  1401.766817  1430.229544     368.890399
    74   9728.0  1397.270672  1442.816883     369.867097
    75   9856.0  1401.064287  1441.842716     370.080892
    76   9984.0  1394.739750  1446.628945     370.720850
    77  10112.0  1402.837219  1454.400546     371.113602
    78  10240.0  1409.665656  1468.294144     371.643468
    79  10368.0  1419.356364  1463.571869     369.881778
    80  10496.0  1407.843237  1463.214016     370.328667
    81  10624.0  1407.917938  1464.917273     370.952745
    82  10752.0  1396.188188  1470.706750     371.465793
    83  10880.0  1395.971160  1479.542389     371.740754
    84  11008.0  1420.312068  1477.863861     372.713356
    85  11136.0  1416.465788  1483.148735     373.458967
    86  11264.0  1412.346715  1486.607793     373.734919
    87  11392.0  1423.635741  1492.292684     374.063265
    88  11520.0  1415.762758  1496.643249     374.041857
    89  11648.0  1421.007876  1500.071550     375.105786
    90  11776.0  1436.438187  1503.094273     375.401904
    91  11904.0  1428.021899  1508.689298     376.039481
    92  12032.0  1419.377007  1507.811104     375.871750
    93  12160.0  1415.196240  1515.225140     376.498134
    94  12288.0  1427.979505  1418.487376     375.892456
    95  12416.0  1439.982756  1394.297570     375.362663
    96  12544.0  1442.808396  1393.494443     375.472257
    97  12672.0  1435.613295  1391.875682     375.457871




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.021 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

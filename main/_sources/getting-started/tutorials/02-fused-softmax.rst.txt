
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   472.385971   708.326577     208.616156
    1     384.0   659.109206   829.558217     263.525042
    2     512.0   808.063677   915.136845     304.026721
    3     640.0   920.106625   929.819792     332.918659
    4     768.0   988.818142   987.919464     350.792200
    5     896.0  1039.396527  1039.240434     355.907037
    6    1024.0  1069.109078  1067.976947     354.276128
    7    1152.0  1091.455160  1073.554588     349.924352
    8    1280.0  1128.975846  1101.749378     349.917085
    9    1408.0  1167.492695  1139.317336     341.173165
    10   1536.0  1189.014632  1162.720953     333.180832
    11   1664.0  1215.967442  1190.676570     329.636599
    12   1792.0  1230.313867  1193.857808     325.631089
    13   1920.0  1254.549715  1225.299170     324.734450
    14   2048.0  1276.621860  1250.776174     324.294711
    15   2176.0  1241.212105   963.902733     325.961988
    16   2304.0  1256.441704   999.671124     326.025673
    17   2432.0  1271.241535  1037.716338     327.020105
    18   2560.0  1284.706905  1067.695096     328.262949
    19   2688.0  1298.489567  1102.085593     329.496485
    20   2816.0  1307.561209  1125.328287     329.842191
    21   2944.0  1316.104269  1143.986988     331.658564
    22   3072.0  1324.587574  1170.055760     333.958629
    23   3200.0  1339.746561  1172.540288     335.339347
    24   3328.0  1349.387069  1200.321552     336.332951
    25   3456.0  1352.231567  1220.682390     336.850768
    26   3584.0  1357.798121  1246.575294     338.140346
    27   3712.0  1370.448762  1261.529835     340.934200
    28   3840.0  1373.409913  1282.065166     340.695666
    29   3968.0  1375.255622  1300.499094     341.068467
    30   4096.0  1386.408419  1320.165729     338.776362
    31   4224.0  1333.735222  1279.788961     342.660458
    32   4352.0  1340.465542  1298.711565     345.292483
    33   4480.0  1345.226121  1314.401142     346.021145
    34   4608.0  1358.710090  1335.143640     347.275249
    35   4736.0  1360.130744  1349.279895     348.257031
    36   4864.0  1367.201912  1362.467558     348.962095
    37   4992.0  1374.031214  1370.964281     350.276897
    38   5120.0  1377.447907  1390.460187     350.912185
    39   5248.0  1375.631795  1354.169609     351.805381
    40   5376.0  1377.275590  1371.070262     351.690119
    41   5504.0  1379.271789  1384.514450     353.360543
    42   5632.0  1395.172822  1384.803576     353.609949
    43   5760.0  1391.110611  1403.368736     355.251608
    44   5888.0  1395.544470  1412.705738     354.637596
    45   6016.0  1399.153438  1424.900541     356.845670
    46   6144.0  1408.005658  1423.433259     356.977666
    47   6272.0  1410.583552  1392.874586     358.307271
    48   6400.0  1415.489907  1413.350449     358.447442
    49   6528.0  1418.502346  1412.634183     359.402504
    50   6656.0  1416.424578  1434.319163     359.468590
    51   6784.0  1415.104368  1434.692213     360.160289
    52   6912.0  1421.521467  1437.118529     361.038446
    53   7040.0  1420.399395  1451.641130     360.834403
    54   7168.0  1419.686131  1457.245778     361.513536
    55   7296.0  1426.489327  1082.684402     362.264335
    56   7424.0  1431.429866  1095.365139     362.980866
    57   7552.0  1429.444869  1108.245830     363.536625
    58   7680.0  1430.489175  1122.287760     363.744729
    59   7808.0  1431.326897  1128.240792     364.375929
    60   7936.0  1435.648708  1143.264700     364.625168
    61   8064.0  1437.154808  1146.011809     364.917655
    62   8192.0  1435.551692  1150.370623     363.731236
    63   8320.0  1385.229465  1117.140128     361.748068
    64   8448.0  1384.180356  1125.223236     362.734325
    65   8576.0  1390.013151  1129.482061     363.313919
    66   8704.0  1379.315299  1133.858874     364.547607
    67   8832.0  1395.989825  1130.589044     365.271948
    68   8960.0  1387.184696  1141.268756     365.013702
    69   9088.0  1398.514495  1137.261199     367.084958
    70   9216.0  1406.506711  1143.862157     367.832020
    71   9344.0  1393.624138  1419.681612     367.680529
    72   9472.0  1397.024398  1431.157046     368.605132
    73   9600.0  1400.202584  1434.209450     369.048905
    74   9728.0  1398.612345  1435.604326     369.830003
    75   9856.0  1401.495044  1440.171822     370.346953
    76   9984.0  1395.545359  1451.761346     370.474564
    77  10112.0  1406.533173  1454.541754     371.517591
    78  10240.0  1409.620808  1464.859566     371.781061
    79  10368.0  1416.495389  1462.434062     370.214626
    80  10496.0  1407.864194  1465.576923     370.222181
    81  10624.0  1408.050805  1467.017737     370.961641
    82  10752.0  1397.983993  1468.941454     370.869632
    83  10880.0  1397.191188  1477.307033     371.419089
    84  11008.0  1420.194609  1475.193581     372.390173
    85  11136.0  1417.951534  1484.101844     372.819613
    86  11264.0  1413.175209  1490.526803     373.019173
    87  11392.0  1419.713546  1490.287713     374.549198
    88  11520.0  1415.967396  1493.222174     373.658315
    89  11648.0  1419.462597  1498.727308     374.303666
    90  11776.0  1433.080774  1502.399622     374.921691
    91  11904.0  1428.870708  1508.277289     375.598079
    92  12032.0  1414.281516  1508.536658     375.907120
    93  12160.0  1409.547708  1516.974659     375.921496
    94  12288.0  1428.001208  1422.153320     376.105515
    95  12416.0  1433.911922  1395.460475     374.500248
    96  12544.0  1440.100455  1395.690163     375.507382
    97  12672.0  1437.028765  1393.920000     375.435869




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.056 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   470.422263   685.953972     205.088050
    1     384.0   664.246694   813.792741     261.371652
    2     512.0   814.485297   910.306089     300.060016
    3     640.0   918.809890   921.191272     330.734639
    4     768.0   989.591305   990.520855     347.294281
    5     896.0  1048.048127  1035.586516     353.688175
    6    1024.0  1069.279744  1064.358539     352.253028
    7    1152.0  1087.971525  1072.667291     348.845654
    8    1280.0  1135.588010  1111.923121     347.697015
    9    1408.0  1159.109752  1139.421995     339.569757
    10   1536.0  1191.395733  1165.981619     332.416089
    11   1664.0  1217.506382  1189.650361     329.519515
    12   1792.0  1233.091433  1191.347451     325.001166
    13   1920.0  1253.602465  1225.356874     324.208864
    14   2048.0  1276.478417  1242.174124     324.988689
    15   2176.0  1229.623550   958.385038     325.751647
    16   2304.0  1250.385694  1003.071401     325.690414
    17   2432.0  1266.014400  1038.000090     327.137205
    18   2560.0  1282.194235  1066.957854     328.125011
    19   2688.0  1289.267800  1096.165468     329.026180
    20   2816.0  1307.870869  1125.023251     329.119389
    21   2944.0  1320.939299  1139.657752     330.811723
    22   3072.0  1326.245724  1166.052334     333.103608
    23   3200.0  1341.017949  1173.527409     334.498628
    24   3328.0  1347.841585  1199.905931     336.124479
    25   3456.0  1353.160870  1223.268795     336.742530
    26   3584.0  1363.876211  1242.835557     338.105975
    27   3712.0  1367.887293  1258.507560     340.129995
    28   3840.0  1368.757197  1278.389925     339.818986
    29   3968.0  1375.695917  1296.767373     340.773795
    30   4096.0  1389.371887  1318.352604     338.387690
    31   4224.0  1329.183103  1276.500827     343.312135
    32   4352.0  1340.477159  1296.685289     345.070054
    33   4480.0  1346.674809  1316.227592     345.669850
    34   4608.0  1359.418423  1334.508009     346.883277
    35   4736.0  1354.229702  1343.650797     347.770361
    36   4864.0  1369.720848  1358.631594     348.991347
    37   4992.0  1368.573069  1375.029883     350.287163
    38   5120.0  1379.621311  1386.408767     350.681081
    39   5248.0  1377.250771  1356.553332     352.052710
    40   5376.0  1381.929606  1366.830622     351.641761
    41   5504.0  1384.705620  1383.512181     353.633060
    42   5632.0  1391.498107  1392.993601     353.008756
    43   5760.0  1391.766862  1406.615972     354.592317
    44   5888.0  1392.405304  1408.679619     354.542293
    45   6016.0  1397.819484  1423.786242     356.694426
    46   6144.0  1406.972712  1426.732527     356.741707
    47   6272.0  1405.577405  1396.446025     357.562542
    48   6400.0  1414.720470  1418.650576     358.313715
    49   6528.0  1412.441415  1410.294443     358.946247
    50   6656.0  1415.026195  1420.208841     359.630752
    51   6784.0  1417.652634  1437.846303     360.417868
    52   6912.0  1425.817317  1438.587946     360.734833
    53   7040.0  1419.057219  1454.592431     360.658670
    54   7168.0  1420.001679  1459.882486     361.249574
    55   7296.0  1425.518506  1087.175815     362.497553
    56   7424.0  1430.957783  1097.714048     363.039971
    57   7552.0  1427.198040  1106.226304     363.290698
    58   7680.0  1431.572773  1121.389326     363.518664
    59   7808.0  1432.694789  1128.423307     364.430439
    60   7936.0  1435.413847  1138.798211     364.545637
    61   8064.0  1432.362789  1147.614316     364.944818
    62   8192.0  1434.099305  1148.769852     364.120216
    63   8320.0  1382.866959  1112.940096     361.824045
    64   8448.0  1389.690615  1120.314630     362.296041
    65   8576.0  1386.882698  1124.215616     363.125373
    66   8704.0  1380.343838  1132.134103     363.928832
    67   8832.0  1392.698969  1130.495997     365.049400
    68   8960.0  1384.449373  1139.347118     365.829829
    69   9088.0  1399.746335  1135.753528     366.400116
    70   9216.0  1404.105943  1141.240686     367.330036
    71   9344.0  1389.628314  1419.603537     367.483669
    72   9472.0  1396.136635  1431.639884     367.733092
    73   9600.0  1403.648142  1430.474972     368.939623
    74   9728.0  1399.947976  1439.887592     369.639264
    75   9856.0  1399.315226  1437.772569     370.066457
    76   9984.0  1390.791963  1449.860902     369.617354
    77  10112.0  1404.459429  1456.136472     371.481955
    78  10240.0  1411.516134  1462.089242     371.954450
    79  10368.0  1419.337675  1460.327237     369.691213
    80  10496.0  1410.476714  1465.430253     370.066996
    81  10624.0  1404.404838  1467.429339     370.863808
    82  10752.0  1400.451027  1470.283864     371.775578
    83  10880.0  1390.486230  1476.377725     371.163817
    84  11008.0  1417.898082  1476.193844     372.717787
    85  11136.0  1419.034373  1482.354633     373.423391
    86  11264.0  1409.755463  1486.956808     373.641405
    87  11392.0  1422.628764  1486.448863     374.527084
    88  11520.0  1411.634397  1495.113232     373.553325
    89  11648.0  1418.973661  1498.829955     374.153376
    90  11776.0  1432.625884  1500.292141     374.699787
    91  11904.0  1430.769229  1509.723164     376.048320
    92  12032.0  1416.733169  1508.588956     375.686161
    93  12160.0  1410.625222  1512.727289     375.598463
    94  12288.0  1423.007875  1417.764291     375.754988
    95  12416.0  1435.328582  1391.581088     374.924327
    96  12544.0  1446.951803  1388.714760     375.349372
    97  12672.0  1436.794203  1388.603756     375.084206




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.031 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

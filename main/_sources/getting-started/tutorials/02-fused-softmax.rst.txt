
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   472.692020   690.838453     208.613477
    1     384.0   667.272889   818.392377     261.735954
    2     512.0   806.932462   933.364939     303.498795
    3     640.0   918.019237   925.784283     330.267327
    4     768.0   987.728698   988.887334     349.532705
    5     896.0  1042.279773  1042.383366     356.099030
    6    1024.0  1084.436807  1074.743680     353.697137
    7    1152.0  1099.245992  1074.705225     348.881810
    8    1280.0  1130.454637  1103.208716     348.793111
    9    1408.0  1160.606214  1130.778281     341.172713
    10   1536.0  1195.490549  1164.707313     332.958330
    11   1664.0  1220.548015  1181.928529     329.594806
    12   1792.0  1238.268420  1200.551706     326.106860
    13   1920.0  1264.859594  1225.942953     324.822554
    14   2048.0  1268.728473  1241.629343     324.878242
    15   2176.0  1236.659331   960.023812     326.210150
    16   2304.0  1256.218569  1004.209788     326.471832
    17   2432.0  1271.204247  1030.040663     327.426661
    18   2560.0  1282.099113  1071.988062     328.356786
    19   2688.0  1296.487555  1097.428034     329.340870
    20   2816.0  1309.058388  1122.250860     329.716604
    21   2944.0  1318.265625  1143.948410     331.531972
    22   3072.0  1328.388295  1169.980723     333.590997
    23   3200.0  1338.075064  1170.922945     335.120671
    24   3328.0  1346.826895  1204.330727     336.422367
    25   3456.0  1354.648544  1219.461302     336.962058
    26   3584.0  1359.841517  1244.465808     338.514465
    27   3712.0  1368.888885  1261.064064     340.499843
    28   3840.0  1369.304020  1281.673011     340.585882
    29   3968.0  1373.607585  1303.355419     341.268166
    30   4096.0  1390.616553  1318.833277     338.706897
    31   4224.0  1325.674895  1279.823605     343.090729
    32   4352.0  1341.502103  1300.892824     345.358977
    33   4480.0  1345.050825  1320.934149     345.802896
    34   4608.0  1361.050647  1336.219817     347.206285
    35   4736.0  1357.612235  1343.976330     348.395404
    36   4864.0  1369.268584  1356.337484     349.183508
    37   4992.0  1371.666782  1372.188702     350.465637
    38   5120.0  1375.540876  1389.648968     351.141628
    39   5248.0  1376.085571  1355.205413     351.537235
    40   5376.0  1379.768135  1367.167200     351.817971
    41   5504.0  1381.512057  1381.364577     353.764152
    42   5632.0  1388.705026  1396.729777     352.999475
    43   5760.0  1398.075084  1403.850095     354.925861
    44   5888.0  1391.104823  1404.529818     354.985593
    45   6016.0  1403.161400  1413.791665     356.750285
    46   6144.0  1410.710220  1437.075236     356.843456
    47   6272.0  1407.819849  1398.735971     358.108066
    48   6400.0  1412.072624  1400.067707     358.461282
    49   6528.0  1414.676889  1422.589228     359.139667
    50   6656.0  1416.182316  1428.002037     359.512345
    51   6784.0  1417.483106  1431.398310     360.266036
    52   6912.0  1424.290919  1442.734108     360.610774
    53   7040.0  1418.342082  1444.933822     360.869585
    54   7168.0  1425.077939  1465.543563     361.700517
    55   7296.0  1420.925891  1083.082650     362.616563
    56   7424.0  1429.439492  1096.622847     363.130940
    57   7552.0  1426.794816  1110.723083     363.673395
    58   7680.0  1430.893627  1120.287915     363.687075
    59   7808.0  1431.213020  1130.647955     364.253343
    60   7936.0  1434.843313  1140.281479     364.741410
    61   8064.0  1435.060181  1146.372453     364.759289
    62   8192.0  1429.435380  1150.297705     363.941271
    63   8320.0  1383.694235  1116.432482     362.114842
    64   8448.0  1386.549148  1121.670522     362.612586
    65   8576.0  1386.020210  1123.796391     363.343502
    66   8704.0  1383.108475  1132.021876     364.596665
    67   8832.0  1396.279388  1131.318776     365.049400
    68   8960.0  1386.552474  1138.321331     365.865395
    69   9088.0  1397.760091  1134.812963     367.156258
    70   9216.0  1408.200583  1145.106446     367.627241
    71   9344.0  1392.321865  1421.196120     368.009844
    72   9472.0  1397.781663  1432.386478     368.560312
    73   9600.0  1399.670945  1434.494520     369.360815
    74   9728.0  1398.669918  1439.255698     370.010648
    75   9856.0  1399.200465  1439.891293     369.914320
    76   9984.0  1392.726661  1447.612156     370.474563
    77  10112.0  1403.797543  1457.253555     371.393128
    78  10240.0  1411.098024  1466.142426     371.306570
    79  10368.0  1418.815285  1460.950434     369.784253
    80  10496.0  1407.309179  1466.689951     370.804173
    81  10624.0  1407.336013  1464.702864     370.610570
    82  10752.0  1397.109836  1474.076683     371.462415
    83  10880.0  1391.868752  1479.594624     372.164617
    84  11008.0  1421.677548  1479.412916     372.912858
    85  11136.0  1418.811770  1484.800010     373.721560
    86  11264.0  1416.177660  1484.859028     373.614695
    87  11392.0  1423.033267  1490.926261     374.540352
    88  11520.0  1416.276218  1498.130585     374.359867
    89  11648.0  1424.056861  1499.505494     375.008107
    90  11776.0  1434.960480  1501.322700     375.767328
    91  11904.0  1427.195524  1510.657865     375.893705
    92  12032.0  1412.741862  1510.272883     376.403015
    93  12160.0  1417.175825  1514.212043     376.422628
    94  12288.0  1429.006381  1419.939647     376.313989
    95  12416.0  1438.896402  1395.839449     375.353798
    96  12544.0  1447.196104  1392.260306     375.674313
    97  12672.0  1432.502300  1391.532297     375.224788




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.938 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

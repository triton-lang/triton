
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   473.198509   690.386633     207.993920
    1     384.0   667.120418   814.651862     264.405964
    2     512.0   805.526375   929.544407     301.468487
    3     640.0   899.053419   907.743732     330.680392
    4     768.0   984.135390   992.429244     349.116716
    5     896.0  1039.417894  1029.157532     355.041237
    6    1024.0  1077.496644  1071.306334     352.153385
    7    1152.0  1102.272910  1076.728668     348.764822
    8    1280.0  1129.496644  1112.658443     349.895085
    9    1408.0  1163.345593  1142.002337     341.979214
    10   1536.0  1192.144985  1166.625215     334.188274
    11   1664.0  1209.834488  1191.996084     329.881594
    12   1792.0  1237.753698  1195.675152     325.925152
    13   1920.0  1253.986925  1225.491948     323.776347
    14   2048.0  1265.236930  1250.960429     324.367708
    15   2176.0  1229.764504   963.371642     325.340266
    16   2304.0  1249.915341  1004.681614     325.833172
    17   2432.0  1275.660381  1035.290484     326.248119
    18   2560.0  1289.043037  1073.008810     328.147575
    19   2688.0  1290.011260  1100.412504     329.746081
    20   2816.0  1307.812469  1126.987001     329.636020
    21   2944.0  1317.659714  1142.918811     331.043749
    22   3072.0  1323.329158  1169.716665     333.578045
    23   3200.0  1341.470336  1171.377569     334.735647
    24   3328.0  1344.204471  1201.573694     336.210756
    25   3456.0  1354.806790  1220.648957     336.897176
    26   3584.0  1358.547108  1242.494009     337.944044
    27   3712.0  1363.596313  1263.423740     340.416265
    28   3840.0  1369.765832  1279.326941     340.545882
    29   3968.0  1372.384217  1300.450662     341.308402
    30   4096.0  1392.184524  1319.562820     339.003664
    31   4224.0  1334.571132  1276.528484     342.667986
    32   4352.0  1347.025670  1300.482755     345.272803
    33   4480.0  1343.420143  1321.176059     346.067593
    34   4608.0  1360.795947  1334.861093     346.740336
    35   4736.0  1359.143029  1341.039473     347.800623
    36   4864.0  1370.099827  1360.636353     349.030022
    37   4992.0  1371.465307  1371.016738     349.809110
    38   5120.0  1379.382592  1382.233594     350.693428
    39   5248.0  1372.126529  1353.896767     351.963691
    40   5376.0  1376.683386  1370.483910     351.855410
    41   5504.0  1382.422588  1373.185079     353.521233
    42   5632.0  1390.496315  1397.209793     353.278115
    43   5760.0  1391.329447  1404.636726     355.177322
    44   5888.0  1391.859047  1403.258456     355.248772
    45   6016.0  1400.338746  1420.862995     356.410746
    46   6144.0  1408.664103  1433.192850     356.811075
    47   6272.0  1411.494511  1386.286936     357.451791
    48   6400.0  1415.097583  1410.855793     358.428992
    49   6528.0  1411.306135  1409.944492     359.136620
    50   6656.0  1417.553390  1431.297810     359.498556
    51   6784.0  1418.003189  1433.188511     361.068048
    52   6912.0  1420.802441  1438.227442     360.578624
    53   7040.0  1417.711561  1447.948280     361.057785
    54   7168.0  1417.974296  1453.534854     361.892261
    55   7296.0  1421.312242  1084.936628     361.990345
    56   7424.0  1428.293428  1095.388415     362.926320
    57   7552.0  1430.286615  1109.023265     363.696197
    58   7680.0  1435.353224  1118.912758     363.304353
    59   7808.0  1430.180520  1129.559577     364.253342
    60   7936.0  1431.051434  1139.793135     364.741412
    61   8064.0  1436.164588  1146.218907     364.857656
    62   8192.0  1429.568929  1150.081677     363.967025
    63   8320.0  1381.579059  1115.318890     361.824045
    64   8448.0  1390.035652  1125.655530     362.822433
    65   8576.0  1391.913671  1126.587024     363.495011
    66   8704.0  1382.907470  1132.637732     364.240184
    67   8832.0  1393.500976  1131.867390     365.076089
    68   8960.0  1386.847247  1138.240561     365.714286
    69   9088.0  1397.585297  1134.283075     366.688861
    70   9216.0  1404.857453  1143.623856     367.427134
    71   9344.0  1391.993795  1419.450301     367.031095
    72   9472.0  1396.366980  1431.034928     368.806961
    73   9600.0  1400.946426  1427.956696     369.395043
    74   9728.0  1396.522334  1441.468626     369.106339
    75   9856.0  1401.042017  1442.995439     370.338078
    76   9984.0  1394.037284  1447.629746     370.770147
    77  10112.0  1407.230961  1451.099582     370.710583
    78  10240.0  1411.910827  1467.435294     370.890723
    79  10368.0  1418.018584  1459.585941     369.178108
    80  10496.0  1409.964349  1466.254556     370.470747
    81  10624.0  1406.021923  1462.227946     370.868252
    82  10752.0  1400.816993  1470.033589     371.795838
    83  10880.0  1395.418754  1478.348887     371.071611
    84  11008.0  1421.838860  1477.698409     372.261941
    85  11136.0  1419.704169  1483.373692     373.290036
    86  11264.0  1412.514435  1484.927949     373.023611
    87  11392.0  1424.073202  1488.392225     373.401429
    88  11520.0  1414.777852  1494.835627     373.530645
    89  11648.0  1422.178240  1499.118780     374.188727
    90  11776.0  1434.980053  1503.212634     374.677611
    91  11904.0  1429.804489  1506.363704     375.089262
    92  12032.0  1411.998487  1510.366938     375.765677
    93  12160.0  1416.275218  1515.734997     375.837365
    94  12288.0  1420.592912  1419.918484     375.812623
    95  12416.0  1439.679801  1394.166961     374.059524
    96  12544.0  1443.989678  1390.897404     375.538121
    97  12672.0  1436.988018  1389.462527     375.519490




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.149 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_


.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   479.116468   704.566362     208.691021
    1     384.0   657.770724   836.471457     262.639642
    2     512.0   815.165225   931.386162     303.789193
    3     640.0   920.395286   930.618855     332.650519
    4     768.0   989.660731   979.238448     349.353993
    5     896.0  1043.797990  1041.814978     355.301216
    6    1024.0  1073.344301  1076.673913     354.207515
    7    1152.0  1091.455159  1077.427994     348.379450
    8    1280.0  1137.303578  1101.745834     348.304042
    9    1408.0  1169.162071  1129.217653     340.230781
    10   1536.0  1193.275036  1155.002037     333.038719
    11   1664.0  1218.100188  1190.661878     330.588317
    12   1792.0  1237.828933  1194.114937     326.194333
    13   1920.0  1256.063822  1224.942333     324.622211
    14   2048.0  1275.105948  1251.742219     324.694306
    15   2176.0  1239.821841   959.764728     325.597041
    16   2304.0  1260.769846  1000.064873     326.295988
    17   2432.0  1277.417811  1039.646929     326.385910
    18   2560.0  1288.888895  1071.462883     327.926646
    19   2688.0  1299.097471  1096.549912     329.366919
    20   2816.0  1310.809067  1120.983238     329.015536
    21   2944.0  1319.841777  1146.790222     331.280197
    22   3072.0  1322.647230  1174.816372     333.753567
    23   3200.0  1337.964357  1174.696815     335.017692
    24   3328.0  1344.150605  1199.312207     336.427104
    25   3456.0  1351.160780  1224.443722     336.547767
    26   3584.0  1363.411778  1248.006097     338.060751
    27   3712.0  1367.418297  1268.383946     340.526573
    28   3840.0  1368.389855  1284.188727     340.448327
    29   3968.0  1375.283009  1300.555562     341.007401
    30   4096.0  1387.911154  1314.080855     338.823529
    31   4224.0  1324.101111  1277.389711     342.833625
    32   4352.0  1343.346658  1298.971946     345.327705
    33   4480.0  1345.236434  1317.825176     345.548040
    34   4608.0  1358.087963  1334.132589     347.100270
    35   4736.0  1362.299552  1347.328473     348.477942
    36   4864.0  1367.320900  1354.078844     349.109889
    37   4992.0  1366.944807  1370.334408     350.623355
    38   5120.0  1381.222024  1386.933100     351.119474
    39   5248.0  1375.963968  1358.003526     351.198671
    40   5376.0  1380.864324  1358.248602     351.403916
    41   5504.0  1382.969536  1375.907342     353.590215
    42   5632.0  1390.656079  1386.154658     353.064453
    43   5760.0  1390.761395  1407.178162     355.046784
    44   5888.0  1391.230472  1415.761677     355.255180
    45   6016.0  1400.383164  1413.904037     356.568809
    46   6144.0  1410.205718  1434.910069     357.269577
    47   6272.0  1412.306848  1389.539965     357.788871
    48   6400.0  1415.381932  1407.104503     358.808644
    49   6528.0  1416.934608  1421.626575     359.162708
    50   6656.0  1411.839972  1427.397836     359.357478
    51   6784.0  1415.338840  1427.447517     360.477715
    52   6912.0  1418.377524  1444.877384     360.395025
    53   7040.0  1421.399412  1447.087354     360.897114
    54   7168.0  1422.405143  1463.495295     361.586480
    55   7296.0  1426.278773  1085.860586     362.836481
    56   7424.0  1430.404740  1096.711420     363.240165
    57   7552.0  1428.666147  1108.051781     363.295251
    58   7680.0  1432.335927  1126.435704     363.722111
    59   7808.0  1431.795752  1130.531240     364.498597
    60   7936.0  1433.694311  1139.925524     364.618457
    61   8064.0  1434.645751  1145.040105     364.546842
    62   8192.0  1430.366880  1151.582103     363.798244
    63   8320.0  1380.650380  1116.650103     361.827708
    64   8448.0  1388.537504  1122.493072     362.817966
    65   8576.0  1388.669748  1128.581979     363.344810
    66   8704.0  1381.909274  1131.270371     364.382692
    67   8832.0  1397.870509  1133.531083     365.450181
    68   8960.0  1388.317003  1138.823525     365.430181
    69   9088.0  1396.624277  1139.875099     366.911283
    70   9216.0  1404.210705  1145.327345     367.814206
    71   9344.0  1389.811420  1421.421101     367.586546
    72   9472.0  1398.590070  1426.484894     368.461744
    73   9600.0  1402.180773  1431.661413     368.367630
    74   9728.0  1399.973057  1442.378550     369.759008
    75   9856.0  1399.073722  1434.477752     369.360522
    76   9984.0  1397.062875  1446.538470     370.085648
    77  10112.0  1407.608530  1452.896170     370.892055
    78  10240.0  1415.514071  1462.805318     371.232707
    79  10368.0  1417.297793  1463.996259     370.272382
    80  10496.0  1408.953819  1465.259693     370.964429
    81  10624.0  1408.896836  1463.301878     370.384282
    82  10752.0  1394.110185  1468.006387     371.060730
    83  10880.0  1395.827044  1479.382308     371.917247
    84  11008.0  1421.382802  1474.987381     372.359213
    85  11136.0  1417.350222  1480.273635     373.001427
    86  11264.0  1408.047219  1482.880400     373.099059
    87  11392.0  1421.444863  1488.505047     373.803147
    88  11520.0  1415.378320  1495.621294     373.883057
    89  11648.0  1422.872763  1500.158364     374.109197
    90  11776.0  1433.606806  1499.828847     374.824019
    91  11904.0  1432.870545  1504.370091     375.574923
    92  12032.0  1419.520273  1507.218203     375.699411
    93  12160.0  1413.409402  1515.454045     374.954057
    94  12288.0  1424.858435  1420.795095     375.737258
    95  12416.0  1437.253522  1392.855397     374.584103
    96  12544.0  1443.771382  1394.128240     374.644342
    97  12672.0  1436.073939  1391.061353     374.676215




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.058 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

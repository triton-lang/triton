
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   479.543573   687.163316     207.119514
    1     384.0   669.036044   817.410377     263.688796
    2     512.0   818.380274   933.690036     304.241254
    3     640.0   912.436096   934.271351     330.532735
    4     768.0   988.828267   990.273300     350.988027
    5     896.0  1049.745978  1037.594068     355.408052
    6    1024.0  1087.052991  1066.442789     354.372075
    7    1152.0  1101.493424  1077.859827     350.555909
    8    1280.0  1139.671283  1114.132012     349.488050
    9    1408.0  1162.437793  1139.232640     340.860528
    10   1536.0  1187.092880  1156.225976     333.310235
    11   1664.0  1208.472351  1183.494339     330.625962
    12   1792.0  1226.395279  1194.309015     325.985958
    13   1920.0  1253.432684  1226.003438     325.047394
    14   2048.0  1275.339629  1244.386585     324.460168
    15   2176.0  1232.256127   963.601662     325.503896
    16   2304.0  1255.399829  1004.419533     326.535844
    17   2432.0  1271.775685  1035.217506     327.306757
    18   2560.0  1285.112084  1072.606366     328.629373
    19   2688.0  1300.035394  1100.201741     329.450521
    20   2816.0  1312.669649  1125.941796     330.237896
    21   2944.0  1318.010326  1146.711487     332.169837
    22   3072.0  1325.669695  1169.989374     333.433041
    23   3200.0  1336.589489  1175.142321     335.180267
    24   3328.0  1349.390346  1203.638861     336.578131
    25   3456.0  1355.433935  1220.480824     337.073592
    26   3584.0  1358.564032  1241.926664     338.266391
    27   3712.0  1367.025491  1261.795186     340.866906
    28   3840.0  1375.376876  1283.216060     340.281955
    29   3968.0  1377.581537  1299.696478     341.236508
    30   4096.0  1385.470080  1315.957007     338.663030
    31   4224.0  1329.362840  1276.241442     343.224378
    32   4352.0  1342.231758  1301.596905     345.176686
    33   4480.0  1346.640249  1322.509221     346.076071
    34   4608.0  1361.582414  1337.832093     347.084241
    35   4736.0  1356.661717  1348.627344     347.871960
    36   4864.0  1364.248480  1359.643211     349.001038
    37   4992.0  1365.630907  1377.038548     350.148863
    38   5120.0  1379.972399  1384.787189     350.729877
    39   5248.0  1374.160217  1355.111828     351.938564
    40   5376.0  1378.409248  1367.264475     351.846850
    41   5504.0  1382.377347  1376.061605     353.694200
    42   5632.0  1396.661336  1393.597448     353.083021
    43   5760.0  1393.763584  1403.752165     354.893318
    44   5888.0  1396.397206  1408.962762     354.948442
    45   6016.0  1398.850814  1424.707329     356.768910
    46   6144.0  1408.423866  1431.949992     357.260303
    47   6272.0  1413.502946  1391.582747     357.909080
    48   6400.0  1410.303366  1411.139349     358.742917
    49   6528.0  1415.714283  1414.139493     359.236458
    50   6656.0  1415.151650  1424.501474     359.631911
    51   6784.0  1418.662322  1441.037080     360.210856
    52   6912.0  1422.118421  1439.656549     360.739430
    53   7040.0  1420.124438  1454.298989     360.829852
    54   7168.0  1420.854789  1454.447476     361.787233
    55   7296.0  1424.286858  1086.064323     362.401486
    56   7424.0  1431.508711  1094.802041     363.065718
    57   7552.0  1427.744311  1110.446282     364.043183
    58   7680.0  1433.348751  1125.709821     363.903144
    59   7808.0  1432.637335  1133.153118     364.935420
    60   7936.0  1433.491630  1138.587068     364.818867
    61   8064.0  1434.529324  1145.587540     364.763810
    62   8192.0  1433.093986  1148.671989     364.294856
    63   8320.0  1382.678612  1117.348310     361.649790
    64   8448.0  1388.217475  1125.640468     362.672390
    65   8576.0  1387.545892  1128.390999     363.686805
    66   8704.0  1384.850227  1134.885542     364.654660
    67   8832.0  1394.154247  1133.469032     365.267494
    68   8960.0  1388.001968  1138.692701     365.883182
    69   9088.0  1396.608248  1138.157857     366.960252
    70   9216.0  1406.315536  1144.498959     367.765220
    71   9344.0  1389.467216  1421.770346     367.962763
    72   9472.0  1398.557326  1430.140089     368.587202
    73   9600.0  1406.492395  1432.897279     369.298023
    74   9728.0  1400.264705  1439.183799     369.989843
    75   9856.0  1401.519761  1442.705200     370.505672
    76   9984.0  1395.586426  1449.279094     370.434292
    77  10112.0  1407.214275  1452.978954     371.313219
    78  10240.0  1411.647018  1465.224188     371.752439
    79  10368.0  1410.980251  1464.056703     370.112489
    80  10496.0  1409.580357  1466.915150     370.350860
    81  10624.0  1409.353330  1466.633600     371.077329
    82  10752.0  1394.822774  1470.786366     371.987892
    83  10880.0  1393.881602  1476.086495     371.983475
    84  11008.0  1422.676916  1476.058675     373.001593
    85  11136.0  1419.776820  1483.418103     373.112378
    86  11264.0  1414.330915  1486.395921     373.019174
    87  11392.0  1417.883455  1488.083445     374.222159
    88  11520.0  1414.801772  1498.786286     374.138967
    89  11648.0  1427.215983  1502.123743     374.968163
    90  11776.0  1435.429503  1504.610808     375.361838
    91  11904.0  1427.285359  1510.450748     376.189793
    92  12032.0  1416.960825  1509.446553     376.726935
    93  12160.0  1413.153170  1513.021955     376.693707
    94  12288.0  1427.902791  1420.829077     376.648127
    95  12416.0  1438.599459  1396.276409     375.296182
    96  12544.0  1443.537739  1392.666889     376.224479
    97  12672.0  1432.992998  1390.299424     375.246767




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.112 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

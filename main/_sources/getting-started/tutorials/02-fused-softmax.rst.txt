
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   473.135303   707.403018     208.318092
    1     384.0   667.912070   830.325272     263.902667
    2     512.0   818.446008   919.985822     303.362464
    3     640.0   900.828688   914.522584     330.764400
    4     768.0   989.787775   988.541448     350.587034
    5     896.0  1050.952617  1043.154328     356.183977
    6    1024.0  1078.022534  1073.598212     356.118607
    7    1152.0  1099.099406  1076.262954     350.310619
    8    1280.0  1138.250544  1114.372907     349.768280
    9    1408.0  1171.028993  1141.398482     341.769715
    10   1536.0  1198.829287  1166.418075     333.424814
    11   1664.0  1209.719731  1185.076079     330.030310
    12   1792.0  1234.543386  1191.400754     326.044606
    13   1920.0  1262.055013  1220.927921     324.354042
    14   2048.0  1275.882869  1252.132574     325.109369
    15   2176.0  1230.406256   964.093157     326.042179
    16   2304.0  1254.383425  1004.314885     326.152564
    17   2432.0  1280.969453  1039.413152     326.583956
    18   2560.0  1289.868613  1072.211910     328.460444
    19   2688.0  1298.899317  1097.849535     329.083980
    20   2816.0  1312.743448  1126.765430     329.504282
    21   2944.0  1314.907892  1147.750350     332.060256
    22   3072.0  1316.937104  1170.450427     333.707048
    23   3200.0  1337.499207  1174.857262     335.207136
    24   3328.0  1350.197583  1203.673144     336.093375
    25   3456.0  1348.849104  1225.556159     337.550156
    26   3584.0  1364.587396  1245.683146     338.281660
    27   3712.0  1370.197701  1269.114579     340.992741
    28   3840.0  1374.910992  1282.203773     340.729637
    29   3968.0  1374.191321  1296.798956     340.767690
    30   4096.0  1391.824739  1319.108211     338.844745
    31   4224.0  1329.161506  1276.076611     343.125708
    32   4352.0  1346.983960  1301.051471     345.900649
    33   4480.0  1348.236330  1315.030486     345.764348
    34   4608.0  1358.656710  1332.598224     347.024157
    35   4736.0  1360.258885  1343.985907     348.177111
    36   4864.0  1365.504921  1359.085515     349.084383
    37   4992.0  1367.489019  1373.354319     350.282184
    38   5120.0  1378.375592  1386.944299     350.977817
    39   5248.0  1375.636994  1359.469301     351.552128
    40   5376.0  1378.186279  1364.599062     351.651281
    41   5504.0  1378.539756  1387.088623     353.614623
    42   5632.0  1398.387405  1395.736674     352.954865
    43   5760.0  1398.430813  1412.429888     354.995614
    44   5888.0  1390.712898  1413.265080     354.674682
    45   6016.0  1398.550496  1428.826672     356.671159
    46   6144.0  1409.264806  1438.885858     357.010076
    47   6272.0  1407.670913  1401.292093     358.047883
    48   6400.0  1414.660493  1408.960156     358.645911
    49   6528.0  1412.257190  1424.212178     359.291790
    50   6656.0  1417.553783  1420.882203     359.436177
    51   6784.0  1420.223778  1442.594938     360.321232
    52   6912.0  1423.470640  1445.853802     360.619962
    53   7040.0  1419.384656  1453.901943     361.025640
    54   7168.0  1422.523949  1469.466280     361.750716
    55   7296.0  1429.188275  1088.879991     362.525082
    56   7424.0  1427.852801  1101.752513     363.067256
    57   7552.0  1431.811379  1113.802720     363.532068
    58   7680.0  1433.579398  1123.654962     363.875978
    59   7808.0  1430.133348  1134.661782     364.548595
    60   7936.0  1431.705805  1142.719078     364.937394
    61   8064.0  1432.523773  1146.702904     365.067098
    62   8192.0  1432.140617  1151.956225     364.379998
    63   8320.0  1382.145893  1118.787095     362.031606
    64   8448.0  1385.787764  1125.242121     362.725475
    65   8576.0  1385.343954  1130.272532     363.593113
    66   8704.0  1381.742487  1134.972991     364.605587
    67   8832.0  1395.454699  1131.460519     365.044952
    68   8960.0  1386.840625  1141.803213     366.105653
    69   9088.0  1396.367032  1137.493559     366.822282
    70   9216.0  1402.764938  1144.878342     367.845384
    71   9344.0  1391.699490  1422.901565     367.832307
    72   9472.0  1398.752174  1432.872954     369.001893
    73   9600.0  1402.285966  1431.427799     369.230769
    74   9728.0  1397.715325  1440.500551     370.020939
    75   9856.0  1398.995423  1442.574319     369.970147
    76   9984.0  1389.520312  1450.316556     370.680527
    77  10112.0  1405.528954  1453.717306     371.584159
    78  10240.0  1416.349880  1469.187221     371.772181
    79  10368.0  1419.179915  1459.027792     370.450203
    80  10496.0  1408.750269  1464.097337     370.124621
    81  10624.0  1405.150411  1469.391410     371.038436
    82  10752.0  1396.201739  1471.841948     371.657506
    83  10880.0  1394.294239  1479.254552     372.162383
    84  11008.0  1422.363955  1477.599143     372.948347
    85  11136.0  1418.714582  1488.566630     373.601345
    86  11264.0  1408.406648  1487.823440     373.636954
    87  11392.0  1425.757443  1488.233436     374.407706
    88  11520.0  1414.443060  1493.014644     373.821337
    89  11648.0  1421.029362  1500.106471     375.101345
    90  11776.0  1437.502759  1502.990248     375.489077
    91  11904.0  1428.075384  1510.278787     376.205036
    92  12032.0  1414.014133  1507.960400     375.938074
    93  12160.0  1411.706608  1513.761166     375.943644
    94  12288.0  1424.672189  1420.587026     376.331558
    95  12416.0  1434.434808  1394.319617     374.990675
    96  12544.0  1445.783030  1393.040302     375.336211
    97  12672.0  1436.900803  1393.660287     375.312712




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 36.285 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

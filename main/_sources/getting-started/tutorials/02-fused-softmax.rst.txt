
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   478.951531   695.011273     208.658628
    1     384.0   667.900797   819.110628     262.971774
    2     512.0   815.641850   931.724898     302.034219
    3     640.0   907.110101   926.430781     332.979877
    4     768.0   988.570468   978.157687     350.104808
    5     896.0  1043.395945  1034.367287     357.088380
    6    1024.0  1080.435196  1082.853383     354.317204
    7    1152.0  1100.940032  1077.486313     348.425976
    8    1280.0  1139.298686  1114.145427     349.331091
    9    1408.0  1161.260030  1129.713127     341.078587
    10   1536.0  1190.501383  1160.034499     333.311282
    11   1664.0  1218.600771  1193.535186     329.716117
    12   1792.0  1231.384730  1200.234539     325.952388
    13   1920.0  1258.768050  1216.360542     324.928440
    14   2048.0  1269.703087  1245.150634     324.410937
    15   2176.0  1233.625635   959.836884     326.414111
    16   2304.0  1259.544005   999.976498     326.241824
    17   2432.0  1276.515075  1032.067833     326.915612
    18   2560.0  1282.922379  1071.331514     327.865742
    19   2688.0  1296.197106  1096.719592     329.369500
    20   2816.0  1307.750602  1121.483570     329.243529
    21   2944.0  1317.203320  1139.968997     331.605315
    22   3072.0  1321.058697  1174.360605     333.457785
    23   3200.0  1340.613736  1174.963288     334.861492
    24   3328.0  1347.922382  1204.456951     335.859468
    25   3456.0  1350.972318  1225.087594     337.410936
    26   3584.0  1360.889161  1240.235309     338.167962
    27   3712.0  1367.129229  1265.442840     340.111669
    28   3840.0  1371.080595  1281.902720     340.795343
    29   3968.0  1375.269498  1300.646171     340.925457
    30   4096.0  1387.623537  1316.892971     338.737072
    31   4224.0  1328.202099  1279.743889     343.441715
    32   4352.0  1343.900729  1297.871533     345.142524
    33   4480.0  1343.631885  1319.384121     345.570441
    34   4608.0  1360.992715  1336.020473     346.708087
    35   4736.0  1354.192760  1341.360094     348.229441
    36   4864.0  1370.802122  1356.063403     349.044161
    37   4992.0  1367.529095  1369.245156     350.358475
    38   5120.0  1379.662671  1383.978594     350.969149
    39   5248.0  1372.963681  1355.266336     351.867203
    40   5376.0  1381.439447  1369.216546     351.813144
    41   5504.0  1384.757767  1382.959271     353.633061
    42   5632.0  1400.167685  1393.907221     352.799312
    43   5760.0  1390.902333  1407.842345     354.863520
    44   5888.0  1387.812838  1417.129009     354.888083
    45   6016.0  1400.039401  1414.275416     356.992546
    46   6144.0  1410.437342  1434.386637     357.200030
    47   6272.0  1407.141718  1389.854046     358.031330
    48   6400.0  1416.401464  1413.147003     358.525882
    49   6528.0  1412.099593  1424.848870     359.337912
    50   6656.0  1417.767842  1421.646283     359.417656
    51   6784.0  1416.613872  1438.793337     360.335035
    52   6912.0  1423.503681  1441.530776     360.831383
    53   7040.0  1417.515737  1445.099281     360.580785
    54   7168.0  1421.683979  1464.082299     362.033917
    55   7296.0  1429.577044  1085.656388     362.847682
    56   7424.0  1430.059293  1101.908258     363.065716
    57   7552.0  1432.711579  1109.217460     363.427284
    58   7680.0  1431.362468  1123.754331     363.746377
    59   7808.0  1427.919160  1131.342854     364.648638
    60   7936.0  1435.753232  1139.028480     364.513784
    61   8064.0  1432.989967  1147.154535     365.089752
    62   8192.0  1428.105137  1150.314962     364.138120
    63   8320.0  1382.256055  1116.796904     362.025317
    64   8448.0  1386.852265  1122.375557     362.509983
    65   8576.0  1387.922474  1129.196814     363.196570
    66   8704.0  1381.965869  1135.033680     364.471816
    67   8832.0  1394.664297  1132.383301     365.352131
    68   8960.0  1390.273350  1136.738226     365.945445
    69   9088.0  1395.086234  1138.148229     367.044865
    70   9216.0  1404.239584  1141.829103     367.476029
    71   9344.0  1385.932341  1422.185998     367.885553
    72   9472.0  1399.585812  1432.908956     368.694807
    73   9600.0  1405.116998  1432.041395     368.845658
    74   9728.0  1402.986591  1438.921773     369.540034
    75   9856.0  1399.759387  1441.347321     370.120184
    76   9984.0  1393.083619  1449.490106     370.523795
    77  10112.0  1409.112525  1455.838524     371.215602
    78  10240.0  1411.266985  1466.180611     371.696718
    79  10368.0  1419.877021  1462.415283     370.001533
    80  10496.0  1408.061828  1467.695304     370.426337
    81  10624.0  1408.731505  1469.158822     370.979435
    82  10752.0  1400.637920  1472.246455     371.403419
    83  10880.0  1392.640004  1478.009842     372.288427
    84  11008.0  1418.683663  1477.629069     373.148101
    85  11136.0  1419.996166  1484.141070     372.757569
    86  11264.0  1414.727655  1489.125362     373.663667
    87  11392.0  1421.441018  1489.995829     374.512119
    88  11520.0  1414.275727  1494.099159     374.297988
    89  11648.0  1419.840384  1500.042622     374.852816
    90  11776.0  1433.790482  1502.713854     374.850652
    91  11904.0  1426.164905  1510.301021     375.836307
    92  12032.0  1415.906287  1511.063338     376.389714
    93  12160.0  1413.878419  1518.031924     376.271705
    94  12288.0  1429.828885  1424.489193     376.665940
    95  12416.0  1439.820785  1396.049872     375.404152
    96  12544.0  1442.223505  1394.680274     376.427346
    97  12672.0  1436.243893  1393.722924     376.048462




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.009 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

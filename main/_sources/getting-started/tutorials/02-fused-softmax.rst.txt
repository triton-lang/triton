
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   473.304921   692.530980     207.130714
    1     384.0   656.526183   818.664051     262.613545
    2     512.0   804.970735   931.386162     301.482999
    3     640.0   903.062607   912.862149     331.211087
    4     768.0   987.659425   984.074051     350.836731
    5     896.0  1041.337979  1039.840804     354.632042
    6    1024.0  1074.963954  1086.144769     354.151770
    7    1152.0  1091.185890  1064.143935     348.056939
    8    1280.0  1123.851470  1112.736539     348.445889
    9    1408.0  1168.069289  1142.252583     340.982083
    10   1536.0  1188.977265  1166.150437     333.816830
    11   1664.0  1219.732814  1181.920359     329.039547
    12   1792.0  1229.100766  1200.792086     326.077020
    13   1920.0  1256.721069  1225.930290     324.388953
    14   2048.0  1276.693604  1251.308300     324.795057
    15   2176.0  1234.286934   964.122367     325.674207
    16   2304.0  1258.478390   999.239755     325.841228
    17   2432.0  1269.753894  1033.041109     326.852526
    18   2560.0  1289.982010  1071.106622     327.555753
    19   2688.0  1292.188763  1100.696950     329.412438
    20   2816.0  1311.043756  1121.464006     329.416925
    21   2944.0  1320.039821  1147.705954     331.823027
    22   3072.0  1326.219290  1175.249221     333.502805
    23   3200.0  1343.435457  1175.695424     335.454734
    24   3328.0  1346.797135  1204.250680     336.148689
    25   3456.0  1350.168556  1219.731220     337.409723
    26   3584.0  1357.751396  1242.787387     338.183461
    27   3712.0  1361.322196  1259.966630     340.486433
    28   3840.0  1372.274940  1276.082549     340.305839
    29   3968.0  1369.948651  1302.210837     340.865113
    30   4096.0  1389.235618  1312.744833     338.840687
    31   4224.0  1328.657932  1274.887193     343.155575
    32   4352.0  1343.798830  1296.518780     345.488949
    33   4480.0  1350.550652  1319.548231     345.575745
    34   4608.0  1362.242170  1330.720541     347.172803
    35   4736.0  1360.250482  1347.633600     348.507763
    36   4864.0  1368.971189  1355.381019     349.215715
    37   4992.0  1367.123188  1376.031114     349.934474
    38   5120.0  1378.664436  1385.416036     350.248580
    39   5248.0  1373.313128  1354.014100     351.512004
    40   5376.0  1379.112728  1362.667897     351.408670
    41   5504.0  1383.345136  1382.751704     353.102511
    42   5632.0  1391.367513  1394.979131     352.957717
    43   5760.0  1399.811785  1403.947297     355.074700
    44   5888.0  1389.473472  1409.904453     355.073861
    45   6016.0  1401.144154  1417.220109     356.433981
    46   6144.0  1411.851368  1431.051432     356.672368
    47   6272.0  1411.227642  1391.087909     357.497930
    48   6400.0  1413.793538  1418.149160     358.701337
    49   6528.0  1416.443478  1415.761104     358.693268
    50   6656.0  1414.031759  1423.637553     359.085315
    51   6784.0  1415.612046  1437.639119     360.095952
    52   6912.0  1422.734058  1441.262925     360.629149
    53   7040.0  1420.322708  1457.522118     361.253563
    54   7168.0  1422.389639  1456.804997     361.649192
    55   7296.0  1428.625250  1085.879016     362.772311
    56   7424.0  1427.721384  1097.765872     363.112743
    57   7552.0  1427.559410  1107.732783     363.532065
    58   7680.0  1437.370562  1118.671610     363.875976
    59   7808.0  1431.025293  1132.147901     364.516776
    60   7936.0  1432.432533  1139.746838     364.545636
    61   8064.0  1436.667628  1144.998897     364.693381
    62   8192.0  1431.343195  1149.773778     364.062038
    63   8320.0  1384.483296  1116.486061     362.455445
    64   8448.0  1386.144096  1127.035123     362.634899
    65   8576.0  1388.737743  1127.733945     363.490552
    66   8704.0  1382.804943  1136.094979     364.552068
    67   8832.0  1394.594788  1134.561511     365.169542
    68   8960.0  1382.025559  1140.283307     365.892075
    69   9088.0  1395.650548  1137.134111     366.929087
    70   9216.0  1407.309514  1143.350256     367.209488
    71   9344.0  1391.928148  1420.133332     367.680528
    72   9472.0  1398.728906  1432.288705     368.762092
    73   9600.0  1401.788602  1431.142381     369.133162
    74   9728.0  1397.199286  1438.268816     369.276120
    75   9856.0  1399.860693  1442.922975     370.057504
    76   9984.0  1394.448184  1450.443177     370.416398
    77  10112.0  1404.321515  1452.041303     370.635390
    78  10240.0  1413.987437  1467.518235     371.718910
    79  10368.0  1418.969106  1463.431819     370.165772
    80  10496.0  1406.954659  1463.369025     370.661837
    81  10624.0  1405.687897  1462.882305     370.535110
    82  10752.0  1394.829891  1468.433851     371.229770
    83  10880.0  1388.943996  1477.276998     371.207886
    84  11008.0  1420.510012  1476.127304     372.261941
    85  11136.0  1420.382036  1482.681896     372.863941
    86  11264.0  1417.649371  1488.446255     372.890542
    87  11392.0  1418.195233  1488.659827     374.270737
    88  11520.0  1416.144058  1494.885415     373.388626
    89  11648.0  1421.216361  1498.160140     374.480637
    90  11776.0  1430.395904  1501.646763     375.046072
    91  11904.0  1428.875157  1510.203006     375.565999
    92  12032.0  1416.026349  1510.102241     375.725915
    93  12160.0  1414.541579  1513.269932     375.465871
    94  12288.0  1430.846027  1418.362064     376.052228
    95  12416.0  1435.894471  1393.463292     374.681248
    96  12544.0  1444.755770  1393.008287     375.516164
    97  12672.0  1434.736783  1389.874867     375.387475




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.965 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

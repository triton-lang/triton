
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   477.826571   690.119949     205.842736
    1     384.0   654.593370   818.217960     261.360754
    2     512.0   802.278016   932.611061     299.703653
    3     640.0   918.091057   915.988388     330.901981
    4     768.0   989.046781   988.421982     348.016244
    5     896.0  1043.734470  1031.393258     355.014151
    6    1024.0  1073.659178  1067.725688     354.175360
    7    1152.0  1097.626804  1076.524117     349.010383
    8    1280.0  1132.330480  1102.808719     350.412916
    9    1408.0  1170.170171  1140.630858     340.871156
    10   1536.0  1197.443806  1155.684163     332.755932
    11   1664.0  1219.556747  1181.067266     329.183537
    12   1792.0  1228.022747  1191.495678     325.065967
    13   1920.0  1254.367758  1223.736288     324.552491
    14   2048.0  1272.784953  1243.059185     324.386611
    15   2176.0  1238.668751   963.305692     326.154552
    16   2304.0  1257.886245  1002.744614     326.367908
    17   2432.0  1271.990567  1030.608862     327.289753
    18   2560.0  1282.976748  1067.763829     328.262949
    19   2688.0  1296.956369  1102.054703     328.981035
    20   2816.0  1313.540925  1123.182577     329.928815
    21   2944.0  1313.888451  1138.739850     330.970297
    22   3072.0  1318.349760  1169.512236     332.852419
    23   3200.0  1342.151708  1173.870655     334.592752
    24   3328.0  1343.109379  1195.768988     336.128887
    25   3456.0  1349.174094  1221.361236     336.732985
    26   3584.0  1362.821496  1242.930172     338.516580
    27   3712.0  1370.028481  1265.388862     340.744803
    28   3840.0  1370.211472  1279.532323     340.795342
    29   3968.0  1377.266273  1299.339304     340.908035
    30   4096.0  1386.768578  1316.032144     338.863441
    31   4224.0  1327.687102  1275.965943     343.001688
    32   4352.0  1341.490988  1302.074261     344.972533
    33   4480.0  1343.281051  1317.342701     345.070109
    34   4608.0  1361.913585  1331.447210     346.906121
    35   4736.0  1357.262416  1339.940328     347.985665
    36   4864.0  1364.681604  1356.489431     349.181058
    37   4992.0  1373.938144  1376.290774     350.291785
    38   5120.0  1379.419891  1387.373319     350.718077
    39   5248.0  1372.852944  1355.114029     352.009954
    40   5376.0  1374.956037  1369.849292     351.732696
    41   5504.0  1377.909373  1383.560079     353.783595
    42   5632.0  1396.824363  1385.629969     353.366441
    43   5760.0  1389.632423  1406.328293     354.884023
    44   5888.0  1390.351416  1416.068438     354.748881
    45   6016.0  1401.253331  1422.958726     356.359638
    46   6144.0  1409.632161  1423.428937     356.787950
    47   6272.0  1407.694067  1396.615002     357.862834
    48   6400.0  1412.629585  1410.599022     358.650530
    49   6528.0  1411.459449  1424.107678     359.397890
    50   6656.0  1417.000272  1424.622773     359.477853
    51   6784.0  1415.193930  1430.051283     360.105141
    52   6912.0  1422.027891  1441.812241     360.845181
    53   7040.0  1419.431673  1448.143749     360.539564
    54   7168.0  1425.616785  1462.541369     361.499862
    55   7296.0  1423.493243  1086.867638     362.278046
    56   7424.0  1427.514804  1098.857358     363.108194
    57   7552.0  1430.647657  1105.957084     363.181507
    58   7680.0  1433.375009  1120.505467     363.573085
    59   7808.0  1433.016810  1128.298909     364.484963
    60   7936.0  1434.871653  1139.643411     364.550187
    61   8064.0  1435.442532  1147.681277     364.971985
    62   8192.0  1431.000721  1153.192148     364.088888
    63   8320.0  1380.740983  1118.454646     362.123796
    64   8448.0  1385.522680  1122.545938     362.499970
    65   8576.0  1387.442349  1124.514389     363.312324
    66   8704.0  1381.432161  1133.863161     364.235730
    67   8832.0  1395.700385  1131.052251     365.485848
    68   8960.0  1384.190641  1141.031009     365.350356
    69   9088.0  1400.910310  1134.294410     366.871228
    70   9216.0  1407.306958  1145.525957     367.569412
    71   9344.0  1391.626789  1416.448251     367.599969
    72   9472.0  1401.358549  1433.414447     369.170986
    73   9600.0  1398.741603  1432.597913     369.356327
    74   9728.0  1401.027370  1436.344392     369.276119
    75   9856.0  1398.523836  1438.466446     369.126233
    76   9984.0  1394.091900  1452.066462     370.416397
    77  10112.0  1407.729461  1451.629640     371.291030
    78  10240.0  1411.416462  1461.928382     371.161133
    79  10368.0  1415.401972  1457.977572     369.350458
    80  10496.0  1404.011331  1468.862108     370.186698
    81  10624.0  1409.543857  1467.820353     371.317835
    82  10752.0  1405.383619  1470.309089     372.130943
    83  10880.0  1392.759557  1474.460866     371.074918
    84  11008.0  1420.313038  1475.899990     372.571618
    85  11136.0  1418.835278  1483.168529     372.934889
    86  11264.0  1414.958328  1488.127739     373.085742
    87  11392.0  1423.520636  1488.637710     374.359093
    88  11520.0  1413.194055  1493.044135     373.301934
    89  11648.0  1427.987822  1496.981001     374.246190
    90  11776.0  1430.102472  1501.248860     374.970545
    91  11904.0  1427.319906  1508.488248     375.401009
    92  12032.0  1413.765505  1508.768701     376.123913
    93  12160.0  1410.158360  1514.605627     375.766548
    94  12288.0  1427.150015  1421.455610     375.914641
    95  12416.0  1438.137077  1393.651011     374.328245
    96  12544.0  1446.048291  1391.111309     375.722664
    97  12672.0  1434.034558  1390.793451     375.084202




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.048 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

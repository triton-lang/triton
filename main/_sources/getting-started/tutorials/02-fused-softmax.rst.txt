
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   469.701102   703.399217     204.722897
    1     384.0   668.650026   814.048358     261.157175
    2     512.0   802.580915   929.390245     300.026915
    3     640.0   907.180595   916.874560     328.779124
    4     768.0   990.159474   977.610737     348.229053
    5     896.0  1048.703495  1038.133651     353.233664
    6    1024.0  1081.601159  1063.433249     353.626828
    7    1152.0  1090.566753  1072.630753     347.756891
    8    1280.0  1125.251763  1103.992681     349.217892
    9    1408.0  1167.494962  1138.411787     340.410758
    10   1536.0  1199.832631  1155.857538     332.036247
    11   1664.0  1215.555205  1189.167905     329.801801
    12   1792.0  1236.889788  1192.336218     325.120169
    13   1920.0  1254.265395  1226.009109     324.553013
    14   2048.0  1267.760110  1242.839746     323.741763
    15   2176.0  1234.631747   963.317791     325.087797
    16   2304.0  1256.990561  1003.239411     325.857998
    17   2432.0  1273.887812  1038.626768     326.189186
    18   2560.0  1283.818702  1066.761414     327.880912
    19   2688.0  1287.504410  1101.145453     328.561609
    20   2816.0  1311.907016  1125.059114     329.716603
    21   2944.0  1313.857692  1147.428187     330.777795
    22   3072.0  1326.712642  1173.098911     333.455642
    23   3200.0  1336.490430  1174.615570     334.907596
    24   3328.0  1349.322136  1199.507112     336.438566
    25   3456.0  1350.202245  1219.809419     336.775433
    26   3584.0  1358.506675  1244.376572     337.906780
    27   3712.0  1368.214539  1262.710083     340.187767
    28   3840.0  1371.095547  1282.935993     339.787452
    29   3968.0  1372.424454  1296.630777     340.860249
    30   4096.0  1385.416734  1318.611470     338.598365
    31   4224.0  1331.491625  1278.473367     342.655578
    32   4352.0  1340.422460  1295.814794     345.406902
    33   4480.0  1343.080085  1314.939049     345.983809
    34   4608.0  1361.306831  1329.724008     346.930998
    35   4736.0  1358.742053  1344.038020     348.115792
    36   4864.0  1362.606081  1357.214534     348.722718
    37   4992.0  1367.343567  1373.266562     350.383025
    38   5120.0  1378.833568  1386.112277     350.493107
    39   5248.0  1377.790514  1354.933003     351.684267
    40   5376.0  1377.853981  1366.708708     351.535856
    41   5504.0  1379.937883  1382.583110     353.628357
    42   5632.0  1392.708450  1396.420611     353.036602
    43   5760.0  1394.387046  1403.441365     354.693548
    44   5888.0  1391.764728  1402.000703     355.036691
    45   6016.0  1402.026504  1427.678027     356.756726
    46   6144.0  1407.160939  1432.643494     356.954519
    47   6272.0  1410.463061  1386.789272     357.336498
    48   6400.0  1411.193418  1417.641876     358.341376
    49   6528.0  1411.955044  1412.436778     359.238782
    50   6656.0  1413.975534  1435.831812     359.553726
    51   6784.0  1419.782625  1429.616951     360.302833
    52   6912.0  1424.710658  1452.367235     360.684283
    53   7040.0  1422.871153  1447.008570     360.966425
    54   7168.0  1425.374405  1453.974169     361.419420
    55   7296.0  1420.722102  1083.211970     362.287185
    56   7424.0  1428.439781  1094.535986     362.749172
    57   7552.0  1424.375224  1107.376750     363.354425
    58   7680.0  1431.926956  1123.301849     363.618098
    59   7808.0  1431.535173  1129.834273     364.180738
    60   7936.0  1431.432025  1140.502998     364.613905
    61   8064.0  1426.773603  1147.077602     364.935763
    62   8192.0  1429.551464  1150.351357     363.849751
    63   8320.0  1385.331553  1118.026660     361.582813
    64   8448.0  1385.457033  1121.614898     362.073456
    65   8576.0  1388.653494  1128.620493     363.512844
    66   8704.0  1382.272961  1133.370081     363.959944
    67   8832.0  1391.925960  1132.094247     365.387779
    68   8960.0  1384.300854  1139.750690     365.576618
    69   9088.0  1394.983903  1135.685766     366.755559
    70   9216.0  1405.484256  1140.346941     367.542724
    71   9344.0  1388.896471  1421.499669     367.506028
    72   9472.0  1396.968661  1432.428181     368.766311
    73   9600.0  1401.464958  1432.471390     368.309638
    74   9728.0  1398.044173  1440.218133     369.446057
    75   9856.0  1400.746135  1441.893424     370.061981
    76   9984.0  1391.078055  1448.222389     370.461138
    77  10112.0  1409.144166  1453.077672     370.613281
    78  10240.0  1407.515532  1464.649582     370.899562
    79  10368.0  1418.944131  1462.846902     369.903947
    80  10496.0  1409.399158  1467.200465     370.297603
    81  10624.0  1407.942335  1463.144655     370.149412
    82  10752.0  1394.588283  1472.590385     371.813695
    83  10880.0  1396.299272  1478.285966     371.961395
    84  11008.0  1417.784095  1477.339023     372.522920
    85  11136.0  1421.065516  1483.599443     373.050239
    86  11264.0  1412.784446  1488.031670     373.405603
    87  11392.0  1416.733466  1489.618017     373.539348
    88  11520.0  1414.865003  1495.596417     373.777258
    89  11648.0  1421.453576  1499.299929     374.219666
    90  11776.0  1435.683002  1500.853238     374.735275
    91  11904.0  1431.147436  1509.605432     375.206103
    92  12032.0  1415.529411  1509.724632     375.898277
    93  12160.0  1411.272856  1516.051959     375.992371
    94  12288.0  1424.059531  1418.596363     376.065549
    95  12416.0  1437.284316  1394.342851     374.354697
    96  12544.0  1445.331584  1393.755881     375.437137
    97  12672.0  1436.546398  1392.114599     375.211605




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.046 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

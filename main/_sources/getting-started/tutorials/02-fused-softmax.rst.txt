
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   471.927833   701.945713     208.204860
    1     384.0   667.543703   819.647163     262.413136
    2     512.0   816.437119   916.468928     301.580064
    3     640.0   915.798337   912.305101     332.201834
    4     768.0   974.303688   983.798093     350.672765
    5     896.0  1049.156447  1030.208429     353.330913
    6    1024.0  1075.408915  1072.802328     352.909638
    7    1152.0  1099.618800  1063.365586     347.990778
    8    1280.0  1128.305042  1112.658442     349.093563
    9    1408.0  1160.324776  1127.585824     340.265924
    10   1536.0  1195.268628  1166.006407     332.857782
    11   1664.0  1208.548949  1181.818164     329.788071
    12   1792.0  1238.685311  1194.057442     325.838456
    13   1920.0  1261.215697  1226.131238     324.796237
    14   2048.0  1269.603746  1243.901793     325.367841
    15   2176.0  1233.977002   960.218123     325.219702
    16   2304.0  1257.538052  1002.852789     325.866637
    17   2432.0  1268.360147  1034.559303     326.695763
    18   2560.0  1287.597280  1066.419994     327.354051
    19   2688.0  1298.169847  1094.840044     328.360802
    20   2816.0  1306.637774  1120.965439     329.021804
    21   2944.0  1316.353940  1143.839879     331.729229
    22   3072.0  1321.878281  1166.903969     333.233896
    23   3200.0  1342.506220  1168.276466     335.239572
    24   3328.0  1351.121497  1195.603690     336.393002
    25   3456.0  1354.160004  1217.993819     337.473654
    26   3584.0  1364.351443  1241.610236     338.172401
    27   3712.0  1361.012271  1262.798385     340.219035
    28   3840.0  1371.174820  1277.645355     339.909303
    29   3968.0  1375.191309  1299.169423     340.845002
    30   4096.0  1387.937789  1317.917895     338.247858
    31   4224.0  1330.851022  1274.451552     342.994718
    32   4352.0  1341.079704  1300.250192     345.358977
    33   4480.0  1349.045102  1317.567860     346.181239
    34   4608.0  1361.273095  1334.688927     347.028197
    35   4736.0  1363.849224  1345.768761     347.880244
    36   4864.0  1369.658550  1354.941651     349.312478
    37   4992.0  1371.118630  1371.364199     349.954066
    38   5120.0  1379.152630  1385.331045     350.400217
    39   5248.0  1368.468775  1354.135884     351.526336
    40   5376.0  1371.809744  1369.550789     351.532865
    41   5504.0  1381.624554  1383.059798     353.074384
    42   5632.0  1392.760142  1396.609065     353.239996
    43   5760.0  1392.404003  1404.037025     354.930510
    44   5888.0  1395.174534  1416.816516     355.138928
    45   6016.0  1401.448371  1424.355512     356.443276
    46   6144.0  1411.553582  1432.946972     356.843457
    47   6272.0  1408.957341  1393.605455     358.061771
    48   6400.0  1412.567923  1409.610656     358.295277
    49   6528.0  1412.687114  1423.146399     359.127335
    50   6656.0  1414.331373  1423.981984     359.425020
    51   6784.0  1420.332015  1433.439923     360.192467
    52   6912.0  1422.000386  1435.819975     360.693472
    53   7040.0  1421.354822  1453.208350     360.970980
    54   7168.0  1422.347625  1460.761037     361.727898
    55   7296.0  1421.980371  1086.471603     362.402556
    56   7424.0  1432.181823  1095.469226     363.171891
    57   7552.0  1429.318430  1108.000494     363.331663
    58   7680.0  1432.628447  1119.931742     363.604535
    59   7808.0  1428.285161  1127.754715     364.448611
    60   7936.0  1431.392217  1138.662306     364.377111
    61   8064.0  1434.804277  1144.743922     364.962928
    62   8192.0  1429.066139  1150.239469     363.692001
    63   8320.0  1380.800519  1117.794738     362.079026
    64   8448.0  1384.950047  1123.602198     362.597212
    65   8576.0  1386.538937  1126.310440     363.183218
    66   8704.0  1381.174153  1132.880199     364.418337
    67   8832.0  1392.159110  1131.903745     365.004925
    68   8960.0  1388.243643  1139.538377     365.909864
    69   9088.0  1397.946248  1134.349949     366.533327
    70   9216.0  1402.821130  1141.285475     367.213448
    71   9344.0  1388.717996  1422.292367     367.492612
    72   9472.0  1399.235853  1430.659572     368.677490
    73   9600.0  1400.838762  1433.419212     368.640000
    74   9728.0  1395.009114  1440.210697     369.479727
    75   9856.0  1401.692388  1442.139327     369.950105
    76   9984.0  1389.201020  1448.591569     370.658128
    77  10112.0  1404.018606  1453.264056     371.468627
    78  10240.0  1410.975355  1468.319647     371.384892
    79  10368.0  1417.528602  1461.926069     369.766528
    80  10496.0  1409.212254  1466.589881     370.439659
    81  10624.0  1410.558462  1466.285779     370.650531
    82  10752.0  1396.749689  1471.751109     371.702118
    83  10880.0  1396.722723  1479.642998     372.005556
    84  11008.0  1423.881896  1477.813858     372.660192
    85  11136.0  1419.874753  1484.952162     373.370037
    86  11264.0  1409.495119  1488.748603     373.472307
    87  11392.0  1420.082907  1487.352902     374.301657
    88  11520.0  1411.992246  1497.040145     374.351023
    89  11648.0  1416.541551  1498.913529     374.259451
    90  11776.0  1435.647283  1501.815155     375.041631
    91  11904.0  1433.370897  1509.853912     375.496703
    92  12032.0  1415.193741  1510.517655     376.629256
    93  12160.0  1415.890405  1513.305539     376.010095
    94  12288.0  1423.123347  1422.725365     376.476561
    95  12416.0  1439.135139  1397.738813     374.584104
    96  12544.0  1442.663490  1396.390260     375.643551
    97  12672.0  1436.778065  1393.204176     375.189634




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.967 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

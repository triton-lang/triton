
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   477.360978   687.056792     204.280647
    1     384.0   666.196493   830.032396     259.725219
    2     512.0   802.079988   914.441681     300.163962
    3     640.0   908.772139   932.733395     329.682724
    4     768.0   971.941824   984.618134     348.040084
    5     896.0  1051.553941  1030.274181     354.829585
    6    1024.0  1086.758360  1078.352452     353.877080
    7    1152.0  1099.557379  1078.103712     349.388181
    8    1280.0  1129.713382  1111.358146     348.878519
    9    1408.0  1167.782055  1130.943040     341.245209
    10   1536.0  1188.535800  1168.996152     332.205370
    11   1664.0  1207.120688  1179.297482     329.616851
    12   1792.0  1237.525384  1197.804915     325.525790
    13   1920.0  1260.335672  1226.229313     324.641900
    14   2048.0  1266.678576  1242.986264     324.924393
    15   2176.0  1232.287415   958.327604     325.987567
    16   2304.0  1259.412678  1004.955156     326.615080
    17   2432.0  1267.677784  1039.679588     327.203547
    18   2560.0  1282.791467  1067.561456     328.396501
    19   2688.0  1299.114219  1097.557692     329.369501
    20   2816.0  1308.872152  1123.584363     330.118713
    21   2944.0  1321.205852  1148.048648     331.273431
    22   3072.0  1321.788089  1173.252524     333.028159
    23   3200.0  1333.812739  1173.767086     334.597853
    24   3328.0  1351.278780  1203.558657     335.892109
    25   3456.0  1355.780843  1220.536450     336.763142
    26   3584.0  1357.315444  1244.159007     338.220111
    27   3712.0  1363.970039  1263.860719     340.699254
    28   3840.0  1377.306447  1279.520302     340.789518
    29   3968.0  1375.629879  1302.576879     341.343363
    30   4096.0  1391.042651  1316.107210     339.433591
    31   4224.0  1338.139328  1280.503107     343.476825
    32   4352.0  1337.285178  1298.140925     345.142495
    33   4480.0  1348.689551  1321.061206     345.431267
    34   4608.0  1360.569431  1335.037613     346.564661
    35   4736.0  1360.499669  1344.794414     348.039266
    36   4864.0  1363.973692  1356.385401     349.001218
    37   4992.0  1372.048727  1376.905586     349.879400
    38   5120.0  1378.199216  1385.604200     351.126165
    39   5248.0  1377.551075  1356.333478     352.194879
    40   5376.0  1380.417731  1371.088634     351.898993
    41   5504.0  1382.161095  1381.302678     354.047339
    42   5632.0  1393.850239  1400.694285     353.631688
    43   5760.0  1392.607447  1406.328295     354.911913
    44   5888.0  1391.183797  1412.821396     354.679319
    45   6016.0  1402.881672  1415.779514     356.341057
    46   6144.0  1408.687107  1420.795801     356.764427
    47   6272.0  1407.002648  1397.287500     358.131215
    48   6400.0  1415.265856  1416.570990     358.835352
    49   6528.0  1417.247468  1416.050848     359.088989
    50   6656.0  1412.992336  1423.825799     359.273451
    51   6784.0  1418.443183  1440.644576     360.330433
    52   6912.0  1426.445042  1449.031630     360.335394
    53   7040.0  1422.821059  1446.287485     361.149660
    54   7168.0  1425.023471  1463.057949     361.490745
    55   7296.0  1424.259607  1085.043553     362.502129
    56   7424.0  1429.202767  1097.641622     362.490572
    57   7552.0  1425.009596  1109.779931     363.186053
    58   7680.0  1434.328825  1120.232335     363.866922
    59   7808.0  1432.128529  1134.110635     364.630443
    60   7936.0  1433.853738  1140.367204     364.504687
    61   8064.0  1435.757332  1145.327347     364.822620
    62   8192.0  1434.144093  1148.843523     363.957999
    63   8320.0  1382.341039  1116.846266     361.636392
    64   8448.0  1382.976243  1126.475714     362.323296
    65   8576.0  1388.756701  1126.662537     363.388050
    66   8704.0  1382.740839  1132.684277     364.516395
    67   8832.0  1396.502706  1131.910883     364.818236
    68   8960.0  1386.394071  1140.352458     365.874290
    69   9088.0  1394.711256  1137.024965     366.648078
    70   9216.0  1406.566878  1141.074830     367.573858
    71   9344.0  1388.782029  1415.767607     367.779081
    72   9472.0  1400.634619  1432.301139     369.161817
    73   9600.0  1403.651740  1432.846067     369.572802
    74   9728.0  1399.717419  1439.150779     369.790064
    75   9856.0  1401.592724  1436.063723     369.921439
    76   9984.0  1392.266846  1449.115491     370.693366
    77  10112.0  1403.610526  1456.321012     371.208037
    78  10240.0  1409.747310  1467.810387     371.576927
    79  10368.0  1416.332970  1462.746720     370.241283
    80  10496.0  1415.485534  1464.558133     370.466304
    81  10624.0  1407.349694  1464.742849     371.095665
    82  10752.0  1398.826902  1472.830750     371.405133
    83  10880.0  1392.545588  1479.671001     371.952565
    84  11008.0  1421.966301  1477.795569     372.872941
    85  11136.0  1423.028108  1489.315383     373.094622
    86  11264.0  1412.900408  1486.571172     372.890541
    87  11392.0  1423.118391  1489.579261     374.460754
    88  11520.0  1415.429225  1497.172902     373.526244
    89  11648.0  1423.353601  1501.161993     375.096903
    90  11776.0  1432.339337  1501.474783     375.633553
    91  11904.0  1429.766799  1508.650626     375.951116
    92  12032.0  1414.985548  1509.276325     376.869104
    93  12160.0  1414.077192  1514.284503     376.413746
    94  12288.0  1429.306774  1420.474487     376.706035
    95  12416.0  1436.945073  1395.519932     375.367097
    96  12544.0  1445.743473  1392.993440     376.087889
    97  12672.0  1436.713114  1391.753255     376.216277




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.985 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

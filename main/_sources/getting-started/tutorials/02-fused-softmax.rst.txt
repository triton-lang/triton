
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   477.039304   685.867368     204.078031
    1     384.0   667.298351   831.384476     261.221482
    2     512.0   815.930847   915.630154     304.128304
    3     640.0   908.908813   920.520272     330.014016
    4     768.0   977.688444   979.779727     350.206661
    5     896.0  1042.180638  1039.479368     353.519034
    6    1024.0  1069.423986  1066.379915     352.407383
    7    1152.0  1100.633640  1075.323750     347.723631
    8    1280.0  1129.582196  1113.122912     348.829283
    9    1408.0  1161.022189  1141.124213     340.041675
    10   1536.0  1186.718213  1155.671199     332.656689
    11   1664.0  1209.612633  1181.579813     328.399732
    12   1792.0  1234.436418  1197.937226     324.881849
    13   1920.0  1263.630852  1224.800676     324.906170
    14   2048.0  1267.544289  1252.051010     324.705599
    15   2176.0  1240.426063   959.932096     325.686344
    16   2304.0  1251.947232  1003.240029     325.876962
    17   2432.0  1275.755651  1033.831273     326.559215
    18   2560.0  1289.478774  1072.110702     327.708128
    19   2688.0  1291.629152  1102.136087     329.552193
    20   2816.0  1315.031553  1121.010553     329.241376
    21   2944.0  1325.895007  1142.481082     330.756686
    22   3072.0  1314.713517  1170.952705     333.494779
    23   3200.0  1340.827809  1173.838692     335.337415
    24   3328.0  1345.081970  1200.274193     336.201542
    25   3456.0  1352.568930  1224.457211     336.843972
    26   3584.0  1365.374391  1245.938232     337.822085
    27   3712.0  1362.335628  1267.946677     340.557544
    28   3840.0  1371.389307  1285.464008     340.666854
    29   3968.0  1376.541849  1300.908057     340.882588
    30   4096.0  1386.518794  1314.957494     338.957970
    31   4224.0  1329.547206  1274.794969     343.248102
    32   4352.0  1343.984829  1297.597011     345.262619
    33   4480.0  1340.779638  1319.198000     345.721829
    34   4608.0  1357.984025  1334.700421     347.140045
    35   4736.0  1355.963179  1348.386220     347.973619
    36   4864.0  1364.683467  1359.033407     349.322905
    37   4992.0  1366.634974  1373.081485     350.047114
    38   5120.0  1373.475404  1385.498757     350.659278
    39   5248.0  1369.729119  1355.335747     351.743579
    40   5376.0  1378.761355  1371.246566     351.641760
    41   5504.0  1378.460632  1382.590185     353.741245
    42   5632.0  1394.211895  1399.711925     352.920607
    43   5760.0  1395.885872  1402.982712     354.586786
    44   5888.0  1393.383942  1413.006733     354.837031
    45   6016.0  1403.369004  1423.182626     356.848082
    46   6144.0  1408.860433  1433.890802     357.241756
    47   6272.0  1403.707374  1400.502067     357.608708
    48   6400.0  1411.864355  1406.798342     358.244586
    49   6528.0  1411.018943  1412.197967     359.271299
    50   6656.0  1415.470383  1430.386567     359.830183
    51   6784.0  1422.214991  1437.938386     360.132712
    52   6912.0  1421.164384  1442.474788     360.812989
    53   7040.0  1416.855350  1460.024884     360.516668
    54   7168.0  1416.746615  1454.570454     361.495303
    55   7296.0  1425.359656  1089.033376     362.357195
    56   7424.0  1430.091780  1101.692625     362.930865
    57   7552.0  1431.052361  1110.553844     363.892439
    58   7680.0  1427.047151  1124.951846     363.572894
    59   7808.0  1429.826780  1130.647367     364.716878
    60   7936.0  1434.188456  1145.441967     364.792233
    61   8064.0  1434.693437  1152.601935     364.845241
    62   8192.0  1431.679183  1155.876944     364.232146
    63   8320.0  1382.751386  1116.403905     362.031605
    64   8448.0  1387.761811  1124.563222     362.643823
    65   8576.0  1384.632070  1127.726455     363.472722
    66   8704.0  1375.887781  1136.999288     364.631733
    67   8832.0  1392.732100  1135.036139     365.432349
    68   8960.0  1387.969205  1141.084604     365.847613
    69   9088.0  1396.481810  1137.355429     366.724388
    70   9216.0  1405.990899  1144.523639     367.591652
    71   9344.0  1389.871207  1420.865542     367.577598
    72   9472.0  1399.091716  1433.727455     368.771063
    73   9600.0  1402.612149  1426.984997     369.262151
    74   9728.0  1402.133185  1442.298085     370.145376
    75   9856.0  1401.293807  1438.958372     369.941158
    76   9984.0  1391.004788  1447.813807     370.689487
    77  10112.0  1405.484473  1455.009858     371.526384
    78  10240.0  1408.750396  1468.832128     371.613401
    79  10368.0  1417.178721  1458.356041     369.988223
    80  10496.0  1408.195748  1464.541501     370.830872
    81  10624.0  1404.296722  1465.027081     371.214583
    82  10752.0  1391.647383  1473.125894     371.488076
    83  10880.0  1391.968016  1480.954434     372.354786
    84  11008.0  1420.706723  1480.769687     372.935037
    85  11136.0  1415.142225  1484.369101     373.036925
    86  11264.0  1410.969609  1484.708009     372.797450
    87  11392.0  1420.598094  1489.473482     374.001510
    88  11520.0  1416.566985  1495.941011     373.785040
    89  11648.0  1419.769532  1498.787648     374.352317
    90  11776.0  1434.743872  1504.332702     375.834251
    91  11904.0  1433.176563  1506.706832     375.324934
    92  12032.0  1416.171313  1509.045470     375.571366
    93  12160.0  1410.595105  1516.035063     376.462598
    94  12288.0  1427.597849  1422.756417     376.461149
    95  12416.0  1438.798317  1398.342734     374.888950
    96  12544.0  1447.117027  1394.215884     375.727060
    97  12672.0  1439.985667  1393.246224     375.334701




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.059 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

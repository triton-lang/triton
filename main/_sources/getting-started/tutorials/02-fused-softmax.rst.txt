
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "getting-started/tutorials/02-fused-softmax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_getting-started_tutorials_02-fused-softmax.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_getting-started_tutorials_02-fused-softmax.py:


Fused Softmax
=============

In this tutorial, you will write a fused softmax operation that is significantly faster
than PyTorch's native op for a particular class of matrices: those whose rows can fit in
the GPU's SRAM.

In doing so, you will learn about:

* The benefits of kernel fusion for bandwidth-bound operations.

* Reduction operators in Triton.

.. GENERATED FROM PYTHON SOURCE LINES 18-23

Motivations
-----------

Custom GPU kernels for elementwise additions are educationally valuable but won't get you very far in practice.
Let us consider instead the case of a simple (numerically stabilized) softmax operation:

.. GENERATED FROM PYTHON SOURCE LINES 23-62

.. code-block:: Python


    import torch

    import triton
    import triton.language as tl
    from triton.runtime import driver

    DEVICE = triton.runtime.driver.active.get_active_torch_device()


    def is_hip():
        return triton.runtime.driver.active.get_current_target().backend == "hip"


    def is_cdna():
        return is_hip() and triton.runtime.driver.active.get_current_target().arch in ('gfx940', 'gfx941', 'gfx942',
                                                                                       'gfx90a', 'gfx908')


    def naive_softmax(x):
        """Compute row-wise softmax of X using native pytorch

        We subtract the maximum element in order to avoid overflows. Softmax is invariant to
        this shift.
        """
        # read  MN elements ; write M  elements
        x_max = x.max(dim=1)[0]
        # read MN + M elements ; write MN elements
        z = x - x_max[:, None]
        # read  MN elements ; write MN elements
        numerator = torch.exp(z)
        # read  MN elements ; write M  elements
        denominator = numerator.sum(dim=1)
        # read MN + M elements ; write MN elements
        ret = numerator / denominator[:, None]
        # in total: read 5MN + 2M elements ; wrote 3MN + 2M elements
        return ret









.. GENERATED FROM PYTHON SOURCE LINES 63-71

When implemented naively in PyTorch, computing :code:`y = naive_softmax(x)` for :math:`x \in R^{M \times N}`
requires reading :math:`5MN + 2M` elements from DRAM and writing back :math:`3MN + 2M` elements.
This is obviously wasteful; we'd prefer to have a custom "fused" kernel that only reads
X once and does all the necessary computations on-chip.
Doing so would require reading and writing back only :math:`MN` bytes, so we could
expect a theoretical speed-up of ~4x (i.e., :math:`(8MN + 4M) / 2MN`).
The `torch.jit.script` flags aims to perform this kind of "kernel fusion" automatically
but, as we will see later, it is still far from ideal.

.. GENERATED FROM PYTHON SOURCE LINES 73-82

Compute Kernel
--------------

Our softmax kernel works as follows: each program loads a set of rows of the input matrix X strided by number of programs,
normalizes it and writes back the result to the output Y.

Note that one important limitation of Triton is that each block must have a
power-of-two number of elements, so we need to internally "pad" each row and guard the
memory operations properly if we want to handle any possible input shapes:

.. GENERATED FROM PYTHON SOURCE LINES 82-112

.. code-block:: Python



    @triton.jit
    def softmax_kernel(output_ptr, input_ptr, input_row_stride, output_row_stride, n_rows, n_cols, BLOCK_SIZE: tl.constexpr,
                       num_stages: tl.constexpr):
        # starting row of the program
        row_start = tl.program_id(0)
        row_step = tl.num_programs(0)
        for row_idx in tl.range(row_start, n_rows, row_step, num_stages=num_stages):
            # The stride represents how much we need to increase the pointer to advance 1 row
            row_start_ptr = input_ptr + row_idx * input_row_stride
            # The block size is the next power of two greater than n_cols, so we can fit each
            # row in a single block
            col_offsets = tl.arange(0, BLOCK_SIZE)
            input_ptrs = row_start_ptr + col_offsets
            # Load the row into SRAM, using a mask since BLOCK_SIZE may be > than n_cols
            mask = col_offsets < n_cols
            row = tl.load(input_ptrs, mask=mask, other=-float('inf'))
            # Subtract maximum for numerical stability
            row_minus_max = row - tl.max(row, axis=0)
            # Note that exponentiation in Triton is fast but approximate (i.e., think __expf in CUDA)
            numerator = tl.exp(row_minus_max)
            denominator = tl.sum(numerator, axis=0)
            softmax_output = numerator / denominator
            # Write back output to DRAM
            output_row_start_ptr = output_ptr + row_idx * output_row_stride
            output_ptrs = output_row_start_ptr + col_offsets
            tl.store(output_ptrs, softmax_output, mask=mask)









.. GENERATED FROM PYTHON SOURCE LINES 113-114

We can create a helper function that enqueues the kernel and its (meta-)arguments for any given input tensor.

.. GENERATED FROM PYTHON SOURCE LINES 114-178

.. code-block:: Python


    properties = driver.active.utils.get_device_properties(DEVICE.index)
    NUM_SM = properties["multiprocessor_count"]
    NUM_REGS = properties["max_num_regs"]
    SIZE_SMEM = properties["max_shared_mem"]
    WARP_SIZE = properties["warpSize"]
    target = triton.runtime.driver.active.get_current_target()
    kernels = {}


    def softmax(x):
        n_rows, n_cols = x.shape

        # The block size of each loop iteration is the smallest power of two greater than the number of columns in `x`
        BLOCK_SIZE = triton.next_power_of_2(n_cols)

        # Another trick we can use is to ask the compiler to use more threads per row by
        # increasing the number of warps (`num_warps`) over which each row is distributed.
        # You will see in the next tutorial how to auto-tune this value in a more natural
        # way so you don't have to come up with manual heuristics yourself.
        num_warps = 8

        # Number of software pipelining stages.
        num_stages = 4 if SIZE_SMEM > 200000 else 2

        # Allocate output
        y = torch.empty_like(x)

        # pre-compile kernel to get register usage and compute thread occupancy.
        kernel = softmax_kernel.warmup(y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE=BLOCK_SIZE,
                                       num_stages=num_stages, num_warps=num_warps, grid=(1, ))
        kernel._init_handles()
        n_regs = kernel.n_regs
        size_smem = kernel.metadata.shared
        if is_hip():
            # NUM_REGS represents the number of regular purpose registers. On CDNA architectures this is half of all registers available.
            # However, this is not always the case. In most cases all registers can be used as regular purpose registers.
            # ISA SECTION (3.6.4 for CDNA3)
            # VGPRs are allocated out of two pools: regular VGPRs and accumulation VGPRs. Accumulation VGPRs are used
            # with matrix VALU instructions, and can also be loaded directly from memory. A wave may have up to 512 total
            # VGPRs, 256 of each type. When a wave has fewer than 512 total VGPRs, the number of each type is flexible - it is
            # not required to be equal numbers of both types.
            NUM_GPRS = NUM_REGS
            if is_cdna():
                NUM_GPRS = NUM_REGS * 2

            # MAX_NUM_THREADS represents maximum number of resident threads per multi-processor.
            # When we divide this number with WARP_SIZE we get maximum number of waves that can
            # execute on a CU (multi-processor)  in parallel.
            MAX_NUM_THREADS = properties["max_threads_per_sm"]
            max_num_waves = MAX_NUM_THREADS // WARP_SIZE
            occupancy = min(NUM_GPRS // WARP_SIZE // n_regs, max_num_waves) // num_warps
        else:
            occupancy = NUM_REGS // (n_regs * WARP_SIZE * num_warps)
        occupancy = min(occupancy, SIZE_SMEM // size_smem)
        num_programs = NUM_SM * occupancy

        num_programs = min(num_programs, n_rows)

        # Create a number of persistent programs.
        kernel[(num_programs, 1, 1)](y, x, x.stride(0), y.stride(0), n_rows, n_cols, BLOCK_SIZE, num_stages)
        return y









.. GENERATED FROM PYTHON SOURCE LINES 179-181

Unit Test
---------

.. GENERATED FROM PYTHON SOURCE LINES 183-185

We make sure that we test our kernel on a matrix with an irregular number of rows and columns.
This will allow us to verify that our padding mechanism works.

.. GENERATED FROM PYTHON SOURCE LINES 185-192

.. code-block:: Python


    torch.manual_seed(0)
    x = torch.randn(1823, 781, device=DEVICE)
    y_triton = softmax(x)
    y_torch = torch.softmax(x, axis=1)
    assert torch.allclose(y_triton, y_torch), (y_triton, y_torch)








.. GENERATED FROM PYTHON SOURCE LINES 193-194

As expected, the results are identical.

.. GENERATED FROM PYTHON SOURCE LINES 196-201

Benchmark
---------

Here we will benchmark our operation as a function of the number of columns in the input matrix -- assuming 4096 rows.
We will then compare its performance against (1) :code:`torch.softmax` and (2) the :code:`naive_softmax` defined above.

.. GENERATED FROM PYTHON SOURCE LINES 201-231

.. code-block:: Python



    @triton.testing.perf_report(
        triton.testing.Benchmark(
            x_names=['N'],  # argument names to use as an x-axis for the plot
            x_vals=[128 * i for i in range(2, 100)],  # different possible values for `x_name`
            line_arg='provider',  # argument name whose value corresponds to a different line in the plot
            line_vals=['triton', 'torch', 'naive_softmax'],  # possible values for `line_arg``
            line_names=["Triton", "Torch", "Naive Softmax"],  # label name for the lines
            styles=[('blue', '-'), ('green', '-'), ('red', '-')],  # line styles
            ylabel="GB/s",  # label name for the y-axis
            plot_name="softmax-performance",  # name for the plot. Used also as a file name for saving the plot.
            args={'M': 4096},  # values for function arguments not in `x_names` and `y_name`
        ))
    def benchmark(M, N, provider):
        x = torch.randn(M, N, device=DEVICE, dtype=torch.float32)
        stream = getattr(torch, DEVICE.type).Stream()
        getattr(torch, DEVICE.type).set_stream(stream)
        if provider == 'torch':
            ms = triton.testing.do_bench(lambda: torch.softmax(x, axis=-1))
        if provider == 'triton':
            ms = triton.testing.do_bench(lambda: softmax(x))
        if provider == 'naive_softmax':
            ms = triton.testing.do_bench(lambda: naive_softmax(x))
        gbps = lambda ms: 2 * x.numel() * x.element_size() * 1e-9 / (ms * 1e-3)
        return gbps(ms)


    benchmark.run(show_plots=True, print_data=True)




.. image-sg:: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :alt: 02 fused softmax
   :srcset: /getting-started/tutorials/images/sphx_glr_02-fused-softmax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    softmax-performance:
              N       Triton        Torch  Naive Softmax
    0     256.0   466.672813   692.624515     207.900968
    1     384.0   669.019616   821.710409     263.885571
    2     512.0   810.737772   924.036723     302.867896
    3     640.0   901.177008   912.235518     330.610825
    4     768.0   987.505246   991.972950     351.107372
    5     896.0  1041.674568  1035.403404     356.229111
    6    1024.0  1080.885512  1082.531680     354.289776
    7    1152.0  1099.803102  1076.277583     348.097824
    8    1280.0  1127.762516  1103.089423     348.813440
    9    1408.0  1156.852135  1136.302089     340.562967
    10   1536.0  1199.330749  1165.526941     333.809196
    11   1664.0  1219.829789  1193.654613     330.573303
    12   1792.0  1238.702062  1199.887041     325.605233
    13   1920.0  1253.603055  1217.667068     324.385118
    14   2048.0  1276.477132  1244.917241     324.085262
    15   2176.0  1234.024239   964.262226     326.343789
    16   2304.0  1253.432833  1004.007548     326.573576
    17   2432.0  1274.723216  1030.441790     327.146236
    18   2560.0  1282.287188  1070.442002     328.123178
    19   2688.0  1295.784741  1101.722998     329.116505
    20   2816.0  1307.210384  1124.790369     329.814577
    21   2944.0  1312.841232  1143.496904     331.604265
    22   3072.0  1326.927367  1173.713009     333.414306
    23   3200.0  1340.453467  1175.564923     335.024775
    24   3328.0  1344.921197  1203.918267     336.684008
    25   3456.0  1348.318563  1224.987570     337.336951
    26   3584.0  1366.610165  1243.053023     338.531767
    27   3712.0  1367.777097  1264.418330     340.449201
    28   3840.0  1374.108406  1278.360548     340.854887
    29   3968.0  1373.257582  1300.039429     341.238613
    30   4096.0  1383.479409  1318.098705     338.672834
    31   4224.0  1330.255043  1278.625223     342.821579
    32   4352.0  1338.615982  1302.246717     345.628421
    33   4480.0  1345.978688  1316.665833     345.896449
    34   4608.0  1356.526989  1334.903014     347.196990
    35   4736.0  1356.013995  1348.950656     347.900308
    36   4864.0  1370.010633  1362.312584     349.195656
    37   4992.0  1368.873596  1373.587521     350.296220
    38   5120.0  1377.619111  1384.595607     350.806408
    39   5248.0  1377.087311  1359.045676     351.445128
    40   5376.0  1377.136059  1372.143410     351.789290
    41   5504.0  1380.909674  1386.897569     353.821247
    42   5632.0  1387.787768  1399.496138     353.706217
    43   5760.0  1397.812068  1406.868630     355.260926
    44   5888.0  1390.775880  1413.078945     355.255179
    45   6016.0  1401.181342  1418.758396     356.796849
    46   6144.0  1410.946891  1434.758061     357.483119
    47   6272.0  1407.353524  1405.298025     357.895205
    48   6400.0  1412.018171  1407.487492     358.478334
    49   6528.0  1412.897555  1426.297112     359.264122
    50   6656.0  1416.919057  1423.362710     359.667840
    51   6784.0  1420.402743  1437.668871     360.072979
    52   6912.0  1420.652836  1455.127716     360.757816
    53   7040.0  1418.125281  1454.974087     361.198837
    54   7168.0  1423.148007  1460.666681     361.276666
    55   7296.0  1425.997217  1084.720395     362.474674
    56   7424.0  1429.270880  1100.347934     362.985411
    57   7552.0  1425.631091  1109.331879     363.641471
    58   7680.0  1433.530686  1122.716097     363.915269
    59   7808.0  1430.713640  1130.124633     364.453156
    60   7936.0  1435.728160  1143.675210     364.530416
    61   8064.0  1433.712984  1146.879999     365.012741
    62   8192.0  1434.841505  1153.376153     364.178410
    63   8320.0  1378.574831  1118.135530     361.931361
    64   8448.0  1381.309623  1125.412808     362.782229
    65   8576.0  1385.706842  1130.725034     363.419241
    66   8704.0  1386.390746  1134.048857     364.520853
    67   8832.0  1400.122641  1132.186725     365.374410
    68   8960.0  1385.736347  1139.384546     366.101199
    69   9088.0  1397.128351  1139.579733     367.173915
    70   9216.0  1406.362571  1144.672960     367.511597
    71   9344.0  1392.928475  1421.780315     367.403196
    72   9472.0  1402.266375  1432.215472     368.748542
    73   9600.0  1401.719727  1431.552796     369.204145
    74   9728.0  1400.795584  1441.159733     369.916429
    75   9856.0  1401.818203  1437.890736     370.173924
    76   9984.0  1397.277199  1451.888220     370.855327
    77  10112.0  1402.588214  1455.536697     371.344291
    78  10240.0  1408.701765  1465.448365     371.594668
    79  10368.0  1414.748235  1461.896596     369.319513
    80  10496.0  1409.517091  1467.421570     370.866477
    81  10624.0  1409.738514  1466.156715     370.943850
    82  10752.0  1392.598897  1468.966742     371.603985
    83  10880.0  1393.112241  1475.564266     370.826233
    84  11008.0  1420.338145  1476.824219     372.810862
    85  11136.0  1422.763922  1485.070223     373.036924
    86  11264.0  1414.730744  1486.497030     373.067987
    87  11392.0  1420.425945  1490.433687     374.664241
    88  11520.0  1416.756345  1495.110074     374.010968
    89  11648.0  1419.874222  1499.732555     374.480636
    90  11776.0  1435.382593  1504.382705     374.900168
    91  11904.0  1428.016056  1511.291463     375.534774
    92  12032.0  1412.849998  1510.225658     376.208043
    93  12160.0  1416.760716  1514.259640     375.691331
    94  12288.0  1429.545561  1419.868469     375.710665
    95  12416.0  1435.823715  1395.614348     374.465010
    96  12544.0  1443.586198  1394.873553     375.612795
    97  12672.0  1436.375896  1392.602401     375.554707




.. GENERATED FROM PYTHON SOURCE LINES 232-236

In the above plot, we can see that:
 - Triton is 4x faster than the Torch JIT. This confirms our suspicions that the Torch JIT does not do any fusion here.
 - Triton is noticeably faster than :code:`torch.softmax` -- in addition to being **easier to read, understand and maintain**.
   Note however that the PyTorch `softmax` operation is more general and will work on tensors of any shape.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 39.629 seconds)


.. _sphx_glr_download_getting-started_tutorials_02-fused-softmax.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 02-fused-softmax.ipynb <02-fused-softmax.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 02-fused-softmax.py <02-fused-softmax.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: 02-fused-softmax.zip <02-fused-softmax.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_

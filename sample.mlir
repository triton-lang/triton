// -----// IR Dump Before TritonAMDGPUInThreadTranspose (tritonamdgpu-in-thread-transpose) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [1, 1], order = [1, 0]}>
#loc = loc("/triton/threadRake_test.py":114:0)
#mma = #ttg.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [1, 1], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 1 : i32, ttg.target = "hip:gfx942", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/threadRake_test.py":114:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/threadRake_test.py":114:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/threadRake_test.py":114:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0)) attributes {noinline = false} {
    %cst = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c63_i32 = arith.constant 63 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.addi %arg3, %c63_i32 : i32 loc(#loc46)
    %2 = arith.divsi %1, %c64_i32 : i32 loc(#loc47)
    %3 = arith.addi %arg4, %c63_i32 : i32 loc(#loc48)
    %4 = arith.divsi %3, %c64_i32 : i32 loc(#loc49)
    %5 = arith.divsi %0, %4 : i32 loc(#loc7)
    %6 = arith.subi %2, %5 : i32 loc(#loc8)
    %7 = arith.minsi %6, %c1_i32 : i32 loc(#loc9)
    %8 = arith.remsi %0, %4 : i32 loc(#loc10)
    %9 = arith.remsi %8, %7 : i32 loc(#loc11)
    %10 = arith.addi %5, %9 : i32 loc(#loc12)
    %11 = arith.divsi %8, %7 : i32 loc(#loc13)
    %12 = arith.muli %10, %c64_i32 : i32 loc(#loc14)
    %13 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %14 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc15)
    %15 = tt.splat %12 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc16)
    %16 = arith.addi %15, %13 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc16)
    %17 = arith.muli %11, %c64_i32 : i32 loc(#loc17)
    %18 = tt.splat %17 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %19 = arith.addi %18, %14 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc18)
    %20 = tt.expand_dims %16 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc19)
    %21 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc20)
    %22 = arith.muli %20, %21 : tensor<64x1xi32, #blocked> loc(#loc20)
    %23 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc21)
    %24 = tt.expand_dims %23 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc21)
    %25 = tt.broadcast %22 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc22)
    %26 = tt.broadcast %24 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc22)
    %27 = arith.addi %25, %26 : tensor<64x64xi32, #blocked> loc(#loc22)
    %28 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc23)
    %29 = tt.addptr %28, %27 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc23)
    %30 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc24)
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc24)
    %32 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc25)
    %33 = arith.muli %31, %32 : tensor<64x1xi32, #blocked> loc(#loc25)
    %34 = tt.expand_dims %19 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc26)
    %35 = tt.broadcast %33 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc27)
    %36 = tt.broadcast %34 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc27)
    %37 = arith.addi %35, %36 : tensor<64x64xi32, #blocked> loc(#loc27)
    %38 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc28)
    %39 = tt.addptr %38, %37 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc28)
    %40 = arith.addi %arg5, %c63_i32 : i32 loc(#loc50)
    %41 = arith.divsi %40, %c64_i32 : i32 loc(#loc51)
    %42 = arith.muli %arg7, %c64_i32 : i32 loc(#loc30)
    %43 = tt.splat %42 : i32 -> tensor<64x64xi32, #blocked> loc(#loc31)
    %44 = ttg.local_alloc  : () -> !ttg.memdesc<1x64x64xf16, #shared, #smem, mutable> loc(#loc32)
    %45 = ttg.local_alloc  : () -> !ttg.memdesc<1x64x64xf16, #shared1, #smem, mutable> loc(#loc33)
    %46 = arith.cmpi sgt, %41, %c0_i32 : i32 loc(#loc34)
    %47 = tt.splat %46 : i1 -> tensor<64x64xi1, #blocked> loc(#loc34)
    %48 = tt.load %29, %47 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc32)
    %49 = tt.splat %46 : i1 -> tensor<64x64xi1, #blocked> loc(#loc34)
    %50 = tt.load %39, %49 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc33)
    %51 = ttg.memdesc_subview %44[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable> loc(#loc32)
    ttg.local_store %48, %51 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x64xf16, #blocked> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable> loc(#loc32)
    %52 = ttg.memdesc_subview %45[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc33)
    ttg.local_store %50, %52 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x64xf16, #blocked> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc33)
    %53 = arith.subi %41, %c1_i32 : i32 loc(#loc34)
    %54:6 = scf.for %arg9 = %c0_i32 to %53 step %c1_i32 iter_args(%arg10 = %cst_0, %arg11 = %29, %arg12 = %39, %arg13 = %c0_i32, %arg14 = %51, %arg15 = %52) -> (tensor<64x64xf32, #mma>, tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64x!tt.ptr<f16>, #blocked>, i32, !ttg.memdesc<64x64xf16, #shared, #smem, mutable>, !ttg.memdesc<64x64xf16, #shared1, #smem, mutable>)  : i32 {
      %76 = tt.addptr %arg11, %cst : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc35)
      %77 = tt.addptr %arg12, %43 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc31)
      %78 = tt.load %76 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc32)
      %79 = ttg.local_load %arg14 : !ttg.memdesc<64x64xf16, #shared, #smem, mutable> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc32)
      %80 = tt.load %77 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc33)
      %81 = ttg.local_load %arg15 : !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc33)
      %82 = tt.dot %79, %81, %arg10, inputPrecision = tf32 : tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc36)
      %83 = arith.addi %arg13, %c1_i32 : i32 loc(#loc34)
      %84 = arith.cmpi slt, %83, %c1_i32 : i32 loc(#loc34)
      %85 = arith.select %84, %83, %c0_i32 : i32 loc(#loc34)
      %86 = ttg.memdesc_subview %44[%85, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable> loc(#loc32)
      ttg.local_store %78, %86 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x64xf16, #blocked> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable> loc(#loc32)
      %87 = ttg.memdesc_subview %45[%85, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc33)
      ttg.local_store %80, %87 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x64xf16, #blocked> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc33)
      scf.yield %82, %76, %77, %85, %86, %87 : tensor<64x64xf32, #mma>, tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64x!tt.ptr<f16>, #blocked>, i32, !ttg.memdesc<64x64xf16, #shared, #smem, mutable>, !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc34)
    } loc(#loc34)
    %55 = arith.cmpi sge, %41, %c1_i32 : i32 loc(#loc34)
    %56 = ttg.local_load %54#4 : !ttg.memdesc<64x64xf16, #shared, #smem, mutable> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc32)
    %57 = ttg.local_load %54#5 : !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc33)
    %58 = scf.if %55 -> (tensor<64x64xf32, #mma>) {
      %76 = tt.dot %56, %57, %54#0, inputPrecision = tf32 : tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc36)
      scf.yield %76 : tensor<64x64xf32, #mma> loc(#loc36)
    } else {
      scf.yield %54#0 : tensor<64x64xf32, #mma> loc(#loc36)
    } loc(#loc36)
    %59 = arith.select %55, %58, %54#0 : tensor<64x64xf32, #mma> loc(#loc34)
    ttg.local_dealloc %44 : !ttg.memdesc<1x64x64xf16, #shared, #smem, mutable> loc(#loc34)
    ttg.local_dealloc %45 : !ttg.memdesc<1x64x64xf16, #shared1, #smem, mutable> loc(#loc34)
    %60 = arith.truncf %59 : tensor<64x64xf32, #mma> to tensor<64x64xf16, #mma> loc(#loc37)
    %61 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #blocked> loc(#loc38)
    %62 = arith.muli %61, %20 : tensor<64x1xi32, #blocked> loc(#loc38)
    %63 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #blocked> loc(#loc39)
    %64 = tt.addptr %63, %62 : tensor<64x1x!tt.ptr<f16>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc39)
    %65 = tt.broadcast %64 : tensor<64x1x!tt.ptr<f16>, #blocked> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc40)
    %66 = tt.addptr %65, %36 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc40)
    %67 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #blocked> loc(#loc41)
    %68 = arith.cmpi slt, %20, %67 : tensor<64x1xi32, #blocked> loc(#loc41)
    %69 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #blocked> loc(#loc42)
    %70 = arith.cmpi slt, %34, %69 : tensor<1x64xi32, #blocked> loc(#loc42)
    %71 = tt.broadcast %68 : tensor<64x1xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc43)
    %72 = tt.broadcast %70 : tensor<1x64xi1, #blocked> -> tensor<64x64xi1, #blocked> loc(#loc43)
    %73 = arith.andi %71, %72 : tensor<64x64xi1, #blocked> loc(#loc43)
    %74 = ttg.convert_layout %66 : tensor<64x64x!tt.ptr<f16>, #blocked> -> tensor<64x64x!tt.ptr<f16>, #mma> loc(#loc40)
    %75 = ttg.convert_layout %73 : tensor<64x64xi1, #blocked> -> tensor<64x64xi1, #mma> loc(#loc43)
    tt.store %74, %60, %75 : tensor<64x64x!tt.ptr<f16>, #mma> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/triton/threadRake_test.py":138:24)
#loc3 = loc("/triton/python/triton/language/standard.py":40:22)
#loc4 = loc("/triton/threadRake_test.py":139:27)
#loc5 = loc("/triton/python/triton/language/standard.py":40:28)
#loc6 = loc("/triton/threadRake_test.py":140:27)
#loc7 = loc("/triton/threadRake_test.py":142:22)
#loc8 = loc("/triton/threadRake_test.py":144:35)
#loc9 = loc("/triton/threadRake_test.py":144:48)
#loc10 = loc("/triton/threadRake_test.py":145:34)
#loc11 = loc("/triton/threadRake_test.py":145:54)
#loc12 = loc("/triton/threadRake_test.py":145:27)
#loc13 = loc("/triton/threadRake_test.py":146:40)
#loc14 = loc("/triton/threadRake_test.py":155:22)
#loc15 = loc("/triton/threadRake_test.py":155:50)
#loc16 = loc("/triton/threadRake_test.py":155:37)
#loc17 = loc("/triton/threadRake_test.py":156:22)
#loc18 = loc("/triton/threadRake_test.py":156:37)
#loc19 = loc("/triton/threadRake_test.py":158:30)
#loc20 = loc("/triton/threadRake_test.py":158:41)
#loc21 = loc("/triton/threadRake_test.py":158:60)
#loc22 = loc("/triton/threadRake_test.py":158:53)
#loc23 = loc("/triton/threadRake_test.py":158:22)
#loc24 = loc("/triton/threadRake_test.py":159:29)
#loc25 = loc("/triton/threadRake_test.py":159:40)
#loc26 = loc("/triton/threadRake_test.py":159:60)
#loc27 = loc("/triton/threadRake_test.py":159:52)
#loc28 = loc("/triton/threadRake_test.py":159:22)
#loc29 = loc("/triton/threadRake_test.py":167:33)
#loc30 = loc("/triton/threadRake_test.py":180:33)
#loc31 = loc("/triton/threadRake_test.py":180:18)
#loc32 = loc("/triton/threadRake_test.py":171:24)
#loc33 = loc("/triton/threadRake_test.py":172:24)
#loc34 = loc("/triton/threadRake_test.py":167:22)
#loc35 = loc("/triton/threadRake_test.py":179:18)
#loc36 = loc("/triton/threadRake_test.py":177:35)
#loc37 = loc("/triton/threadRake_test.py":185:23)
#loc38 = loc("/triton/threadRake_test.py":191:33)
#loc39 = loc("/triton/threadRake_test.py":191:21)
#loc40 = loc("/triton/threadRake_test.py":191:52)
#loc41 = loc("/triton/threadRake_test.py":192:33)
#loc42 = loc("/triton/threadRake_test.py":192:58)
#loc43 = loc("/triton/threadRake_test.py":192:39)
#loc44 = loc("/triton/threadRake_test.py":193:21)
#loc45 = loc("/triton/threadRake_test.py":193:4)
#loc46 = loc(callsite(#loc3 at #loc4))
#loc47 = loc(callsite(#loc5 at #loc4))
#loc48 = loc(callsite(#loc3 at #loc6))
#loc49 = loc(callsite(#loc5 at #loc6))
#loc50 = loc(callsite(#loc3 at #loc29))
#loc51 = loc(callsite(#loc5 at #loc29))

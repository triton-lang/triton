// -----// IR Dump Before TritonAMDGPUConvertToBufferOps (tritonamdgpu-convert-buffer-ops) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [8, 8], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/work/triton/g00.py":165:0)
#loc26 = loc("in_ptr"(#loc))
#loc27 = loc("out_ptr"(#loc))
#loc28 = loc("M"(#loc))
#loc29 = loc("K"(#loc))
#loc30 = loc("stride_m"(#loc))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "hip:gfx950", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @memcpy_kernel_v1(%in_ptr: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("in_ptr"(#loc)), %out_ptr: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("out_ptr"(#loc)), %M: i32 {tt.divisibility = 16 : i32} loc("M"(#loc)), %K: i32 {tt.divisibility = 16 : i32} loc("K"(#loc)), %stride_m: i32 {tt.divisibility = 16 : i32} loc("stride_m"(#loc))) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %true = arith.constant true loc(#loc2)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c31_i32 = arith.constant 31 : i32 loc(#loc31)
    %c1_i32 = arith.constant 1 : i32 loc(#loc5)
    %cst = arith.constant dense<32> : tensor<32x32xi32, #blocked> loc(#loc1)
    %pid = tt.get_program_id x : i32 loc(#loc32)
    %offs = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc33)
    %offs_0 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc34)
    %0 = arith.cmpi sgt, %stride_m, %c0_i32 : i32 loc(#loc9)
    llvm.intr.assume %0 : i1 loc(#loc10)
    llvm.intr.assume %true : i1 loc(#loc2)
    %1 = arith.cmpi sgt, %M, %c0_i32 : i32 loc(#loc11)
    llvm.intr.assume %1 : i1 loc(#loc12)
    %2 = arith.cmpi sgt, %K, %c0_i32 : i32 loc(#loc13)
    llvm.intr.assume %2 : i1 loc(#loc14)
    %in_ptr_1 = arith.muli %pid, %K : i32 loc(#loc35)
    %in_ptr_2 = arith.muli %in_ptr_1, %c32_i32 : i32 loc(#loc36)
    %in_ptrs = tt.splat %in_ptr_2 : i32 -> tensor<32x32xi32, #blocked> loc(#loc37)
    %in_ptrs_3 = tt.expand_dims %offs {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc37)
    %in_ptrs_4 = tt.splat %stride_m : i32 -> tensor<32x1xi32, #blocked> loc(#loc37)
    %in_ptrs_5 = arith.muli %in_ptrs_3, %in_ptrs_4 : tensor<32x1xi32, #blocked> loc(#loc37)
    %in_ptrs_6 = tt.broadcast %in_ptrs_5 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc37)
    %in_ptrs_7 = tt.expand_dims %offs_0 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc37)
    %in_ptrs_8 = tt.broadcast %in_ptrs_7 : tensor<1x32xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc37)
    %in_ptrs_9 = arith.addi %in_ptrs_6, %in_ptrs_8 : tensor<32x32xi32, #blocked> loc(#loc37)
    %in_ptrs_10 = arith.addi %in_ptrs_9, %in_ptrs : tensor<32x32xi32, #blocked> loc(#loc37)
    %out_ptrs = tt.splat %in_ptr_2 : i32 -> tensor<32x32xi32, #blocked> loc(#loc38)
    %out_ptrs_11 = tt.expand_dims %offs {axis = 1 : i32} : tensor<32xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<32x1xi32, #blocked> loc(#loc38)
    %out_ptrs_12 = tt.splat %stride_m : i32 -> tensor<32x1xi32, #blocked> loc(#loc38)
    %out_ptrs_13 = arith.muli %out_ptrs_11, %out_ptrs_12 : tensor<32x1xi32, #blocked> loc(#loc38)
    %out_ptrs_14 = tt.broadcast %out_ptrs_13 : tensor<32x1xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc38)
    %out_ptrs_15 = tt.expand_dims %offs_0 {axis = 0 : i32} : tensor<32xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc38)
    %out_ptrs_16 = tt.broadcast %out_ptrs_15 : tensor<1x32xi32, #blocked> -> tensor<32x32xi32, #blocked> loc(#loc38)
    %out_ptrs_17 = arith.addi %out_ptrs_14, %out_ptrs_16 : tensor<32x32xi32, #blocked> loc(#loc38)
    %out_ptrs_18 = arith.addi %out_ptrs_17, %out_ptrs : tensor<32x32xi32, #blocked> loc(#loc38)
    %3 = arith.addi %K, %c31_i32 : i32 loc(#loc31)
    %4 = arith.divsi %3, %c32_i32 : i32 loc(#loc39)
    %out_ptrs_19:2 = scf.for %out_ptrs_20 = %c0_i32 to %4 step %c1_i32 iter_args(%in_ptrs_21 = %in_ptrs_10, %out_ptrs_22 = %out_ptrs_18) -> (tensor<32x32xi32, #blocked>, tensor<32x32xi32, #blocked>)  : i32 {
      %a = tt.splat %in_ptr : !tt.ptr<f16> -> tensor<32x32x!tt.ptr<f16>, #blocked> loc(#loc41)
      %a_23 = tt.addptr %a, %in_ptrs_21 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc41)
      %a_24 = tt.load %a_23 : tensor<32x32x!tt.ptr<f16>, #blocked> loc(#loc41)
      %5 = tt.splat %out_ptr : !tt.ptr<f16> -> tensor<32x32x!tt.ptr<f16>, #blocked> loc(#loc21)
      %6 = tt.addptr %5, %out_ptrs_22 : tensor<32x32x!tt.ptr<f16>, #blocked>, tensor<32x32xi32, #blocked> loc(#loc21)
      tt.store %6, %a_24 : tensor<32x32x!tt.ptr<f16>, #blocked> loc(#loc21)
      %in_ptrs_25 = arith.addi %in_ptrs_21, %cst : tensor<32x32xi32, #blocked> loc(#loc42)
      %out_ptrs_26 = arith.addi %out_ptrs_22, %cst : tensor<32x32xi32, #blocked> loc(#loc43)
      scf.yield %in_ptrs_25, %out_ptrs_26 : tensor<32x32xi32, #blocked>, tensor<32x32xi32, #blocked> loc(#loc24)
    } loc(#loc44)
    tt.return loc(#loc25)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("/work/triton/g00.py":174:14)
#loc3 = loc("/work/triton/python/triton/language/standard.py":41:22)
#loc4 = loc("/work/triton/g00.py":182:35)
#loc5 = loc("/work/triton/g00.py":182:22)
#loc6 = loc("/work/triton/g00.py":168:24)
#loc7 = loc("/work/triton/g00.py":171:18)
#loc8 = loc("/work/triton/g00.py":171:47)
#loc9 = loc("/work/triton/g00.py":173:25)
#loc10 = loc("/work/triton/g00.py":173:14)
#loc11 = loc("/work/triton/g00.py":175:18)
#loc12 = loc("/work/triton/g00.py":175:14)
#loc13 = loc("/work/triton/g00.py":176:18)
#loc14 = loc("/work/triton/g00.py":176:14)
#loc15 = loc("/work/triton/g00.py":178:20)
#loc16 = loc("/work/triton/g00.py":178:24)
#loc17 = loc("/work/triton/g00.py":180:23)
#loc18 = loc("/work/triton/g00.py":181:25)
#loc19 = loc("/work/triton/python/triton/language/standard.py":41:28)
#loc20 = loc("/work/triton/g00.py":183:20)
#loc21 = loc("/work/triton/g00.py":184:27)
#loc22 = loc("/work/triton/g00.py":186:19)
#loc23 = loc("/work/triton/g00.py":187:20)
#loc24 = loc("/work/triton/g00.py":187:8)
#loc25 = loc("/work/triton/g00.py":182:4)
#loc31 = loc(callsite(#loc3 at #loc4))
#loc32 = loc("pid"(#loc6))
#loc33 = loc("offs"(#loc7))
#loc34 = loc("offs"(#loc8))
#loc35 = loc("in_ptr"(#loc15))
#loc36 = loc("in_ptr"(#loc16))
#loc37 = loc("in_ptrs"(#loc17))
#loc38 = loc("out_ptrs"(#loc18))
#loc39 = loc(callsite(#loc19 at #loc4))
#loc40 = loc("in_ptrs"(#loc5))
#loc41 = loc("a"(#loc20))
#loc42 = loc("in_ptrs"(#loc22))
#loc43 = loc("out_ptrs"(#loc23))
#loc44 = loc("out_ptrs"(#loc40))

// -----// IR Dump Before AllocateSharedMemory (allocate-shared-memory) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [8, 1], threadsPerWarp = [16, 4], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked2 = #ttg.blocked<{sizePerThread = [4, 8], threadsPerWarp = [4, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[1, 0], [2, 0], [0, 1], [0, 2], [0, 4]], lane = [[0, 8], [0, 16], [0, 32], [0, 64], [4, 0], [8, 0]], warp = [[16, 0], [32, 0], [64, 0]], block = []}>
#loc = loc("/triton/./06-fused-attention-fwd.py":39:0)
#loc1 = loc(unknown)
#loc18 = loc("/triton/./06-fused-attention-fwd.py":97:33)
#loc21 = loc("/triton/./06-fused-attention-fwd.py":106:42)
#loc34 = loc("/triton/./06-fused-attention-fwd.py":116:25)
#mma = #ttg.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [8, 1], instrShape = [32, 32], isTransposed = true}>
#shared = #ttg.swizzled_shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [0, 1]}>
#shared2 = #ttg.swizzled_blocks_shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [0, 1]}>
#smem = #ttg.shared_memory
#loc48 = loc(callsite(#loc1 at #loc21))
#loc51 = loc(callsite(#loc1 at #loc34))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 8 : i32, ttg.target = "hip:gfx942", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @_attn_fwd(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg3: f32 loc("/triton/./06-fused-attention-fwd.py":39:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg5: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg12: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg13: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg14: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg15: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg16: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg17: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg18: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg19: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0), %arg20: i32 {tt.divisibility = 16 : i32} loc("/triton/./06-fused-attention-fwd.py":39:0)) attributes {noinline = false} {
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 1.44269502 : f32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c128_i64 = arith.constant 128 : i64 loc(#loc1)
    %c0_i64 = arith.constant 0 : i64 loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_1 = arith.constant dense<0xFF800000> : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<256x128xf32, #mma> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.get_program_id y : i32 loc(#loc3)
    %2 = arith.muli %1, %arg7 : i32 loc(#loc4)
    %3 = tt.addptr %arg0, %2 : !tt.ptr<f16>, i32 loc(#loc5)
    %4 = arith.muli %0, %c256_i32 : i32 loc(#loc6)
    %5 = arith.extsi %arg8 : i32 to i64 loc(#loc7)
    %6 = arith.extsi %4 : i32 to i64 loc(#loc7)
    %7 = tt.addptr %arg1, %2 : !tt.ptr<f16>, i32 loc(#loc8)
    %8 = arith.extsi %arg11 : i32 to i64 loc(#loc9)
    %9 = tt.addptr %arg2, %2 : !tt.ptr<f16>, i32 loc(#loc10)
    %10 = arith.extsi %arg14 : i32 to i64 loc(#loc11)
    %11 = arith.mulf %arg3, %cst : f32 loc(#loc12)
    %12 = tt.splat %3 : !tt.ptr<f16> -> tensor<256x128x!tt.ptr<f16>, #blocked> loc(#loc13)
    %13 = tt.splat %6 : i64 -> tensor<256xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc13)
    %14 = tt.splat %6 : i64 -> tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %15 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc13)
    %16 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %17 = arith.extsi %15 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #mma}>> to tensor<256xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc13)
    %18 = arith.extsi %16 : tensor<256xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %19 = arith.addi %13, %17 : tensor<256xi64, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc13)
    %20 = arith.addi %14, %18 : tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %21 = tt.expand_dims %19 {axis = 1 : i32} : tensor<256xi64, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xi64, #mma> loc(#loc13)
    %22 = tt.expand_dims %20 {axis = 1 : i32} : tensor<256xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi64, #blocked> loc(#loc13)
    %23 = tt.splat %5 : i64 -> tensor<256x1xi64, #blocked> loc(#loc13)
    %24 = arith.muli %22, %23 : tensor<256x1xi64, #blocked> loc(#loc13)
    %25 = tt.broadcast %24 : tensor<256x1xi64, #blocked> -> tensor<256x128xi64, #blocked> loc(#loc13)
    %26 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc13)
    %27 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %28 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc13)
    %29 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc13)
    %30 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %31 = arith.extsi %26 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #mma}>> to tensor<128xi64, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc13)
    %32 = arith.extsi %27 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc13)
    %33 = arith.extsi %28 : tensor<128xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> to tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc13)
    %34 = arith.extsi %29 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> to tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc13)
    %35 = arith.extsi %30 : tensor<128xi32, #ttg.slice<{dim = 1, parent = #blocked}>> to tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc13)
    %36 = tt.expand_dims %31 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x128xi64, #mma> loc(#loc13)
    %37 = tt.expand_dims %32 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi64, #blocked> loc(#loc13)
    %38 = tt.broadcast %36 : tensor<1x128xi64, #mma> -> tensor<256x128xi64, #mma> loc(#loc13)
    %39 = tt.broadcast %37 : tensor<1x128xi64, #blocked> -> tensor<256x128xi64, #blocked> loc(#loc13)
    %40 = arith.addi %25, %39 : tensor<256x128xi64, #blocked> loc(#loc13)
    %41 = tt.addptr %12, %40 : tensor<256x128x!tt.ptr<f16>, #blocked>, tensor<256x128xi64, #blocked> loc(#loc13)
    %42 = tt.load %41 : tensor<256x128x!tt.ptr<f16>, #blocked> loc(#loc13)
    %43 = arith.extf %42 : tensor<256x128xf16, #blocked> to tensor<256x128xf32, #blocked> loc(#loc14)
    %44 = tt.splat %11 : f32 -> tensor<256x128xf32, #blocked> loc(#loc14)
    %45 = arith.mulf %43, %44 : tensor<256x128xf32, #blocked> loc(#loc14)
    %46 = arith.truncf %45 : tensor<256x128xf32, #blocked> to tensor<256x128xf16, #blocked> loc(#loc15)
    %47 = ttg.local_alloc %46 : (tensor<256x128xf16, #blocked>) -> !ttg.memdesc<256x128xf16, #shared, #smem> loc(#loc15)
    %48 = ttg.local_load %47 : !ttg.memdesc<256x128xf16, #shared, #smem> -> tensor<256x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc15)
    %49 = tt.splat %7 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc16)
    %50 = tt.expand_dims %34 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi64, #blocked1> loc(#loc16)
    %51 = tt.broadcast %50 : tensor<128x1xi64, #blocked1> -> tensor<128x128xi64, #blocked1> loc(#loc16)
    %52 = tt.splat %8 : i64 -> tensor<1x128xi64, #blocked1> loc(#loc16)
    %53 = tt.splat %9 : !tt.ptr<f16> -> tensor<128x128x!tt.ptr<f16>, #blocked> loc(#loc17)
    %54 = tt.splat %10 : i64 -> tensor<128x1xi64, #blocked> loc(#loc17)
    %55 = tt.broadcast %37 : tensor<1x128xi64, #blocked> -> tensor<128x128xi64, #blocked> loc(#loc17)
    cf.br ^bb1(%c0_i32, %cst_2, %cst_0, %cst_1, %c0_i64, %c0_i64 : i32, tensor<256x128xf32, #mma>, tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>>, i64, i64) loc(#loc18)
  ^bb1(%56: i32 loc("/triton/./06-fused-attention-fwd.py":97:33), %57: tensor<256x128xf32, #mma> loc(unknown), %58: tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(unknown), %59: tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(unknown), %60: i64 loc(unknown), %61: i64 loc(unknown)):  // 2 preds: ^bb0, ^bb2
    %62 = arith.cmpi slt, %56, %arg20 : i32 loc(#loc18)
    cf.cond_br %62, ^bb2, ^bb3 loc(#loc18)
  ^bb2:  // pred: ^bb1
    %63 = tt.splat %61 : i64 -> tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc16)
    %64 = arith.addi %63, %33 : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc16)
    %65 = tt.expand_dims %64 {axis = 0 : i32} : tensor<128xi64, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x128xi64, #blocked1> loc(#loc16)
    %66 = arith.muli %65, %52 : tensor<1x128xi64, #blocked1> loc(#loc16)
    %67 = tt.broadcast %66 : tensor<1x128xi64, #blocked1> -> tensor<128x128xi64, #blocked1> loc(#loc16)
    %68 = arith.addi %51, %67 : tensor<128x128xi64, #blocked1> loc(#loc16)
    %69 = tt.addptr %49, %68 : tensor<128x128x!tt.ptr<f16>, #blocked1>, tensor<128x128xi64, #blocked1> loc(#loc16)
    %70 = tt.load %69 : tensor<128x128x!tt.ptr<f16>, #blocked1> loc(#loc16)
    %71 = ttg.local_alloc %70 : (tensor<128x128xf16, #blocked1>) -> !ttg.memdesc<128x128xf16, #shared1, #smem> loc(#loc16)
    %72 = ttg.local_load %71 : !ttg.memdesc<128x128xf16, #shared1, #smem> -> tensor<128x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc16)
    %73 = tt.dot %48, %72, %cst_2, inputPrecision = tf32 : tensor<256x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<128x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<256x128xf32, #mma> loc(#loc19)
    %74 = "tt.reduce"(%73) <{axis = 1 : i32}> ({
    ^bb0(%arg21: f32 loc(callsite(#loc1 at #loc21)), %arg22: f32 loc(callsite(#loc1 at #loc21))):
      %118 = arith.maxnumf %arg21, %arg22 : f32 loc(#loc53)
      tt.reduce.return %118 : f32 loc(#loc47)
    }) : (tensor<256x128xf32, #mma>) -> tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc47)
    %75 = arith.maxnumf %59, %74 : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc23)
    %76 = tt.expand_dims %75 {axis = 1 : i32} : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xf32, #mma> loc(#loc24)
    %77 = tt.broadcast %76 : tensor<256x1xf32, #mma> -> tensor<256x128xf32, #mma> loc(#loc25)
    %78 = arith.subf %73, %77 : tensor<256x128xf32, #mma> loc(#loc25)
    %79 = math.exp2 %78 : tensor<256x128xf32, #mma> loc(#loc26)
    %80 = arith.subf %59, %75 : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc27)
    %81 = math.exp2 %80 : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc28)
    %82 = tt.expand_dims %81 {axis = 1 : i32} : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xf32, #mma> loc(#loc29)
    %83 = tt.broadcast %82 : tensor<256x1xf32, #mma> -> tensor<256x128xf32, #mma> loc(#loc30)
    %84 = arith.mulf %57, %83 : tensor<256x128xf32, #mma> loc(#loc30)
    %85 = tt.splat %60 : i64 -> tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc17)
    %86 = arith.addi %85, %35 : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc17)
    %87 = tt.expand_dims %86 {axis = 1 : i32} : tensor<128xi64, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi64, #blocked> loc(#loc17)
    %88 = arith.muli %87, %54 : tensor<128x1xi64, #blocked> loc(#loc17)
    %89 = tt.broadcast %88 : tensor<128x1xi64, #blocked> -> tensor<128x128xi64, #blocked> loc(#loc17)
    %90 = arith.addi %89, %55 : tensor<128x128xi64, #blocked> loc(#loc17)
    %91 = tt.addptr %53, %90 : tensor<128x128x!tt.ptr<f16>, #blocked>, tensor<128x128xi64, #blocked> loc(#loc17)
    %92 = ttg.convert_layout %91 : tensor<128x128x!tt.ptr<f16>, #blocked> -> tensor<128x128x!tt.ptr<f16>, #blocked2> loc(#loc17)
    %93 = tt.load %92 : tensor<128x128x!tt.ptr<f16>, #blocked2> loc(#loc17)
    %94 = arith.truncf %79 : tensor<256x128xf32, #mma> to tensor<256x128xf16, #mma> loc(#loc31)
    %95 = ttg.convert_layout %94 : tensor<256x128xf16, #mma> -> tensor<256x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc31)
    %96 = ttg.convert_layout %93 : tensor<128x128xf16, #blocked2> -> tensor<128x128xf16, #linear> loc(#loc17)
    %97 = ttg.local_alloc %96 : (tensor<128x128xf16, #linear>) -> !ttg.memdesc<128x128xf16, #shared2, #smem> loc(#loc17)
    %98 = ttg.local_load %97 : !ttg.memdesc<128x128xf16, #shared2, #smem> -> tensor<128x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc17)
    %99 = tt.dot %95, %98, %84, inputPrecision = tf32 : tensor<256x128xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<128x128xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<256x128xf32, #mma> loc(#loc32)
    %100 = "tt.reduce"(%79) <{axis = 1 : i32}> ({
    ^bb0(%arg21: f32 loc(callsite(#loc1 at #loc34)), %arg22: f32 loc(callsite(#loc1 at #loc34))):
      %118 = arith.addf %arg21, %arg22 : f32 loc(#loc54)
      tt.reduce.return %118 : f32 loc(#loc50)
    }) : (tensor<256x128xf32, #mma>) -> tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc50)
    %101 = arith.mulf %58, %81 : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc36)
    %102 = arith.addf %101, %100 : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc37)
    %103 = arith.addi %60, %c128_i64 : i64 loc(#loc38)
    %104 = arith.addi %61, %c128_i64 : i64 loc(#loc39)
    %105 = arith.addi %56, %c128_i32 : i32 loc(#loc18)
    cf.br ^bb1(%105, %99, %102, %75, %103, %104 : i32, tensor<256x128xf32, #mma>, tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>>, tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>>, i64, i64) loc(#loc18)
  ^bb3:  // pred: ^bb1
    %106 = tt.expand_dims %58 {axis = 1 : i32} : tensor<256xf32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<256x1xf32, #mma> loc(#loc40)
    %107 = tt.broadcast %106 : tensor<256x1xf32, #mma> -> tensor<256x128xf32, #mma> loc(#loc41)
    %108 = arith.divf %57, %107 : tensor<256x128xf32, #mma> loc(#loc41)
    %109 = tt.addptr %arg5, %2 : !tt.ptr<f16>, i32 loc(#loc42)
    %110 = arith.extsi %arg17 : i32 to i64 loc(#loc43)
    %111 = arith.truncf %108 : tensor<256x128xf32, #mma> to tensor<256x128xf16, #mma> loc(#loc44)
    %112 = tt.splat %109 : !tt.ptr<f16> -> tensor<256x128x!tt.ptr<f16>, #mma> loc(#loc45)
    %113 = tt.splat %110 : i64 -> tensor<256x1xi64, #mma> loc(#loc45)
    %114 = arith.muli %21, %113 : tensor<256x1xi64, #mma> loc(#loc45)
    %115 = tt.broadcast %114 : tensor<256x1xi64, #mma> -> tensor<256x128xi64, #mma> loc(#loc45)
    %116 = arith.addi %115, %38 : tensor<256x128xi64, #mma> loc(#loc45)
    %117 = tt.addptr %112, %116 : tensor<256x128x!tt.ptr<f16>, #mma>, tensor<256x128xi64, #mma> loc(#loc45)
    tt.store %117, %111 : tensor<256x128x!tt.ptr<f16>, #mma> loc(#loc45)
    tt.return loc(#loc46)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/triton/./06-fused-attention-fwd.py":70:28)
#loc3 = loc("/triton/./06-fused-attention-fwd.py":71:27)
#loc4 = loc("/triton/./06-fused-attention-fwd.py":72:26)
#loc5 = loc("/triton/./06-fused-attention-fwd.py":73:45)
#loc6 = loc("/triton/./06-fused-attention-fwd.py":74:55)
#loc7 = loc("/triton/./06-fused-attention-fwd.py":74:105)
#loc8 = loc("/triton/./06-fused-attention-fwd.py":75:45)
#loc9 = loc("/triton/./06-fused-attention-fwd.py":76:89)
#loc10 = loc("/triton/./06-fused-attention-fwd.py":77:45)
#loc11 = loc("/triton/./06-fused-attention-fwd.py":78:89)
#loc12 = loc("/triton/./06-fused-attention-fwd.py":89:26)
#loc13 = loc("/triton/./06-fused-attention-fwd.py":90:16)
#loc14 = loc("/triton/./06-fused-attention-fwd.py":94:13)
#loc15 = loc("/triton/./06-fused-attention-fwd.py":94:26)
#loc16 = loc("/triton/./06-fused-attention-fwd.py":100:20)
#loc17 = loc("/triton/./06-fused-attention-fwd.py":113:24)
#loc19 = loc("/triton/./06-fused-attention-fwd.py":104:24)
#loc20 = loc("/triton/python/triton/language/standard.py":184:40)
#loc22 = loc("/triton/python/triton/language/standard.py":163:27)
#loc23 = loc("/triton/./06-fused-attention-fwd.py":106:31)
#loc24 = loc("/triton/./06-fused-attention-fwd.py":107:23)
#loc25 = loc("/triton/./06-fused-attention-fwd.py":107:18)
#loc26 = loc("/triton/./06-fused-attention-fwd.py":108:25)
#loc27 = loc("/triton/./06-fused-attention-fwd.py":110:35)
#loc28 = loc("/triton/./06-fused-attention-fwd.py":110:29)
#loc29 = loc("/triton/./06-fused-attention-fwd.py":111:26)
#loc30 = loc("/triton/./06-fused-attention-fwd.py":111:20)
#loc31 = loc("/triton/./06-fused-attention-fwd.py":114:27)
#loc32 = loc("/triton/./06-fused-attention-fwd.py":114:37)
#loc33 = loc("/triton/python/triton/language/standard.py":286:36)
#loc35 = loc("/triton/python/triton/language/standard.py":256:15)
#loc36 = loc("/triton/./06-fused-attention-fwd.py":117:20)
#loc37 = loc("/triton/./06-fused-attention-fwd.py":117:28)
#loc38 = loc("/triton/./06-fused-attention-fwd.py":120:46)
#loc39 = loc("/triton/./06-fused-attention-fwd.py":121:46)
#loc40 = loc("/triton/./06-fused-attention-fwd.py":122:20)
#loc41 = loc("/triton/./06-fused-attention-fwd.py":122:16)
#loc42 = loc("/triton/./06-fused-attention-fwd.py":124:47)
#loc43 = loc("/triton/./06-fused-attention-fwd.py":125:105)
#loc44 = loc("/triton/./06-fused-attention-fwd.py":126:33)
#loc45 = loc("/triton/./06-fused-attention-fwd.py":126:26)
#loc46 = loc("/triton/./06-fused-attention-fwd.py":126:4)
#loc47 = loc(callsite(#loc20 at #loc21))
#loc49 = loc(callsite(#loc22 at #loc20))
#loc50 = loc(callsite(#loc33 at #loc34))
#loc52 = loc(callsite(#loc35 at #loc33))
#loc53 = loc(callsite(#loc49 at #loc21))
#loc54 = loc(callsite(#loc52 at #loc34))


#blocked = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [1, 4], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked2 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [2, 16], warpsPerCTA = [4, 1], order = [1, 0]}>
#blocked3 = #ttg.blocked<{sizePerThread = [2, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked4 = #ttg.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#blocked5 = #ttg.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [1, 0]}>
#loc = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":217:0)
#loc1 = loc(unknown)
#loc10 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":220:37)
#loc13 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":133:25)
#loc14 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":176:43)
#loc20 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":141:18)
#loc24 = loc("/root/code/triton/python/triton/language/standard.py":191:26)
#loc25 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":179:27)
#loc87 = loc(callsite(#loc1 at #loc20))
#loc91 = loc(callsite(#loc1 at #loc24))
#loc142 = loc(callsite(#loc87 at #loc13))
#loc145 = loc(callsite(#loc91 at #loc25))
#loc193 = loc(callsite(#loc142 at #loc14))
#loc196 = loc(callsite(#loc145 at #loc10))
#loc228 = loc(callsite(#loc193 at #loc10))
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 4 : i32, ttg.target = "cuda:90", "ttg.threads-per-warp" = 32 : i32} {
  tt.func public @ortho_diag_test_kernel(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":217:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":217:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":217:0), %arg3: i32 loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":217:0)) attributes {noinline = false} {
    %cst = arith.constant dense<5.000000e-01> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<-7.52316385E-37> : tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc1)
    %cst_1 = arith.constant dense<-1.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c1_i32 = arith.constant 1 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<64x1xi32, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked3> loc(#loc1)
    %cst_6 = arith.constant dense<7.52316385E-37> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<7.52316385E-37> : tensor<1x64xf32, #blocked3> loc(#loc1)
    %cst_8 = arith.constant dense<1.000000e+00> : tensor<1x64xf32, #blocked3> loc(#loc1)
    %cst_9 = arith.constant dense<-1.000000e+00> : tensor<1x64xf32, #blocked3> loc(#loc1)
    %cst_10 = arith.constant dense<7.52316385E-37> : tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc1)
    %cst_11 = arith.constant dense<7.52316385E-37> : tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc1)
    %cst_12 = arith.constant dense<5.000000e-01> : tensor<1x64xf32, #blocked3> loc(#loc1)
    %cst_13 = arith.constant dense<0> : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc2)
    %1 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #blocked4> loc(#loc2)
    %4 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> loc(#loc3)
    %5 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> loc(#loc3)
    %6 = tt.expand_dims %4 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked2}>> -> tensor<64x1xi32, #blocked2> loc(#loc3)
    %7 = tt.expand_dims %5 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc3)
    %8 = arith.muli %6, %cst_4 : tensor<64x1xi32, #blocked2> loc(#loc4)
    %9 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked2> loc(#loc5)
    %10 = tt.addptr %9, %8 : tensor<64x1x!tt.ptr<f32>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc5)
    %11 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> loc(#loc6)
    %12 = tt.expand_dims %1 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc6)
    %13 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x64xi32, #blocked1> loc(#loc6)
    %14 = tt.expand_dims %11 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x64xi32, #blocked2> loc(#loc6)
    %15 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x64xi32, #blocked3> loc(#loc6)
    %16 = tt.broadcast %10 : tensor<64x1x!tt.ptr<f32>, #blocked2> -> tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc7)
    %17 = tt.broadcast %14 : tensor<1x64xi32, #blocked2> -> tensor<64x64xi32, #blocked2> loc(#loc7)
    %18 = tt.broadcast %13 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc7)
    %19 = tt.addptr %16, %17 : tensor<64x64x!tt.ptr<f32>, #blocked2>, tensor<64x64xi32, #blocked2> loc(#loc7)
    %20 = tt.load %19 : tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc8)
    %21 = ttg.convert_layout %20 : tensor<64x64xf32, #blocked2> -> tensor<64x64xf32, #blocked3> loc(#loc8)
    %22 = tt.broadcast %7 : tensor<64x1xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc79)
    %23 = arith.cmpi eq, %22, %18 : tensor<64x64xi32, #blocked1> loc(#loc79)
    %24 = arith.uitofp %23 : tensor<64x64xi1, #blocked1> to tensor<64x64xf32, #blocked1> loc(#loc80)
    %25 = arith.xori %22, %18 : tensor<64x64xi32, #blocked1> loc(#loc190)
    %26 = arith.cmpi eq, %2, %cst_13 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc82)
    %27:2 = scf.for %arg4 = %c0_i32 to %arg3 step %c1_i32 iter_args(%arg5 = %21, %arg6 = %24) -> (tensor<64x64xf32, #blocked3>, tensor<64x64xf32, #blocked1>)  : i32 {
      %39 = arith.mulf %arg5, %arg5 : tensor<64x64xf32, #blocked3> loc(#loc139)
      %40 = ttg.convert_layout %39 : tensor<64x64xf32, #blocked3> -> tensor<64x64xf32, #blocked1> loc(#loc191)
      %41 = tt.gather %40[%25] {axis = 1 : i32, efficient_layout} : (tensor<64x64xf32, #blocked1>, tensor<64x64xi32, #blocked1>) -> tensor<64x64xf32, #blocked1> loc(#loc191)
      %42 = "tt.reduce"(%41) <{axis = 0 : i32}> ({
      ^bb0(%arg7: f32 loc(callsite(#loc193 at #loc10)), %arg8: f32 loc(callsite(#loc193 at #loc10))):
        %128 = arith.addf %arg7, %arg8 : f32 loc(#loc237)
        tt.reduce.return %128 : f32 loc(#loc227)
      }) : (tensor<64x64xf32, #blocked1>) -> tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc227)
      %43 = arith.select %26, %cst_0, %42 : tensor<64xi1, #ttg.slice<{dim = 0, parent = #blocked1}>>, tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked1}>> loc(#loc89)
      %44:2 = "tt.reduce"(%43, %2) <{axis = 0 : i32}> ({
      ^bb0(%arg7: f32 loc(callsite(#loc145 at #loc10)), %arg8: i32 loc(callsite(#loc145 at #loc10)), %arg9: f32 loc(callsite(#loc145 at #loc10)), %arg10: i32 loc(callsite(#loc145 at #loc10))):
        %128 = arith.cmpf oeq, %arg7, %arg9 : f32 loc(#loc238)
        %129 = arith.cmpi slt, %arg8, %arg10 : i32 loc(#loc239)
        %130 = arith.andi %128, %129 : i1 loc(#loc240)
        %131 = arith.cmpf ogt, %arg7, %arg9 : f32 loc(#loc241)
        %132 = arith.ori %131, %130 : i1 loc(#loc242)
        %133 = arith.select %132, %arg7, %arg9 : f32 loc(#loc243)
        %134 = arith.select %132, %arg8, %arg10 : i32 loc(#loc244)
        tt.reduce.return %133, %134 : f32, i32 loc(#loc195)
      }) : (tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked1}>>, tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked1}>>) -> (f32, i32) loc(#loc195)
      %45 = tt.gather %arg5[%15] {axis = 0 : i32} : (tensor<64x64xf32, #blocked3>, tensor<1x64xi32, #blocked3>) -> tensor<1x64xf32, #blocked3> loc(#loc153)
      %46 = tt.gather %arg5[%12] {axis = 0 : i32} : (tensor<64x64xf32, #blocked3>, tensor<1x64xi32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc153)
      %47 = tt.splat %44#1 : i32 -> tensor<1x64xi32, #blocked3> loc(#loc154)
      %48 = tt.splat %44#1 : i32 -> tensor<1x64xi32, #blocked> loc(#loc154)
      %49 = tt.splat %44#1 : i32 -> tensor<1x64xi32, #blocked1> loc(#loc154)
      %50 = arith.xori %15, %47 : tensor<1x64xi32, #blocked3> loc(#loc154)
      %51 = arith.xori %12, %48 : tensor<1x64xi32, #blocked> loc(#loc154)
      %52 = arith.xori %13, %49 : tensor<1x64xi32, #blocked1> loc(#loc154)
      %53 = tt.gather %arg5[%50] {axis = 0 : i32} : (tensor<64x64xf32, #blocked3>, tensor<1x64xi32, #blocked3>) -> tensor<1x64xf32, #blocked3> loc(#loc155)
      %54 = tt.gather %arg5[%51] {axis = 0 : i32} : (tensor<64x64xf32, #blocked3>, tensor<1x64xi32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc155)
      %55 = tt.gather %45[%50] {axis = 1 : i32} : (tensor<1x64xf32, #blocked3>, tensor<1x64xi32, #blocked3>) -> tensor<1x64xf32, #blocked3> loc(#loc204)
      %56 = tt.gather %46[%51] {axis = 1 : i32, efficient_layout} : (tensor<1x64xf32, #blocked>, tensor<1x64xi32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc204)
      %57 = tt.splat %44#1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc157)
      %58 = tt.splat %44#1 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc157)
      %59 = arith.xori %0, %57 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc157)
      %60 = arith.xori %1, %58 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc157)
      %61 = arith.subi %0, %59 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc158)
      %62 = arith.subi %1, %60 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc158)
      %63 = arith.subf %45, %55 : tensor<1x64xf32, #blocked3> loc(#loc205)
      %64 = arith.subf %46, %56 : tensor<1x64xf32, #blocked> loc(#loc205)
      %65 = arith.mulf %63, %cst_12 : tensor<1x64xf32, #blocked3> loc(#loc206)
      %66 = arith.mulf %64, %cst : tensor<1x64xf32, #blocked> loc(#loc206)
      %67 = arith.sitofp %61 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked3}>> to tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc207)
      %68 = arith.sitofp %62 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> to tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc207)
      %69 = arith.mulf %67, %cst_11 : tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked3}>> loc(#loc207)
      %70 = arith.mulf %68, %cst_10 : tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc207)
      %71 = tt.expand_dims %69 {axis = 0 : i32} : tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x64xf32, #blocked3> loc(#loc208)
      %72 = tt.expand_dims %70 {axis = 0 : i32} : tensor<64xf32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xf32, #blocked> loc(#loc208)
      %73 = arith.addf %65, %71 : tensor<1x64xf32, #blocked3> loc(#loc208)
      %74 = arith.addf %66, %72 : tensor<1x64xf32, #blocked> loc(#loc208)
      %75 = arith.cmpf olt, %73, %cst_5 : tensor<1x64xf32, #blocked3> loc(#loc209)
      %76 = arith.cmpf olt, %74, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc209)
      %77 = arith.select %75, %cst_9, %cst_8 : tensor<1x64xi1, #blocked3>, tensor<1x64xf32, #blocked3> loc(#loc210)
      %78 = arith.select %76, %cst_1, %cst_2 : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc210)
      %79 = arith.mulf %53, %53 : tensor<1x64xf32, #blocked3> loc(#loc211)
      %80 = arith.mulf %54, %54 : tensor<1x64xf32, #blocked> loc(#loc211)
      %81 = arith.addf %79, %cst_7 : tensor<1x64xf32, #blocked3> loc(#loc212)
      %82 = arith.addf %80, %cst_6 : tensor<1x64xf32, #blocked> loc(#loc212)
      %83 = arith.mulf %65, %65 : tensor<1x64xf32, #blocked3> loc(#loc213)
      %84 = arith.mulf %66, %66 : tensor<1x64xf32, #blocked> loc(#loc213)
      %85 = arith.addf %83, %81 : tensor<1x64xf32, #blocked3> loc(#loc214)
      %86 = arith.addf %84, %82 : tensor<1x64xf32, #blocked> loc(#loc214)
      %87 = math.sqrt %85 : tensor<1x64xf32, #blocked3> loc(#loc215)
      %88 = math.sqrt %86 : tensor<1x64xf32, #blocked> loc(#loc215)
      %89 = arith.mulf %77, %87 : tensor<1x64xf32, #blocked3> loc(#loc216)
      %90 = arith.mulf %78, %88 : tensor<1x64xf32, #blocked> loc(#loc216)
      %91 = arith.addf %73, %89 : tensor<1x64xf32, #blocked3> loc(#loc217)
      %92 = arith.addf %74, %90 : tensor<1x64xf32, #blocked> loc(#loc217)
      %93 = arith.divf %53, %91 : tensor<1x64xf32, #blocked3> loc(#loc218)
      %94 = arith.divf %54, %92 : tensor<1x64xf32, #blocked> loc(#loc218)
      %95 = arith.mulf %93, %93 : tensor<1x64xf32, #blocked3> loc(#loc219)
      %96 = arith.mulf %94, %94 : tensor<1x64xf32, #blocked> loc(#loc219)
      %97 = arith.addf %95, %cst_8 : tensor<1x64xf32, #blocked3> loc(#loc220)
      %98 = arith.addf %96, %cst_2 : tensor<1x64xf32, #blocked> loc(#loc220)
      %99 = math.rsqrt %97 : tensor<1x64xf32, #blocked3> loc(#loc221)
      %100 = math.rsqrt %98 : tensor<1x64xf32, #blocked> loc(#loc221)
      %101 = arith.mulf %94, %100 : tensor<1x64xf32, #blocked> loc(#loc222)
      %102 = arith.mulf %93, %99 : tensor<1x64xf32, #blocked3> loc(#loc222)
      %103 = tt.broadcast %52 : tensor<1x64xi32, #blocked1> -> tensor<64x64xi32, #blocked1> loc(#loc223)
      %104 = tt.broadcast %50 : tensor<1x64xi32, #blocked3> -> tensor<64x64xi32, #blocked3> loc(#loc223)
      %105 = ttg.convert_layout %arg5 : tensor<64x64xf32, #blocked3> -> tensor<64x64xf32, #blocked1> loc(#loc224)
      %106 = tt.gather %105[%103] {axis = 1 : i32, efficient_layout} : (tensor<64x64xf32, #blocked1>, tensor<64x64xi32, #blocked1>) -> tensor<64x64xf32, #blocked1> loc(#loc224)
      %107 = tt.broadcast %99 : tensor<1x64xf32, #blocked3> -> tensor<64x64xf32, #blocked3> loc(#loc179)
      %108 = ttg.convert_layout %100 : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked3> loc(#loc179)
      %109 = tt.broadcast %108 : tensor<1x64xf32, #blocked3> -> tensor<64x64xf32, #blocked3> loc(#loc179)
      %110 = ttg.convert_layout %100 : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc179)
      %111 = tt.broadcast %110 : tensor<1x64xf32, #blocked1> -> tensor<64x64xf32, #blocked1> loc(#loc179)
      %112 = arith.mulf %109, %arg5 : tensor<64x64xf32, #blocked3> loc(#loc179)
      %113 = ttg.convert_layout %112 : tensor<64x64xf32, #blocked3> -> tensor<64x64xf32, #blocked1> loc(#loc179)
      %114 = ttg.convert_layout %101 : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc180)
      %115 = tt.broadcast %114 : tensor<1x64xf32, #blocked1> -> tensor<64x64xf32, #blocked1> loc(#loc180)
      %116 = tt.broadcast %102 : tensor<1x64xf32, #blocked3> -> tensor<64x64xf32, #blocked3> loc(#loc180)
      %117 = arith.mulf %115, %106 : tensor<64x64xf32, #blocked1> loc(#loc180)
      %118 = arith.addf %113, %117 : tensor<64x64xf32, #blocked1> loc(#loc181)
      %119 = tt.trans %118 {order = array<i32: 1, 0>} : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #blocked3> loc(#loc128)
      %120 = tt.gather %119[%104] {axis = 1 : i32} : (tensor<64x64xf32, #blocked3>, tensor<64x64xi32, #blocked3>) -> tensor<64x64xf32, #blocked3> loc(#loc225)
      %121 = arith.mulf %107, %119 : tensor<64x64xf32, #blocked3> loc(#loc183)
      %122 = arith.mulf %116, %120 : tensor<64x64xf32, #blocked3> loc(#loc184)
      %123 = arith.addf %121, %122 : tensor<64x64xf32, #blocked3> loc(#loc185)
      %124 = tt.gather %arg6[%103] {axis = 1 : i32, efficient_layout} : (tensor<64x64xf32, #blocked1>, tensor<64x64xi32, #blocked1>) -> tensor<64x64xf32, #blocked1> loc(#loc226)
      %125 = arith.mulf %111, %arg6 : tensor<64x64xf32, #blocked1> loc(#loc187)
      %126 = arith.mulf %115, %124 : tensor<64x64xf32, #blocked1> loc(#loc188)
      %127 = arith.addf %125, %126 : tensor<64x64xf32, #blocked1> loc(#loc189)
      scf.yield %123, %127 : tensor<64x64xf32, #blocked3>, tensor<64x64xf32, #blocked1> loc(#loc135)
    } loc(#loc83)
    %28 = ttg.convert_layout %27#0 : tensor<64x64xf32, #blocked3> -> tensor<64x64xf32, #blocked1> loc(#loc136)
    %29 = tt.gather %28[%7] {axis = 1 : i32, efficient_layout} : (tensor<64x64xf32, #blocked1>, tensor<64x1xi32, #blocked1>) -> tensor<64x1xf32, #blocked1> loc(#loc136)
    %30 = ttg.convert_layout %29 : tensor<64x1xf32, #blocked1> -> tensor<64x1xf32, #blocked5> loc(#loc136)
    %31 = tt.reshape %30 : tensor<64x1xf32, #blocked5> -> tensor<64xf32, #blocked4> loc(#loc137)
    %32 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked2> loc(#loc73)
    %33 = tt.addptr %32, %8 : tensor<64x1x!tt.ptr<f32>, #blocked2>, tensor<64x1xi32, #blocked2> loc(#loc73)
    %34 = tt.broadcast %33 : tensor<64x1x!tt.ptr<f32>, #blocked2> -> tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc74)
    %35 = tt.addptr %34, %17 : tensor<64x64x!tt.ptr<f32>, #blocked2>, tensor<64x64xi32, #blocked2> loc(#loc74)
    %36 = ttg.convert_layout %27#1 : tensor<64x64xf32, #blocked1> -> tensor<64x64xf32, #blocked2> loc(#loc75)
    tt.store %35, %36 : tensor<64x64x!tt.ptr<f32>, #blocked2> loc(#loc75)
    %37 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x!tt.ptr<f32>, #blocked4> loc(#loc76)
    %38 = tt.addptr %37, %3 : tensor<64x!tt.ptr<f32>, #blocked4>, tensor<64xi32, #blocked4> loc(#loc76)
    tt.store %38, %31 : tensor<64x!tt.ptr<f32>, #blocked4> loc(#loc77)
    tt.return loc(#loc78)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":219:33)
#loc3 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":219:42)
#loc4 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":219:53)
#loc5 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":219:20)
#loc6 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":219:85)
#loc7 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":219:63)
#loc8 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":219:16)
#loc9 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":172:43)
#loc11 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":172:78)
#loc12 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":140:37)
#loc15 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":177:48)
#loc16 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":174:20)
#loc17 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":133:29)
#loc18 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":141:31)
#loc19 = loc("/root/code/triton/python/triton/language/standard.py":267:36)
#loc21 = loc("/root/code/triton/python/triton/language/standard.py":256:15)
#loc22 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":177:58)
#loc23 = loc("/root/code/triton/python/triton/language/standard.py":174:58)
#loc26 = loc("/root/code/triton/python/triton/language/standard.py":142:24)
#loc27 = loc("/root/code/triton/python/triton/language/standard.py":153:59)
#loc28 = loc("/root/code/triton/python/triton/language/standard.py":142:44)
#loc29 = loc("/root/code/triton/python/triton/language/standard.py":142:35)
#loc30 = loc("/root/code/triton/python/triton/language/standard.py":145:18)
#loc31 = loc("/root/code/triton/python/triton/language/standard.py":145:28)
#loc32 = loc("/root/code/triton/python/triton/language/standard.py":146:35)
#loc33 = loc("/root/code/triton/python/triton/language/standard.py":147:35)
#loc34 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":113:21)
#loc35 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":181:46)
#loc36 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":114:60)
#loc37 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":114:21)
#loc38 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":87:86)
#loc39 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":116:26)
#loc40 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":118:60)
#loc41 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":118:36)
#loc42 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":26:19)
#loc43 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":120:43)
#loc44 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":26:15)
#loc45 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":35:23)
#loc46 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":35:16)
#loc47 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":36:23)
#loc48 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":36:32)
#loc49 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":40:13)
#loc50 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":40:17)
#loc51 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":41:24)
#loc52 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":41:28)
#loc53 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":41:22)
#loc54 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":41:14)
#loc55 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":46:17)
#loc56 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":46:13)
#loc57 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":47:25)
#loc58 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":47:23)
#loc59 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":47:17)
#loc60 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":48:9)
#loc61 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":87:83)
#loc62 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":161:26)
#loc63 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":182:60)
#loc64 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":163:15)
#loc65 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":163:23)
#loc66 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":163:19)
#loc67 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":182:36)
#loc68 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":182:71)
#loc69 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":183:36)
#loc70 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":183:8)
#loc71 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":185:21)
#loc72 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":185:75)
#loc73 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":221:17)
#loc74 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":221:60)
#loc75 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":221:92)
#loc76 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":222:17)
#loc77 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":222:40)
#loc78 = loc("/root/code/openai/lib/deuterium/deuterium/linalg/jacobi.py":222:4)
#loc79 = loc(callsite(#loc9 at #loc10))
#loc80 = loc(callsite(#loc11 at #loc10))
#loc81 = loc(callsite(#loc12 at #loc13))
#loc82 = loc(callsite(#loc15 at #loc10))
#loc83 = loc(callsite(#loc16 at #loc10))
#loc84 = loc(callsite(#loc17 at #loc14))
#loc85 = loc(callsite(#loc18 at #loc13))
#loc86 = loc(callsite(#loc19 at #loc20))
#loc88 = loc(callsite(#loc21 at #loc19))
#loc89 = loc(callsite(#loc22 at #loc10))
#loc90 = loc(callsite(#loc23 at #loc24))
#loc92 = loc(callsite(#loc26 at #loc27))
#loc93 = loc(callsite(#loc28 at #loc27))
#loc94 = loc(callsite(#loc29 at #loc27))
#loc95 = loc(callsite(#loc30 at #loc27))
#loc96 = loc(callsite(#loc31 at #loc27))
#loc97 = loc(callsite(#loc32 at #loc27))
#loc98 = loc(callsite(#loc33 at #loc27))
#loc99 = loc(callsite(#loc34 at #loc35))
#loc100 = loc(callsite(#loc36 at #loc35))
#loc101 = loc(callsite(#loc37 at #loc35))
#loc102 = loc(callsite(#loc38 at #loc39))
#loc103 = loc(callsite(#loc40 at #loc35))
#loc104 = loc(callsite(#loc41 at #loc35))
#loc105 = loc(callsite(#loc42 at #loc43))
#loc106 = loc(callsite(#loc44 at #loc43))
#loc107 = loc(callsite(#loc45 at #loc43))
#loc108 = loc(callsite(#loc46 at #loc43))
#loc109 = loc(callsite(#loc47 at #loc43))
#loc110 = loc(callsite(#loc48 at #loc43))
#loc111 = loc(callsite(#loc49 at #loc43))
#loc112 = loc(callsite(#loc50 at #loc43))
#loc113 = loc(callsite(#loc51 at #loc43))
#loc114 = loc(callsite(#loc52 at #loc43))
#loc115 = loc(callsite(#loc53 at #loc43))
#loc116 = loc(callsite(#loc54 at #loc43))
#loc117 = loc(callsite(#loc55 at #loc43))
#loc118 = loc(callsite(#loc56 at #loc43))
#loc119 = loc(callsite(#loc57 at #loc43))
#loc120 = loc(callsite(#loc58 at #loc43))
#loc121 = loc(callsite(#loc59 at #loc43))
#loc122 = loc(callsite(#loc60 at #loc43))
#loc123 = loc(callsite(#loc61 at #loc62))
#loc124 = loc(callsite(#loc38 at #loc62))
#loc125 = loc(callsite(#loc64 at #loc63))
#loc126 = loc(callsite(#loc65 at #loc63))
#loc127 = loc(callsite(#loc66 at #loc63))
#loc128 = loc(callsite(#loc67 at #loc10))
#loc129 = loc(callsite(#loc64 at #loc68))
#loc130 = loc(callsite(#loc65 at #loc68))
#loc131 = loc(callsite(#loc66 at #loc68))
#loc132 = loc(callsite(#loc64 at #loc69))
#loc133 = loc(callsite(#loc65 at #loc69))
#loc134 = loc(callsite(#loc66 at #loc69))
#loc135 = loc(callsite(#loc70 at #loc10))
#loc136 = loc(callsite(#loc71 at #loc10))
#loc137 = loc(callsite(#loc72 at #loc10))
#loc138 = loc(callsite(#loc81 at #loc14))
#loc139 = loc(callsite(#loc84 at #loc10))
#loc140 = loc(callsite(#loc85 at #loc14))
#loc141 = loc(callsite(#loc86 at #loc13))
#loc143 = loc(callsite(#loc88 at #loc20))
#loc144 = loc(callsite(#loc90 at #loc25))
#loc146 = loc(callsite(#loc92 at #loc23))
#loc147 = loc(callsite(#loc93 at #loc23))
#loc148 = loc(callsite(#loc94 at #loc23))
#loc149 = loc(callsite(#loc95 at #loc23))
#loc150 = loc(callsite(#loc96 at #loc23))
#loc151 = loc(callsite(#loc97 at #loc23))
#loc152 = loc(callsite(#loc98 at #loc23))
#loc153 = loc(callsite(#loc99 at #loc10))
#loc154 = loc(callsite(#loc100 at #loc10))
#loc155 = loc(callsite(#loc101 at #loc10))
#loc156 = loc(callsite(#loc102 at #loc35))
#loc157 = loc(callsite(#loc103 at #loc10))
#loc158 = loc(callsite(#loc104 at #loc10))
#loc159 = loc(callsite(#loc105 at #loc35))
#loc160 = loc(callsite(#loc106 at #loc35))
#loc161 = loc(callsite(#loc107 at #loc35))
#loc162 = loc(callsite(#loc108 at #loc35))
#loc163 = loc(callsite(#loc109 at #loc35))
#loc164 = loc(callsite(#loc110 at #loc35))
#loc165 = loc(callsite(#loc111 at #loc35))
#loc166 = loc(callsite(#loc112 at #loc35))
#loc167 = loc(callsite(#loc113 at #loc35))
#loc168 = loc(callsite(#loc114 at #loc35))
#loc169 = loc(callsite(#loc115 at #loc35))
#loc170 = loc(callsite(#loc116 at #loc35))
#loc171 = loc(callsite(#loc117 at #loc35))
#loc172 = loc(callsite(#loc118 at #loc35))
#loc173 = loc(callsite(#loc119 at #loc35))
#loc174 = loc(callsite(#loc120 at #loc35))
#loc175 = loc(callsite(#loc121 at #loc35))
#loc176 = loc(callsite(#loc122 at #loc35))
#loc177 = loc(callsite(#loc123 at #loc63))
#loc178 = loc(callsite(#loc124 at #loc63))
#loc179 = loc(callsite(#loc125 at #loc10))
#loc180 = loc(callsite(#loc126 at #loc10))
#loc181 = loc(callsite(#loc127 at #loc10))
#loc182 = loc(callsite(#loc124 at #loc68))
#loc183 = loc(callsite(#loc129 at #loc10))
#loc184 = loc(callsite(#loc130 at #loc10))
#loc185 = loc(callsite(#loc131 at #loc10))
#loc186 = loc(callsite(#loc124 at #loc69))
#loc187 = loc(callsite(#loc132 at #loc10))
#loc188 = loc(callsite(#loc133 at #loc10))
#loc189 = loc(callsite(#loc134 at #loc10))
#loc190 = loc(callsite(#loc138 at #loc10))
#loc191 = loc(callsite(#loc140 at #loc10))
#loc192 = loc(callsite(#loc141 at #loc14))
#loc194 = loc(callsite(#loc143 at #loc13))
#loc195 = loc(callsite(#loc144 at #loc10))
#loc197 = loc(callsite(#loc146 at #loc24))
#loc198 = loc(callsite(#loc147 at #loc24))
#loc199 = loc(callsite(#loc148 at #loc24))
#loc200 = loc(callsite(#loc149 at #loc24))
#loc201 = loc(callsite(#loc150 at #loc24))
#loc202 = loc(callsite(#loc151 at #loc24))
#loc203 = loc(callsite(#loc152 at #loc24))
#loc204 = loc(callsite(#loc156 at #loc10))
#loc205 = loc(callsite(#loc159 at #loc10))
#loc206 = loc(callsite(#loc160 at #loc10))
#loc207 = loc(callsite(#loc161 at #loc10))
#loc208 = loc(callsite(#loc162 at #loc10))
#loc209 = loc(callsite(#loc163 at #loc10))
#loc210 = loc(callsite(#loc164 at #loc10))
#loc211 = loc(callsite(#loc165 at #loc10))
#loc212 = loc(callsite(#loc166 at #loc10))
#loc213 = loc(callsite(#loc167 at #loc10))
#loc214 = loc(callsite(#loc168 at #loc10))
#loc215 = loc(callsite(#loc169 at #loc10))
#loc216 = loc(callsite(#loc170 at #loc10))
#loc217 = loc(callsite(#loc171 at #loc10))
#loc218 = loc(callsite(#loc172 at #loc10))
#loc219 = loc(callsite(#loc173 at #loc10))
#loc220 = loc(callsite(#loc174 at #loc10))
#loc221 = loc(callsite(#loc175 at #loc10))
#loc222 = loc(callsite(#loc176 at #loc10))
#loc223 = loc(callsite(#loc177 at #loc10))
#loc224 = loc(callsite(#loc178 at #loc10))
#loc225 = loc(callsite(#loc182 at #loc10))
#loc226 = loc(callsite(#loc186 at #loc10))
#loc227 = loc(callsite(#loc192 at #loc10))
#loc229 = loc(callsite(#loc194 at #loc14))
#loc230 = loc(callsite(#loc197 at #loc25))
#loc231 = loc(callsite(#loc198 at #loc25))
#loc232 = loc(callsite(#loc199 at #loc25))
#loc233 = loc(callsite(#loc200 at #loc25))
#loc234 = loc(callsite(#loc201 at #loc25))
#loc235 = loc(callsite(#loc202 at #loc25))
#loc236 = loc(callsite(#loc203 at #loc25))
#loc237 = loc(callsite(#loc229 at #loc10))
#loc238 = loc(callsite(#loc230 at #loc10))
#loc239 = loc(callsite(#loc231 at #loc10))
#loc240 = loc(callsite(#loc232 at #loc10))
#loc241 = loc(callsite(#loc233 at #loc10))
#loc242 = loc(callsite(#loc234 at #loc10))
#loc243 = loc(callsite(#loc235 at #loc10))
#loc244 = loc(callsite(#loc236 at #loc10))



name: Metal macOS Smoke Tests

on:
  workflow_dispatch:
  push:
    branches: [ ci/macos-metal-validate, main ]

jobs:
  metal-smoke:
    name: Metal smoke tests (macOS)
    runs-on: macos-latest
    timeout-minutes: 120
    steps:
      - name: Checkout repository (full)
        uses: actions/checkout@v4
        with:
          # Ensure the full history and all files are present (no sparse/shallow checkout)
          fetch-depth: 0
          persist-credentials: true
          # Do not attempt to fetch submodules on the runner: some generated build trees
          # contain gitlink entries without a matching .gitmodules file which causes
          # `git submodule update` to fail (seen on GitHub runners). Avoid fetching
          # submodules here; if real submodules are required in future, enable them
          # explicitly and ensure .gitmodules is present.
          submodules: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Xcode command line tools status
        run: |
          echo "xcrun: $(xcrun --version 2>/dev/null || echo 'missing')"
          echo "metal: $(command -v metal >/dev/null && metal --version 2>/dev/null || echo 'missing')"
          echo "metallib: $(command -v metallib >/dev/null && metallib --version 2>/dev/null || echo 'missing')"

      - name: Create build dir
        run: mkdir -p build_metal

      - name: Clean build directory (remove stale CMake cache)
        run: |
          # If a CMakeCache or other generated build files are present in the repo
          # (e.g. from a developer's local build) they can contain absolute paths
          # which confuse an out-of-tree runner. Remove them so CMake starts fresh.
          if [ -f build_metal/CMakeCache.txt ] || [ -d build_metal/CMakeFiles ] || [ -d build_metal/Testing ]; then
            echo "Removing stale build artifacts from build_metal"
            rm -rf build_metal/CMakeCache.txt build_metal/CMakeFiles build_metal/Testing build_metal/CTestTestfile.cmake build_metal_logs || true
          fi
          # Ensure the build directory is empty before configuring
          rm -rf build_metal/* || true

      - name: Install Homebrew LLVM (for MLIR)
        run: |
          # Prefer llvm@20 which matches the repo's historical build artifacts; fall back to llvm
          brew update || true
          if brew info llvm@20 >/dev/null 2>&1; then
            brew install llvm@20 || true
            LLVM_PREFIX=$(brew --prefix llvm@20)
          else
            brew install llvm || true
            LLVM_PREFIX=$(brew --prefix llvm)
          fi
          echo "LLVM_PREFIX=${LLVM_PREFIX}" >> $GITHUB_ENV
          echo "LLVM_DIR=${LLVM_PREFIX}/lib/cmake/llvm" >> $GITHUB_ENV
          echo "MLIR_DIR=${LLVM_PREFIX}/lib/cmake/mlir" >> $GITHUB_ENV
          # Add prefix to CMAKE_PREFIX_PATH so find_package can locate components
          echo "CMAKE_PREFIX_PATH=${LLVM_PREFIX}:${CMAKE_PREFIX_PATH:-}" >> $GITHUB_ENV

      - name: Install Homebrew Python (CMake Python dev components)
        run: |
          # Ensure CMake can find a Python that provides the Python3::Module config
          brew update || true
          brew install python@3.11 || true
          PY3_PREFIX=$(brew --prefix python@3.11)
          echo "PYTHON_EXECUTABLE=${PY3_PREFIX}/bin/python3" >> $GITHUB_ENV
          # Prefer config-style packages when CMake searches for packages (helps FindPython pick the config)
          echo "CMAKE_FIND_PACKAGE_PREFER_CONFIG=ON" >> $GITHUB_ENV

      - name: Configure CMake (Ninja)
        working-directory: build_metal
        env:
          MLIR_DIR: ${{ env.MLIR_DIR }}
          LLVM_DIR: ${{ env.LLVM_DIR }}
          CMAKE_PREFIX_PATH: ${{ env.CMAKE_PREFIX_PATH }}
          PYTHON_EXECUTABLE: ${{ env.PYTHON_EXECUTABLE }}
          CMAKE_FIND_PACKAGE_PREFER_CONFIG: ${{ env.CMAKE_FIND_PACKAGE_PREFER_CONFIG }}
        run: |
          cmake -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DTRITON_ENABLE_MPS_BACKEND=ON \
            -DMLIR_DIR=${MLIR_DIR} \
            -DLLVM_DIR=${LLVM_DIR} \
            -DCMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH} \
            -DPython3_EXECUTABLE=${PYTHON_EXECUTABLE} \
            -DCMAKE_FIND_PACKAGE_PREFER_CONFIG=${CMAKE_FIND_PACKAGE_PREFER_CONFIG} ..

      - name: Build
        working-directory: build_metal
        run: cmake --build . --target all -j $(sysctl -n hw.ncpu)

      - name: Run Metal C++ tests (ctest)
        working-directory: build_metal
        run: |
          echo "Running ctest for Metal"
          ctest -R Metal -V || true

      - name: Setup Python venv & deps
        run: |
          python -m venv .venv
          source .venv/bin/activate
          python -m pip install --upgrade pip setuptools wheel
          pip install -e .
          pip install pyobjc pytest numpy

      - name: Run Python unit tests (metal subset)
        run: |
          source .venv/bin/activate
          pytest -q python/test/backend/test_metal_compiler.py::test_compile_reflection_parses_various_argument_forms || true
          pytest -q python/test/backend/test_metal_runtime.py::test_launch_kernel_mocked || true
          pytest -q python/test/backend/test_metal_runtime.py::test_end_to_end_minimal_macos -k macos_integration || true

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: metal-smoke-logs
          path: |
            build_metal/CMakeFiles/**
            build_metal/Testing/**
            build_metal/CTestTestfile.cmake
            build_metal_logs/**

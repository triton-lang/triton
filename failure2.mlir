// -----// IR Dump Before Canonicalizer (canonicalize) ('builtin.module' operation) //----- //
#blocked = #ttg.blocked<{sizePerThread = [1, 8], threadsPerWarp = [8, 8], warpsPerCTA = [1, 1], order = [1, 0]}>
#blocked1 = #ttg.blocked<{sizePerThread = [1, 4], threadsPerWarp = [4, 16], warpsPerCTA = [1, 1], order = [1, 0]}>
#linear = #ttg.linear<{register = [[0, 1], [0, 2], [0, 4], [8, 0], [16, 0], [32, 0]], lane = [[0, 8], [0, 16], [0, 32], [1, 0], [2, 0], [4, 0]], warp = [], block = []}>
#loc = loc("/triton/threadRake_test.py":114:0)
#mma = #ttg.amd_mfma<{versionMajor = 3, versionMinor = 0, warpsPerCTA = [1, 1], instrShape = [16, 16], isTransposed = true}>
#shared = #ttg.swizzled_blocks_shared<{vec = 4, perPhase = 1, maxPhase = 16, order = [1, 0]}>
#shared1 = #ttg.swizzled_shared<{vec = 1, perPhase = 1, maxPhase = 1, order = [1, 0]}>
#smem = #ttg.shared_memory
module attributes {"ttg.num-ctas" = 1 : i32, "ttg.num-warps" = 1 : i32, ttg.target = "hip:gfx942", "ttg.threads-per-warp" = 64 : i32} {
  tt.func public @matmul_kernel(%arg0: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/threadRake_test.py":114:0), %arg1: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/threadRake_test.py":114:0), %arg2: !tt.ptr<f16> {tt.divisibility = 16 : i32, tt.pointer_range = 32 : i32} loc("/triton/threadRake_test.py":114:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("/triton/threadRake_test.py":114:0)) attributes {noinline = false} {
    %0 = tt.splat %arg0 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc1)
    %1 = tt.get_program_id x : i32 loc(#loc2)
    %c63_i32 = arith.constant 63 : i32 loc(#loc3)
    %2 = arith.addi %arg4, %c63_i32 : i32 loc(#loc46)
    %c64_i32 = arith.constant 64 : i32 loc(#loc3)
    %3 = arith.divsi %2, %c64_i32 : i32 loc(#loc47)
    %4 = arith.divsi %1, %3 : i32 loc(#loc7)
    %5 = arith.remsi %1, %3 : i32 loc(#loc8)
    %6 = arith.addi %arg3, %c63_i32 : i32 loc(#loc48)
    %7 = arith.divsi %6, %c64_i32 : i32 loc(#loc49)
    %8 = arith.subi %7, %4 : i32 loc(#loc10)
    %c1_i32 = arith.constant 1 : i32 loc(#loc3)
    %9 = arith.minsi %8, %c1_i32 : i32 loc(#loc11)
    %10 = arith.remsi %5, %9 : i32 loc(#loc12)
    %11 = arith.addi %4, %10 : i32 loc(#loc13)
    %12 = arith.muli %11, %c64_i32 : i32 loc(#loc14)
    %13 = tt.splat %12 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %14 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc16)
    %15 = arith.addi %13, %14 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc15)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc17)
    %17 = tt.splat %arg6 : i32 -> tensor<64x1xi32, #blocked> loc(#loc18)
    %18 = arith.muli %16, %17 : tensor<64x1xi32, #blocked> loc(#loc18)
    %19 = tt.broadcast %18 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
    %20 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc20)
    %21 = tt.expand_dims %20 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc20)
    %22 = tt.broadcast %21 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc19)
    %23 = arith.addi %19, %22 : tensor<64x64xi32, #blocked> loc(#loc19)
    %24 = tt.addptr %0, %23 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc1)
    %25 = ttg.convert_layout %24 : tensor<64x64x!tt.ptr<f16>, #blocked> -> tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc21)
    %26 = arith.addi %arg5, %c63_i32 : i32 loc(#loc50)
    %27 = arith.divsi %26, %c64_i32 : i32 loc(#loc51)
    %c0_i32 = arith.constant 0 : i32 loc(#loc3)
    %28 = arith.cmpi sgt, %27, %c0_i32 : i32 loc(#loc23)
    %29 = tt.splat %28 : i1 -> tensor<64x64xi1, #blocked> loc(#loc23)
    %30 = ttg.convert_layout %29 : tensor<64x64xi1, #blocked> -> tensor<64x64xi1, #blocked1> loc(#loc21)
    %31 = tt.load %25, %30 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc21)
    %32 = tt.splat %arg1 : !tt.ptr<f16> -> tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc24)
    %33 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> loc(#loc25)
    %34 = tt.expand_dims %33 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc25)
    %35 = tt.splat %arg7 : i32 -> tensor<64x1xi32, #blocked> loc(#loc26)
    %36 = arith.muli %34, %35 : tensor<64x1xi32, #blocked> loc(#loc26)
    %37 = tt.broadcast %36 : tensor<64x1xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc27)
    %38 = arith.divsi %5, %9 : i32 loc(#loc28)
    %39 = arith.muli %38, %c64_i32 : i32 loc(#loc29)
    %40 = tt.splat %39 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc30)
    %41 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc16)
    %42 = arith.addi %40, %41 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> loc(#loc30)
    %43 = tt.expand_dims %42 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc31)
    %44 = tt.broadcast %43 : tensor<1x64xi32, #blocked> -> tensor<64x64xi32, #blocked> loc(#loc27)
    %45 = arith.addi %37, %44 : tensor<64x64xi32, #blocked> loc(#loc27)
    %46 = tt.addptr %32, %45 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc24)
    %47 = tt.splat %28 : i1 -> tensor<64x64xi1, #blocked> loc(#loc23)
    %48 = tt.load %46, %47 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc32)
    %cst = arith.constant dense<64> : tensor<64x64xi32, #blocked> loc(#loc3)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<64x64xf32, #mma> loc(#loc3)
    %49 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc16)
    %50 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc16)
    %51 = tt.splat %12 : i32 -> tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %52 = arith.addi %51, %49 : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> loc(#loc15)
    %53 = tt.splat %39 : i32 -> tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc30)
    %54 = arith.addi %53, %50 : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> loc(#loc30)
    %55 = tt.expand_dims %52 {axis = 1 : i32} : tensor<64xi32, #ttg.slice<{dim = 1, parent = #mma}>> -> tensor<64x1xi32, #mma> loc(#loc17)
    %56 = tt.expand_dims %54 {axis = 0 : i32} : tensor<64xi32, #ttg.slice<{dim = 0, parent = #mma}>> -> tensor<1x64xi32, #mma> loc(#loc31)
    %57 = tt.broadcast %56 : tensor<1x64xi32, #mma> -> tensor<64x64xi32, #mma> loc(#loc27)
    %58 = arith.muli %arg7, %c64_i32 : i32 loc(#loc33)
    %59 = tt.splat %58 : i32 -> tensor<64x64xi32, #blocked> loc(#loc34)
    %60 = ttg.local_alloc  : () -> !ttg.memdesc<1x64x64xf16, #shared, #smem, mutable> loc(#loc21)
    %61 = ttg.local_alloc  : () -> !ttg.memdesc<1x64x64xf16, #shared1, #smem, mutable> loc(#loc32)
    %62 = ttg.convert_layout %31 : tensor<64x64xf16, #blocked1> -> tensor<64x64xf16, #blocked> loc(#loc21)
    %63 = ttg.memdesc_subview %60[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable> loc(#loc21)
    %64 = ttg.convert_layout %62 : tensor<64x64xf16, #blocked> -> tensor<64x64xf16, #linear> loc(#loc21)
    ttg.local_store %64, %63 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x64xf16, #linear> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable> loc(#loc21)
    %65 = ttg.memdesc_subview %61[%c0_i32, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc32)
    ttg.local_store %48, %65 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x64xf16, #blocked> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc32)
    %66 = arith.subi %27, %c1_i32 : i32 loc(#loc23)
    %67:6 = scf.for %arg9 = %c0_i32 to %66 step %c1_i32 iter_args(%arg10 = %cst_0, %arg11 = %24, %arg12 = %46, %arg13 = %c0_i32, %arg14 = %63, %arg15 = %65) -> (tensor<64x64xf32, #mma>, tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64x!tt.ptr<f16>, #blocked>, i32, !ttg.memdesc<64x64xf16, #shared, #smem, mutable>, !ttg.memdesc<64x64xf16, #shared1, #smem, mutable>)  : i32 {
      %87 = tt.addptr %arg11, %cst : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc35)
      %88 = ttg.convert_layout %87 : tensor<64x64x!tt.ptr<f16>, #blocked> -> tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc21)
      %89 = tt.load %88 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x64x!tt.ptr<f16>, #blocked1> loc(#loc21)
      %90 = tt.addptr %arg12, %59 : tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64xi32, #blocked> loc(#loc34)
      %91 = tt.load %90 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x64x!tt.ptr<f16>, #blocked> loc(#loc32)
      %92 = ttg.convert_layout %89 : tensor<64x64xf16, #blocked1> -> tensor<64x64xf16, #blocked> loc(#loc21)
      %93 = ttg.local_load %arg14 : !ttg.memdesc<64x64xf16, #shared, #smem, mutable> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc21)
      %94 = ttg.local_load %arg15 : !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc32)
      %95 = tt.dot %93, %94, %arg10, inputPrecision = tf32 : tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc36)
      %96 = arith.addi %arg13, %c1_i32 : i32 loc(#loc23)
      %97 = arith.cmpi slt, %96, %c1_i32 : i32 loc(#loc23)
      %98 = arith.select %97, %96, %c0_i32 : i32 loc(#loc23)
      %99 = ttg.memdesc_subview %60[%98, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xf16, #shared, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable> loc(#loc21)
      %100 = ttg.convert_layout %92 : tensor<64x64xf16, #blocked> -> tensor<64x64xf16, #linear> loc(#loc21)
      ttg.local_store %100, %99 {OpIdx = #amdgpu.OpIdx<0>} : tensor<64x64xf16, #linear> -> !ttg.memdesc<64x64xf16, #shared, #smem, mutable> loc(#loc21)
      %101 = ttg.memdesc_subview %61[%98, %c0_i32, %c0_i32] : !ttg.memdesc<1x64x64xf16, #shared1, #smem, mutable> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc32)
      ttg.local_store %91, %101 {OpIdx = #amdgpu.OpIdx<1>} : tensor<64x64xf16, #blocked> -> !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc32)
      scf.yield %95, %87, %90, %98, %99, %101 : tensor<64x64xf32, #mma>, tensor<64x64x!tt.ptr<f16>, #blocked>, tensor<64x64x!tt.ptr<f16>, #blocked>, i32, !ttg.memdesc<64x64xf16, #shared, #smem, mutable>, !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> loc(#loc23)
    } loc(#loc23)
    %68 = arith.cmpi sge, %27, %c1_i32 : i32 loc(#loc23)
    %69 = ttg.local_load %67#4 : !ttg.memdesc<64x64xf16, #shared, #smem, mutable> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> loc(#loc21)
    %70 = ttg.local_load %67#5 : !ttg.memdesc<64x64xf16, #shared1, #smem, mutable> -> tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> loc(#loc32)
    %71 = scf.if %68 -> (tensor<64x64xf32, #mma>) {
      %87 = tt.dot %69, %70, %67#0, inputPrecision = tf32 : tensor<64x64xf16, #ttg.dot_op<{opIdx = 0, parent = #mma, kWidth = 4}>> * tensor<64x64xf16, #ttg.dot_op<{opIdx = 1, parent = #mma, kWidth = 4}>> -> tensor<64x64xf32, #mma> loc(#loc36)
      scf.yield %87 : tensor<64x64xf32, #mma> loc(#loc36)
    } else {
      scf.yield %67#0 : tensor<64x64xf32, #mma> loc(#loc36)
    } loc(#loc36)
    %72 = arith.select %68, %71, %67#0 : tensor<64x64xf32, #mma> loc(#loc23)
    ttg.local_dealloc %60 : !ttg.memdesc<1x64x64xf16, #shared, #smem, mutable> loc(#loc23)
    ttg.local_dealloc %61 : !ttg.memdesc<1x64x64xf16, #shared1, #smem, mutable> loc(#loc23)
    %73 = arith.truncf %72 : tensor<64x64xf32, #mma> to tensor<64x64xf16, #mma> loc(#loc37)
    %74 = tt.splat %arg8 : i32 -> tensor<64x1xi32, #mma> loc(#loc38)
    %75 = arith.muli %74, %55 : tensor<64x1xi32, #mma> loc(#loc38)
    %76 = tt.splat %arg2 : !tt.ptr<f16> -> tensor<64x1x!tt.ptr<f16>, #mma> loc(#loc39)
    %77 = tt.addptr %76, %75 : tensor<64x1x!tt.ptr<f16>, #mma>, tensor<64x1xi32, #mma> loc(#loc39)
    %78 = tt.broadcast %77 : tensor<64x1x!tt.ptr<f16>, #mma> -> tensor<64x64x!tt.ptr<f16>, #mma> loc(#loc40)
    %79 = tt.addptr %78, %57 : tensor<64x64x!tt.ptr<f16>, #mma>, tensor<64x64xi32, #mma> loc(#loc40)
    %80 = tt.splat %arg3 : i32 -> tensor<64x1xi32, #mma> loc(#loc41)
    %81 = arith.cmpi slt, %55, %80 : tensor<64x1xi32, #mma> loc(#loc41)
    %82 = tt.splat %arg4 : i32 -> tensor<1x64xi32, #mma> loc(#loc42)
    %83 = arith.cmpi slt, %56, %82 : tensor<1x64xi32, #mma> loc(#loc42)
    %84 = tt.broadcast %81 : tensor<64x1xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc43)
    %85 = tt.broadcast %83 : tensor<1x64xi1, #mma> -> tensor<64x64xi1, #mma> loc(#loc43)
    %86 = arith.andi %84, %85 : tensor<64x64xi1, #mma> loc(#loc43)
    tt.store %79, %73, %86 : tensor<64x64x!tt.ptr<f16>, #mma> loc(#loc44)
    tt.return loc(#loc45)
  } loc(#loc)
} loc(#loc)
#loc1 = loc("/triton/threadRake_test.py":158:22)
#loc2 = loc("/triton/threadRake_test.py":138:24)
#loc3 = loc(unknown)
#loc4 = loc("/triton/python/triton/language/standard.py":40:22)
#loc5 = loc("/triton/threadRake_test.py":140:27)
#loc6 = loc("/triton/python/triton/language/standard.py":40:28)
#loc7 = loc("/triton/threadRake_test.py":142:22)
#loc8 = loc("/triton/threadRake_test.py":145:34)
#loc9 = loc("/triton/threadRake_test.py":139:27)
#loc10 = loc("/triton/threadRake_test.py":144:35)
#loc11 = loc("/triton/threadRake_test.py":144:48)
#loc12 = loc("/triton/threadRake_test.py":145:54)
#loc13 = loc("/triton/threadRake_test.py":145:27)
#loc14 = loc("/triton/threadRake_test.py":155:22)
#loc15 = loc("/triton/threadRake_test.py":155:37)
#loc16 = loc("/triton/threadRake_test.py":155:50)
#loc17 = loc("/triton/threadRake_test.py":158:30)
#loc18 = loc("/triton/threadRake_test.py":158:41)
#loc19 = loc("/triton/threadRake_test.py":158:53)
#loc20 = loc("/triton/threadRake_test.py":158:60)
#loc21 = loc("/triton/threadRake_test.py":171:24)
#loc22 = loc("/triton/threadRake_test.py":167:33)
#loc23 = loc("/triton/threadRake_test.py":167:22)
#loc24 = loc("/triton/threadRake_test.py":159:22)
#loc25 = loc("/triton/threadRake_test.py":159:29)
#loc26 = loc("/triton/threadRake_test.py":159:40)
#loc27 = loc("/triton/threadRake_test.py":159:52)
#loc28 = loc("/triton/threadRake_test.py":146:40)
#loc29 = loc("/triton/threadRake_test.py":156:22)
#loc30 = loc("/triton/threadRake_test.py":156:37)
#loc31 = loc("/triton/threadRake_test.py":159:60)
#loc32 = loc("/triton/threadRake_test.py":172:24)
#loc33 = loc("/triton/threadRake_test.py":180:33)
#loc34 = loc("/triton/threadRake_test.py":180:18)
#loc35 = loc("/triton/threadRake_test.py":179:18)
#loc36 = loc("/triton/threadRake_test.py":177:35)
#loc37 = loc("/triton/threadRake_test.py":185:23)
#loc38 = loc("/triton/threadRake_test.py":191:33)
#loc39 = loc("/triton/threadRake_test.py":191:21)
#loc40 = loc("/triton/threadRake_test.py":191:52)
#loc41 = loc("/triton/threadRake_test.py":192:33)
#loc42 = loc("/triton/threadRake_test.py":192:58)
#loc43 = loc("/triton/threadRake_test.py":192:39)
#loc44 = loc("/triton/threadRake_test.py":193:21)
#loc45 = loc("/triton/threadRake_test.py":193:4)
#loc46 = loc(callsite(#loc4 at #loc5))
#loc47 = loc(callsite(#loc6 at #loc5))
#loc48 = loc(callsite(#loc4 at #loc9))
#loc49 = loc(callsite(#loc6 at #loc9))
#loc50 = loc(callsite(#loc4 at #loc22))
#loc51 = loc(callsite(#loc6 at #loc22))
